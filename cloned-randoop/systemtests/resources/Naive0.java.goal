package foo.bar;

import junit.framework.*;

public class Naive0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test1");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test2");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test3");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test4");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test5");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test6");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    int var2 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test7");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java.lang.Double var1 = new java.lang.Double(1.0d);
    int var2 = var0.indexOf((java.lang.Object)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test8");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    java2.util2.Iterator var6 = var2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test9");


    java.lang.Byte var0 = new java.lang.Byte((byte)(-1));
    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test10");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.removeLast();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test11");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java.lang.String var2 = "";
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.lang.Object[] var4 = var0.toArray(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test12");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var2.removeLast();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test13");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test14");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.Iterator var2 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test15");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test16");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test17");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test18");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java.lang.String var6 = "";
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.lang.Object[] var8 = var4.toArray(var7);
    int var9 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test19");


    java.lang.Short var0 = new java.lang.Short((short)1);
    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test20");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.Iterator var2 = var1.iterator();
    java2.util2.Collections.sort((java2.util2.List)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test21");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.Iterator var13 = var12.iterator();
    java2.util2.Collections.sort((java2.util2.List)var12);
    boolean var15 = var6.removeAll((java2.util2.Collection)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test22");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    java.lang.Integer var6 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)var2, (int)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test23");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.Iterator var13 = var12.iterator();
    java2.util2.Collections.sort((java2.util2.List)var12);
    boolean var15 = var6.removeAll((java2.util2.Collection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var16 = var6.getFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test24");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    java2.util2.Iterator var6 = var2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test25");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test26");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var7 = new java2.util2.LinkedList();
    boolean var8 = var1.removeAll((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test27");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    int var7 = java2.util2.Collections.binarySearch((java2.util2.List)var2, (java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test28");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var7 = new java2.util2.LinkedList();
    boolean var8 = var1.removeAll((java2.util2.Collection)var7);
    java.lang.Integer var9 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator var10 = var7.listIterator((int)var9);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test29");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.Iterator var13 = var12.iterator();
    java2.util2.Collections.sort((java2.util2.List)var12);
    boolean var15 = var6.removeAll((java2.util2.Collection)var12);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    int var23 = java2.util2.Collections.indexOfSubList((java2.util2.List)var21, (java2.util2.List)var22);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Collections.copy((java2.util2.List)var21, (java2.util2.List)var25);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    boolean var29 = var12.containsAll((java2.util2.Collection)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test30");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java.lang.Double var1 = new java.lang.Double(1.0d);
    int var2 = var0.indexOf((java.lang.Object)var1);
    java.lang.Integer var3 = new java.lang.Integer(100);
    java.lang.Integer var4 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var5 = var0.subList((int)var3, (int)var4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test31");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.Iterator var13 = var12.iterator();
    java2.util2.Collections.sort((java2.util2.List)var12);
    boolean var15 = var6.removeAll((java2.util2.Collection)var12);
    java.lang.String var16 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test32");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    java2.util2.Iterator var6 = var2.iterator();
    java.lang.Integer var7 = new java.lang.Integer((-1));
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var2.set((int)var7, (java.lang.Object)var8);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test33");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java.lang.Object[] var5 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test34");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    var1.trimToSize();

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test35");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test36");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test37");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java.lang.Integer var2 = new java.lang.Integer(10);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    java2.util2.Iterator var9 = var5.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var1.addAll((int)var2, (java2.util2.Collection)var5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test38");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var11 = var1.getFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test39");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java.lang.Byte var20 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var18, (java.lang.Object)var20);
    boolean var22 = var13.removeAll((java2.util2.Collection)var18);
    java2.util2.LinkedList var23 = new java2.util2.LinkedList();
    java2.util2.LinkedList var24 = new java2.util2.LinkedList((java2.util2.Collection)var23);
    java2.util2.Iterator var25 = var24.iterator();
    java2.util2.Collections.sort((java2.util2.List)var24);
    boolean var27 = var18.removeAll((java2.util2.Collection)var24);
    java.lang.String var28 = var18.toString();
    int var29 = var1.lastIndexOf((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test40");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java.lang.Object[] var5 = var2.toArray();
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test41");


    java.lang.Integer var0 = new java.lang.Integer(10);
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    java2.util2.Collections.copy((java2.util2.List)var2, (java2.util2.List)var6);
    java2.util2.List var8 = java2.util2.Collections.nCopies((int)var0, (java.lang.Object)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test42");


    java.lang.Integer var0 = new java.lang.Integer(10);
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    java2.util2.Collections.copy((java2.util2.List)var2, (java2.util2.List)var6);
    java2.util2.List var8 = java2.util2.Collections.nCopies((int)var0, (java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var6.removeLast();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test43");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    int var2 = var1.size();
    java.lang.Short var3 = new java.lang.Short((short)100);
    int var4 = var1.indexOf((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test44");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java.lang.String var2 = "";
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.lang.Object[] var4 = var0.toArray(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var0.getLast();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test45");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = var0.getFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test46");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    java.lang.String var7 = "";
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.lang.Object[] var9 = var5.toArray(var8);
    java.lang.Object[] var10 = var2.toArray(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test47");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java.lang.Integer var2 = new java.lang.Integer((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var1.remove((int)var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test48");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.Iterator var14 = var13.iterator();
    java2.util2.Collections.sort((java2.util2.List)var13);
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)var5, (java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test49");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java.lang.Integer var11 = new java.lang.Integer(0);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.Collections.copy((java2.util2.List)var13, (java2.util2.List)var17);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Iterator var26 = var25.iterator();
    java2.util2.Collections.sort((java2.util2.List)var25);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var25);
    boolean var29 = var1.addAll((int)var11, (java2.util2.Collection)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test50");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java.lang.Integer var11 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var1.remove((int)var11);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test51");


    java.lang.Integer var0 = new java.lang.Integer(10);
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    java2.util2.Collections.copy((java2.util2.List)var2, (java2.util2.List)var6);
    java2.util2.List var8 = java2.util2.Collections.nCopies((int)var0, (java.lang.Object)var6);
    java2.util2.LinkedList var9 = new java2.util2.LinkedList();
    java2.util2.LinkedList var10 = new java2.util2.LinkedList((java2.util2.Collection)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    int var12 = java2.util2.Collections.indexOfSubList((java2.util2.List)var10, (java2.util2.List)var11);
    java2.util2.Collections.shuffle((java2.util2.List)var11);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    java2.util2.LinkedList var15 = new java2.util2.LinkedList((java2.util2.Collection)var14);
    java.lang.String var16 = "";
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    java.lang.Object[] var19 = var11.toArray(var17);
    java.lang.Object[] var20 = var6.toArray(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test52");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test53");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java.lang.Integer var11 = new java.lang.Integer(0);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.Collections.copy((java2.util2.List)var13, (java2.util2.List)var17);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Iterator var26 = var25.iterator();
    java2.util2.Collections.sort((java2.util2.List)var25);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var25);
    boolean var29 = var1.addAll((int)var11, (java2.util2.Collection)var25);
    java.lang.Integer var30 = new java.lang.Integer(100);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    java2.util2.LinkedList var32 = new java2.util2.LinkedList((java2.util2.Collection)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    int var34 = java2.util2.Collections.indexOfSubList((java2.util2.List)var32, (java2.util2.List)var33);
    java2.util2.Collections.shuffle((java2.util2.List)var33);
    java.lang.Object[] var36 = var33.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var1.addAll((int)var30, (java2.util2.Collection)var33);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test54");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator var10 = var4.listIterator((int)var9);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test55");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Iterator var6 = var5.iterator();
    java2.util2.Collections.sort((java2.util2.List)var5);
    boolean var8 = var2.equals((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test56");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    java2.util2.Iterator var6 = var2.iterator();
    java.lang.Integer var7 = new java.lang.Integer(0);
    boolean var8 = var2.add((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test57");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    var5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test58");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.Iterator var14 = var13.iterator();
    java2.util2.Collections.sort((java2.util2.List)var13);
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)var5, (java.lang.Object)var13);
    java.lang.Integer var17 = new java.lang.Integer(0);
    java2.util2.ArrayList var18 = new java2.util2.ArrayList(var17);
    java2.util2.LinkedList var19 = new java2.util2.LinkedList();
    java2.util2.LinkedList var20 = new java2.util2.LinkedList((java2.util2.Collection)var19);
    java2.util2.LinkedList var21 = new java2.util2.LinkedList();
    int var22 = java2.util2.Collections.indexOfSubList((java2.util2.List)var20, (java2.util2.List)var21);
    java2.util2.Collections.shuffle((java2.util2.List)var21);
    java.lang.Object[] var24 = var21.toArray();
    boolean var25 = var18.add((java.lang.Object)var21);
    java.lang.Integer var26 = new java.lang.Integer((-1));
    var18.ensureCapacity((int)var26);
    java.lang.Integer var28 = new java.lang.Integer(0);
    java2.util2.LinkedList var29 = new java2.util2.LinkedList();
    java2.util2.LinkedList var30 = new java2.util2.LinkedList((java2.util2.Collection)var29);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    int var32 = java2.util2.Collections.indexOfSubList((java2.util2.List)var30, (java2.util2.List)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    java2.util2.LinkedList var34 = new java2.util2.LinkedList((java2.util2.Collection)var33);
    java2.util2.LinkedList var35 = new java2.util2.LinkedList();
    int var36 = java2.util2.Collections.indexOfSubList((java2.util2.List)var34, (java2.util2.List)var35);
    java2.util2.LinkedList var37 = new java2.util2.LinkedList();
    java2.util2.LinkedList var38 = new java2.util2.LinkedList((java2.util2.Collection)var37);
    java2.util2.Collections.copy((java2.util2.List)var34, (java2.util2.List)var38);
    java2.util2.Collections.copy((java2.util2.List)var30, (java2.util2.List)var34);
    java2.util2.LinkedList var41 = new java2.util2.LinkedList();
    java2.util2.LinkedList var42 = new java2.util2.LinkedList((java2.util2.Collection)var41);
    java2.util2.Iterator var43 = var42.iterator();
    java2.util2.Collections.sort((java2.util2.List)var42);
    java2.util2.Map var45 = java2.util2.Collections.singletonMap((java.lang.Object)var34, (java.lang.Object)var42);
    boolean var46 = var18.addAll((int)var28, (java2.util2.Collection)var42);
    var13.addFirst((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test59");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java.lang.Byte var4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var2, (java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var2.removeFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test60");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java.lang.Byte var8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var6, (java.lang.Object)var8);
    boolean var10 = var1.removeAll((java2.util2.Collection)var6);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.Iterator var13 = var12.iterator();
    java2.util2.Collections.sort((java2.util2.List)var12);
    boolean var15 = var6.removeAll((java2.util2.Collection)var12);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    int var23 = java2.util2.Collections.indexOfSubList((java2.util2.List)var21, (java2.util2.List)var22);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Collections.copy((java2.util2.List)var21, (java2.util2.List)var25);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    boolean var29 = var12.containsAll((java2.util2.Collection)var21);
    java.lang.Integer var30 = new java.lang.Integer(10);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    java2.util2.LinkedList var32 = new java2.util2.LinkedList((java2.util2.Collection)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    int var34 = java2.util2.Collections.indexOfSubList((java2.util2.List)var32, (java2.util2.List)var33);
    java2.util2.LinkedList var35 = new java2.util2.LinkedList();
    java2.util2.LinkedList var36 = new java2.util2.LinkedList((java2.util2.Collection)var35);
    java2.util2.LinkedList var37 = new java2.util2.LinkedList();
    int var38 = java2.util2.Collections.indexOfSubList((java2.util2.List)var36, (java2.util2.List)var37);
    java.lang.Byte var39 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var39);
    boolean var41 = var32.removeAll((java2.util2.Collection)var37);
    java2.util2.LinkedList var42 = new java2.util2.LinkedList();
    java2.util2.LinkedList var43 = new java2.util2.LinkedList((java2.util2.Collection)var42);
    java2.util2.Iterator var44 = var43.iterator();
    java2.util2.Collections.sort((java2.util2.List)var43);
    boolean var46 = var37.removeAll((java2.util2.Collection)var43);
    java.lang.String var47 = var37.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.add((int)var30, (java.lang.Object)var47);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test61");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    int var2 = var1.size();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    boolean var9 = var1.containsAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test62");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.Collections.shuffle((java2.util2.List)var3);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    java2.util2.LinkedList var7 = new java2.util2.LinkedList((java2.util2.Collection)var6);
    java.lang.String var8 = "";
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.lang.Object[] var10 = var6.toArray(var9);
    java.lang.Object[] var11 = var3.toArray(var9);
    boolean var12 = var0.add((java.lang.Object)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test63");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java.lang.Byte var20 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var18, (java.lang.Object)var20);
    boolean var22 = var13.removeAll((java2.util2.Collection)var18);
    java2.util2.LinkedList var23 = new java2.util2.LinkedList();
    java2.util2.LinkedList var24 = new java2.util2.LinkedList((java2.util2.Collection)var23);
    java2.util2.Iterator var25 = var24.iterator();
    java2.util2.Collections.sort((java2.util2.List)var24);
    boolean var27 = var18.removeAll((java2.util2.Collection)var24);
    java.lang.String var28 = var18.toString();
    int var29 = var1.lastIndexOf((java.lang.Object)var18);
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test64");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java.lang.String var6 = "";
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.lang.Object[] var8 = var4.toArray(var7);
    int var9 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var4);
    java2.util2.Iterator var10 = var2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test65");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test66");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java.lang.Byte var5 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var3, (java.lang.Object)var5);
    java2.util2.Iterator var7 = var3.iterator();
    boolean var8 = var0.remove((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test67");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Iterator var6 = var5.iterator();
    java2.util2.Collections.sort((java2.util2.List)var5);
    boolean var8 = var2.equals((java.lang.Object)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var5.removeFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test68");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    int var14 = var13.size();
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    int var18 = java2.util2.Collections.indexOfSubList((java2.util2.List)var16, (java2.util2.List)var17);
    java.lang.Byte var19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var19);
    boolean var21 = var13.containsAll((java2.util2.Collection)var17);
    boolean var22 = var5.remove((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test69");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test70");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var7 = new java2.util2.LinkedList();
    boolean var8 = var1.removeAll((java2.util2.Collection)var7);
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test71");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    java2.util2.Iterator var9 = var5.iterator();
    boolean var10 = var2.remove((java.lang.Object)var5);
    boolean var11 = var0.removeAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test72");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.Collections.shuffle((java2.util2.List)var3);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    java2.util2.LinkedList var7 = new java2.util2.LinkedList((java2.util2.Collection)var6);
    java.lang.String var8 = "";
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.lang.Object[] var10 = var6.toArray(var9);
    java.lang.Object[] var11 = var3.toArray(var9);
    boolean var12 = var0.add((java.lang.Object)var9);
    java.lang.Integer var13 = new java.lang.Integer(10);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    java2.util2.LinkedList var15 = new java2.util2.LinkedList((java2.util2.Collection)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    int var17 = java2.util2.Collections.indexOfSubList((java2.util2.List)var15, (java2.util2.List)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    java2.util2.LinkedList var19 = new java2.util2.LinkedList((java2.util2.Collection)var18);
    java2.util2.Collections.copy((java2.util2.List)var15, (java2.util2.List)var19);
    java2.util2.List var21 = java2.util2.Collections.nCopies((int)var13, (java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.remove((java.lang.Object)var21);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test73");


    java.lang.Object var0 = new java.lang.Object();

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test74");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java.lang.Integer var11 = new java.lang.Integer(0);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.Collections.copy((java2.util2.List)var13, (java2.util2.List)var17);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Iterator var26 = var25.iterator();
    java2.util2.Collections.sort((java2.util2.List)var25);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var25);
    boolean var29 = var1.addAll((int)var11, (java2.util2.Collection)var25);
    java.lang.Long var30 = new java.lang.Long((-1L));
    int var31 = var1.lastIndexOf((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test75");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.Iterator var14 = var13.iterator();
    java2.util2.Collections.sort((java2.util2.List)var13);
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)var5, (java.lang.Object)var13);
    java2.util2.Map var17 = java2.util2.Collections.synchronizedMap(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test76");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    int var4 = var3.size();
    java.lang.Short var5 = new java.lang.Short((short)100);
    int var6 = var3.indexOf((java.lang.Object)var5);
    int var7 = var1.lastIndexOf((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test77");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    int var14 = java2.util2.Collections.indexOfSubList((java2.util2.List)var12, (java2.util2.List)var13);
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    int var18 = java2.util2.Collections.indexOfSubList((java2.util2.List)var16, (java2.util2.List)var17);
    java.lang.Byte var19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var19);
    boolean var21 = var12.removeAll((java2.util2.Collection)var17);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    java2.util2.LinkedList var23 = new java2.util2.LinkedList((java2.util2.Collection)var22);
    java2.util2.Iterator var24 = var23.iterator();
    java2.util2.Collections.sort((java2.util2.List)var23);
    boolean var26 = var17.removeAll((java2.util2.Collection)var23);
    java2.util2.LinkedList var27 = new java2.util2.LinkedList();
    java2.util2.LinkedList var28 = new java2.util2.LinkedList((java2.util2.Collection)var27);
    java2.util2.LinkedList var29 = new java2.util2.LinkedList();
    int var30 = java2.util2.Collections.indexOfSubList((java2.util2.List)var28, (java2.util2.List)var29);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    java2.util2.LinkedList var32 = new java2.util2.LinkedList((java2.util2.Collection)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    int var34 = java2.util2.Collections.indexOfSubList((java2.util2.List)var32, (java2.util2.List)var33);
    java2.util2.LinkedList var35 = new java2.util2.LinkedList();
    java2.util2.LinkedList var36 = new java2.util2.LinkedList((java2.util2.Collection)var35);
    java2.util2.Collections.copy((java2.util2.List)var32, (java2.util2.List)var36);
    java2.util2.Collections.copy((java2.util2.List)var28, (java2.util2.List)var32);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    boolean var40 = var23.containsAll((java2.util2.Collection)var32);
    int var41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var1, (java2.util2.List)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test78");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java.lang.Integer var7 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)var5, (int)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test79");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java.lang.String var2 = "";
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.lang.Object[] var4 = var0.toArray(var3);
    java2.util2.Iterator var5 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test80");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    int var14 = java2.util2.Collections.indexOfSubList((java2.util2.List)var12, (java2.util2.List)var13);
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    int var18 = java2.util2.Collections.indexOfSubList((java2.util2.List)var16, (java2.util2.List)var17);
    java.lang.Byte var19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var19);
    boolean var21 = var12.removeAll((java2.util2.Collection)var17);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    java2.util2.LinkedList var23 = new java2.util2.LinkedList((java2.util2.Collection)var22);
    java2.util2.Iterator var24 = var23.iterator();
    java2.util2.Collections.sort((java2.util2.List)var23);
    boolean var26 = var17.removeAll((java2.util2.Collection)var23);
    java2.util2.LinkedList var27 = new java2.util2.LinkedList();
    java2.util2.LinkedList var28 = new java2.util2.LinkedList((java2.util2.Collection)var27);
    java2.util2.LinkedList var29 = new java2.util2.LinkedList();
    int var30 = java2.util2.Collections.indexOfSubList((java2.util2.List)var28, (java2.util2.List)var29);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    java2.util2.LinkedList var32 = new java2.util2.LinkedList((java2.util2.Collection)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    int var34 = java2.util2.Collections.indexOfSubList((java2.util2.List)var32, (java2.util2.List)var33);
    java2.util2.LinkedList var35 = new java2.util2.LinkedList();
    java2.util2.LinkedList var36 = new java2.util2.LinkedList((java2.util2.Collection)var35);
    java2.util2.Collections.copy((java2.util2.List)var32, (java2.util2.List)var36);
    java2.util2.Collections.copy((java2.util2.List)var28, (java2.util2.List)var32);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    boolean var40 = var23.containsAll((java2.util2.Collection)var32);
    int var41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var1, (java2.util2.List)var32);
    java2.util2.TreeSet var42 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test81");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    int var4 = var3.size();
    java.lang.Short var5 = new java.lang.Short((short)100);
    int var6 = var3.indexOf((java.lang.Object)var5);
    int var7 = var1.lastIndexOf((java.lang.Object)var3);
    java.lang.Integer var8 = new java.lang.Integer(10);
    java2.util2.LinkedList var9 = new java2.util2.LinkedList();
    java2.util2.LinkedList var10 = new java2.util2.LinkedList((java2.util2.Collection)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    int var12 = java2.util2.Collections.indexOfSubList((java2.util2.List)var10, (java2.util2.List)var11);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    java2.util2.LinkedList var14 = new java2.util2.LinkedList((java2.util2.Collection)var13);
    java2.util2.Collections.copy((java2.util2.List)var10, (java2.util2.List)var14);
    java2.util2.List var16 = java2.util2.Collections.nCopies((int)var8, (java.lang.Object)var14);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    java2.util2.LinkedList var18 = new java2.util2.LinkedList((java2.util2.Collection)var17);
    java2.util2.LinkedList var19 = new java2.util2.LinkedList();
    int var20 = java2.util2.Collections.indexOfSubList((java2.util2.List)var18, (java2.util2.List)var19);
    java2.util2.Collections.shuffle((java2.util2.List)var19);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    java2.util2.LinkedList var23 = new java2.util2.LinkedList((java2.util2.Collection)var22);
    java.lang.String var24 = "";
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.lang.Object[] var26 = var22.toArray(var25);
    java.lang.Object[] var27 = var19.toArray(var25);
    java.lang.Object[] var28 = var14.toArray(var25);
    java2.util2.Collections.fill((java2.util2.List)var1, (java.lang.Object)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test82");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java.lang.String var2 = "";
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.lang.Object[] var4 = var0.toArray(var3);
    java.lang.Integer var5 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator var6 = var0.listIterator((int)var5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test83");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    int var14 = var13.size();
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    int var18 = java2.util2.Collections.indexOfSubList((java2.util2.List)var16, (java2.util2.List)var17);
    java.lang.Byte var19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var19);
    boolean var21 = var13.containsAll((java2.util2.Collection)var17);
    boolean var22 = var5.remove((java.lang.Object)var13);
    java.lang.Integer var23 = new java.lang.Integer(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var24 = var5.remove((int)var23);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test84");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java.lang.Integer var11 = new java.lang.Integer(0);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.LinkedList var18 = new java2.util2.LinkedList();
    int var19 = java2.util2.Collections.indexOfSubList((java2.util2.List)var17, (java2.util2.List)var18);
    java2.util2.LinkedList var20 = new java2.util2.LinkedList();
    java2.util2.LinkedList var21 = new java2.util2.LinkedList((java2.util2.Collection)var20);
    java2.util2.Collections.copy((java2.util2.List)var17, (java2.util2.List)var21);
    java2.util2.Collections.copy((java2.util2.List)var13, (java2.util2.List)var17);
    java2.util2.LinkedList var24 = new java2.util2.LinkedList();
    java2.util2.LinkedList var25 = new java2.util2.LinkedList((java2.util2.Collection)var24);
    java2.util2.Iterator var26 = var25.iterator();
    java2.util2.Collections.sort((java2.util2.List)var25);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var25);
    boolean var29 = var1.addAll((int)var11, (java2.util2.Collection)var25);
    java.lang.Long var30 = new java.lang.Long((-1L));
    int var31 = var1.lastIndexOf((java.lang.Object)var30);
    java.lang.Integer var32 = new java.lang.Integer(0);
    java2.util2.ArrayList var33 = new java2.util2.ArrayList(var32);
    java2.util2.LinkedList var34 = new java2.util2.LinkedList();
    java2.util2.LinkedList var35 = new java2.util2.LinkedList((java2.util2.Collection)var34);
    java2.util2.LinkedList var36 = new java2.util2.LinkedList();
    int var37 = java2.util2.Collections.indexOfSubList((java2.util2.List)var35, (java2.util2.List)var36);
    java2.util2.Collections.shuffle((java2.util2.List)var36);
    java.lang.Object[] var39 = var36.toArray();
    boolean var40 = var33.add((java.lang.Object)var36);
    java.lang.Integer var41 = new java.lang.Integer((-1));
    var33.ensureCapacity((int)var41);
    java.lang.Integer var43 = new java.lang.Integer(0);
    java2.util2.LinkedList var44 = new java2.util2.LinkedList();
    java2.util2.LinkedList var45 = new java2.util2.LinkedList((java2.util2.Collection)var44);
    java2.util2.LinkedList var46 = new java2.util2.LinkedList();
    int var47 = java2.util2.Collections.indexOfSubList((java2.util2.List)var45, (java2.util2.List)var46);
    java2.util2.LinkedList var48 = new java2.util2.LinkedList();
    java2.util2.LinkedList var49 = new java2.util2.LinkedList((java2.util2.Collection)var48);
    java2.util2.LinkedList var50 = new java2.util2.LinkedList();
    int var51 = java2.util2.Collections.indexOfSubList((java2.util2.List)var49, (java2.util2.List)var50);
    java2.util2.LinkedList var52 = new java2.util2.LinkedList();
    java2.util2.LinkedList var53 = new java2.util2.LinkedList((java2.util2.Collection)var52);
    java2.util2.Collections.copy((java2.util2.List)var49, (java2.util2.List)var53);
    java2.util2.Collections.copy((java2.util2.List)var45, (java2.util2.List)var49);
    java2.util2.LinkedList var56 = new java2.util2.LinkedList();
    java2.util2.LinkedList var57 = new java2.util2.LinkedList((java2.util2.Collection)var56);
    java2.util2.Iterator var58 = var57.iterator();
    java2.util2.Collections.sort((java2.util2.List)var57);
    java2.util2.Map var60 = java2.util2.Collections.singletonMap((java.lang.Object)var49, (java.lang.Object)var57);
    boolean var61 = var33.addAll((int)var43, (java2.util2.Collection)var57);
    java.lang.Long var62 = new java.lang.Long((-1L));
    int var63 = var33.lastIndexOf((java.lang.Object)var62);
    int var64 = var1.indexOf((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test85");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java.lang.String var2 = "";
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.lang.Object[] var4 = var0.toArray(var3);
    java2.util2.Iterator var5 = var0.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var0.getFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test86");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    java2.util2.Iterator var9 = var5.iterator();
    boolean var10 = var2.remove((java.lang.Object)var5);
    boolean var11 = var0.removeAll((java2.util2.Collection)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.Collections.shuffle((java2.util2.List)var14);
    java.lang.Object[] var17 = var14.toArray();
    java.lang.Object[] var18 = var5.toArray(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test87");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.getFirst();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test88");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    java2.util2.LinkedList var6 = new java2.util2.LinkedList((java2.util2.Collection)var5);
    int var7 = java2.util2.Collections.binarySearch((java2.util2.List)var2, (java.lang.Object)var5);
    java.lang.Integer var8 = new java.lang.Integer(0);
    var5.addFirst((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test89");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    int var14 = java2.util2.Collections.indexOfSubList((java2.util2.List)var12, (java2.util2.List)var13);
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.LinkedList var17 = new java2.util2.LinkedList();
    int var18 = java2.util2.Collections.indexOfSubList((java2.util2.List)var16, (java2.util2.List)var17);
    java.lang.Byte var19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var19);
    boolean var21 = var12.removeAll((java2.util2.Collection)var17);
    java2.util2.LinkedList var22 = new java2.util2.LinkedList();
    java2.util2.LinkedList var23 = new java2.util2.LinkedList((java2.util2.Collection)var22);
    java2.util2.Iterator var24 = var23.iterator();
    java2.util2.Collections.sort((java2.util2.List)var23);
    boolean var26 = var17.removeAll((java2.util2.Collection)var23);
    java2.util2.LinkedList var27 = new java2.util2.LinkedList();
    java2.util2.LinkedList var28 = new java2.util2.LinkedList((java2.util2.Collection)var27);
    java2.util2.LinkedList var29 = new java2.util2.LinkedList();
    int var30 = java2.util2.Collections.indexOfSubList((java2.util2.List)var28, (java2.util2.List)var29);
    java2.util2.LinkedList var31 = new java2.util2.LinkedList();
    java2.util2.LinkedList var32 = new java2.util2.LinkedList((java2.util2.Collection)var31);
    java2.util2.LinkedList var33 = new java2.util2.LinkedList();
    int var34 = java2.util2.Collections.indexOfSubList((java2.util2.List)var32, (java2.util2.List)var33);
    java2.util2.LinkedList var35 = new java2.util2.LinkedList();
    java2.util2.LinkedList var36 = new java2.util2.LinkedList((java2.util2.Collection)var35);
    java2.util2.Collections.copy((java2.util2.List)var32, (java2.util2.List)var36);
    java2.util2.Collections.copy((java2.util2.List)var28, (java2.util2.List)var32);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    boolean var40 = var23.containsAll((java2.util2.Collection)var32);
    int var41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var1, (java2.util2.List)var32);
    java2.util2.TreeSet var42 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Iterator var43 = var42.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test90");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    int var4 = var3.size();
    java.lang.Short var5 = new java.lang.Short((short)100);
    int var6 = var3.indexOf((java.lang.Object)var5);
    int var7 = var1.lastIndexOf((java.lang.Object)var3);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.LinkedList var10 = new java2.util2.LinkedList();
    int var11 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, (java2.util2.List)var10);
    java2.util2.Collections.shuffle((java2.util2.List)var10);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    java2.util2.LinkedList var14 = new java2.util2.LinkedList((java2.util2.Collection)var13);
    int var15 = java2.util2.Collections.binarySearch((java2.util2.List)var10, (java.lang.Object)var13);
    boolean var16 = var1.remove((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test91");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test92");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java.lang.Double var1 = new java.lang.Double(1.0d);
    int var2 = var0.indexOf((java.lang.Object)var1);
    java2.util2.Collections.reverse((java2.util2.List)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test93");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    boolean var11 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test94");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java2.util2.Collections.copy((java2.util2.List)var1, (java2.util2.List)var5);
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.Iterator var14 = var13.iterator();
    java2.util2.Collections.sort((java2.util2.List)var13);
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)var5, (java.lang.Object)var13);
    java2.util2.Map var17 = java2.util2.Collections.unmodifiableMap(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test95");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    java2.util2.Iterator var9 = var5.iterator();
    boolean var10 = var2.remove((java.lang.Object)var5);
    boolean var11 = var0.removeAll((java2.util2.Collection)var5);
    boolean var12 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test96");


    java.lang.Integer var0 = new java.lang.Integer(0);
    java2.util2.ArrayList var1 = new java2.util2.ArrayList(var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList((java2.util2.Collection)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    int var5 = java2.util2.Collections.indexOfSubList((java2.util2.List)var3, (java2.util2.List)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java.lang.Object[] var7 = var4.toArray();
    boolean var8 = var1.add((java.lang.Object)var4);
    java.lang.Integer var9 = new java.lang.Integer((-1));
    var1.ensureCapacity((int)var9);
    boolean var11 = var1.isEmpty();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList();
    java2.util2.LinkedList var13 = new java2.util2.LinkedList((java2.util2.Collection)var12);
    java2.util2.LinkedList var14 = new java2.util2.LinkedList();
    int var15 = java2.util2.Collections.indexOfSubList((java2.util2.List)var13, (java2.util2.List)var14);
    java2.util2.LinkedList var16 = new java2.util2.LinkedList();
    java2.util2.LinkedList var17 = new java2.util2.LinkedList((java2.util2.Collection)var16);
    java2.util2.Collections.copy((java2.util2.List)var13, (java2.util2.List)var17);
    java2.util2.LinkedList var19 = new java2.util2.LinkedList();
    boolean var20 = var13.removeAll((java2.util2.Collection)var19);
    int var21 = var1.indexOf((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test97");


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList();
    java2.util2.LinkedList var2 = new java2.util2.LinkedList((java2.util2.Collection)var1);
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    int var4 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var3);
    java2.util2.Collections.shuffle((java2.util2.List)var3);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    java2.util2.LinkedList var7 = new java2.util2.LinkedList((java2.util2.Collection)var6);
    java.lang.String var8 = "";
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.lang.Object[] var10 = var6.toArray(var9);
    java.lang.Object[] var11 = var3.toArray(var9);
    boolean var12 = var0.add((java.lang.Object)var9);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test98");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.Collections.shuffle((java2.util2.List)var2);
    java.lang.Object[] var5 = var2.toArray();
    java.lang.Integer var6 = new java.lang.Integer(1);
    java2.util2.LinkedList var7 = new java2.util2.LinkedList();
    java2.util2.LinkedList var8 = new java2.util2.LinkedList((java2.util2.Collection)var7);
    java2.util2.LinkedList var9 = new java2.util2.LinkedList();
    int var10 = java2.util2.Collections.indexOfSubList((java2.util2.List)var8, (java2.util2.List)var9);
    java2.util2.LinkedList var11 = new java2.util2.LinkedList();
    java2.util2.LinkedList var12 = new java2.util2.LinkedList((java2.util2.Collection)var11);
    java2.util2.LinkedList var13 = new java2.util2.LinkedList();
    int var14 = java2.util2.Collections.indexOfSubList((java2.util2.List)var12, (java2.util2.List)var13);
    java2.util2.LinkedList var15 = new java2.util2.LinkedList();
    java2.util2.LinkedList var16 = new java2.util2.LinkedList((java2.util2.Collection)var15);
    java2.util2.Collections.copy((java2.util2.List)var12, (java2.util2.List)var16);
    java2.util2.Collections.copy((java2.util2.List)var8, (java2.util2.List)var12);
    java2.util2.LinkedList var19 = new java2.util2.LinkedList();
    java2.util2.LinkedList var20 = new java2.util2.LinkedList((java2.util2.Collection)var19);
    java2.util2.Iterator var21 = var20.iterator();
    java2.util2.Collections.sort((java2.util2.List)var20);
    java2.util2.Map var23 = java2.util2.Collections.singletonMap((java.lang.Object)var12, (java.lang.Object)var20);
    java2.util2.Map var24 = java2.util2.Collections.synchronizedMap(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((int)var6, (java.lang.Object)var23);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test99");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    int var2 = var1.size();
    java2.util2.LinkedList var3 = new java2.util2.LinkedList();
    java2.util2.LinkedList var4 = new java2.util2.LinkedList((java2.util2.Collection)var3);
    java2.util2.LinkedList var5 = new java2.util2.LinkedList();
    int var6 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var5);
    java.lang.Byte var7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var7);
    boolean var9 = var1.containsAll((java2.util2.Collection)var5);
    java2.util2.Collections.sort((java2.util2.List)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nNaive0.test100");


    java2.util2.LinkedList var0 = new java2.util2.LinkedList();
    java2.util2.LinkedList var1 = new java2.util2.LinkedList((java2.util2.Collection)var0);
    java2.util2.LinkedList var2 = new java2.util2.LinkedList();
    int var3 = java2.util2.Collections.indexOfSubList((java2.util2.List)var1, (java2.util2.List)var2);
    java2.util2.LinkedList var4 = new java2.util2.LinkedList();
    java2.util2.LinkedList var5 = new java2.util2.LinkedList((java2.util2.Collection)var4);
    java2.util2.LinkedList var6 = new java2.util2.LinkedList();
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var5, (java2.util2.List)var6);
    java2.util2.LinkedList var8 = new java2.util2.LinkedList();
    java2.util2.LinkedList var9 = new java2.util2.LinkedList((java2.util2.Collection)var8);
    java2.util2.Collections.copy((java2.util2.List)var5, (java2.util2.List)var9);
    java.lang.Integer var11 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)var9, (int)var11);
    int var13 = java2.util2.Collections.indexOfSubList((java2.util2.List)var2, (java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

}
