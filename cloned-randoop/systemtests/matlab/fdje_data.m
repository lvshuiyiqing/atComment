fdje.s = [ 0 12102 14348 29770 37994 57363 73865 83700 81650 92387 83891 91849 80445 85249 74423 76008 67787 68643 62057 61728 57044 55771 52513 50624 47808 46105 44122 42925 41621 40482 38872 37448 36226 35189 34480 33292 32287 31255 30795 30139 29565 29409 28841 28647 28291 27802 27621 27520 27394 53082 ];
fdje.gt = [ 0 11076699588 7788208342 17257194837 7413968451 10860244528 12174291014 25020399236 15406678764 11920990027 14811672321 12943826009 13363694939 11075535035 10404773455 10397269299 14710179569 9259057808 9114197975 9802148591 9749202085 10050783911 9079382307 7573142057 6758094597 7900614017 7664009732 9188135023 6426509056 6186164300 6077519205 8658499529 6899897355 5889481769 7800819838 6112032098 6284789755 5416239079 5432868012 6111862368 5581683845 6598281548 6159295194 6754179999 6205541673 5282218064 7250395614 5663206522 8467986334 11219824136 ];
fdje.et = [ 0 51055356776 61873788638 175685342145 169974130066 207862313528 182975839443 281733224471 280928801788 258922821355 327789040045 297290098166 330936892275 324636802392 313008150150 380021621106 397761526823 412424131882 386578945569 349138711453 336786650136 383205880868 389865243565 434772564520 374074454873 369358711695 322327567059 382323960948 393555036739 353100113004 373706105359 378358020731 329243069174 379447474732 327855199835 330710037780 316769152677 317542039770 286776019455 351876327150 358833487460 312535822907 290212748194 330723283147 260884641301 337430248651 335957978727 298292650838 362153233857 631257089561 ];
fdje.n = { 'StatementThrowsNPE/org.apache.commons.jelly.TagSupport.getBody()' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.MuteTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.JellyTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TextScript.trimWhitespace()' 'StatementThrowsNPE/org.apache.commons.jelly.expression.xpath.XPathExpression.getVariableValue(java.lang.String,java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.xpath.XPathExpression.evaluate(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.TagSupport.invokeBody(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.DynamicTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.ExpressionScript.run(org.apache.commons.jelly.JellyContext,org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.StaticTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ScopeTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ParseTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.UseListTag.addItem(java.lang.Object)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ArgTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ChooseTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.CatchTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ThreadTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.ExpressionSupport.evaluateAsBoolean(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ForEachTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TextScript.trimStartWhitespace()' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.RemoveTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.SwitchTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.ExpressionSupport.evaluateAsString(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.InvokeTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.FileTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.BreakTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.UseBeanTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.IncludeTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ImportTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.WhitespaceTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.ExpressionSupport.evaluateRecurse(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.endDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.impl.Embedded.execute()' 'StatementThrowsNPE/org.apache.commons.jelly.impl.StaticTagScript.run(org.apache.commons.jelly.JellyContext,org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.SetTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TagScript.getTag(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.startPrefixMapping(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.IfTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.writeCDATA(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.endElement(java.lang.String,java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.write(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.characters([C,int,int)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.ExpressionSupport.evaluateAsIterator(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.NewTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.InvokeStaticTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TextScript.trimEndWhitespace()' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.processingInstruction(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.startElement(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.ignorableWhitespace([C,int,int)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.skippedEntity(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.endPrefixMapping(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TextScript.run(org.apache.commons.jelly.JellyContext,org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.WhileTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.objectData(java.lang.Object)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.ScriptBlock.run(org.apache.commons.jelly.JellyContext,org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.endElement(java.lang.String,java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.ExprTag.doTag(org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.skippedEntity(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.endElement(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.impl.CompositeTextScriptBlock.trimWhitespace()' 'StatementThrowsNPE/org.apache.commons.jelly.XMLOutput.startDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.impl.ScriptBlock.trimWhitespace()' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.endDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.impl.TagScript.run(org.apache.commons.jelly.JellyContext,org.apache.commons.jelly.XMLOutput)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.endDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.characters([C,int,int)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.ignorableWhitespace([C,int,int)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.endPrefixMapping(java.lang.String)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.characters([C,int,int)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.startDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.parser.DefaultNamespaceFilter.startPrefixMapping(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.util.TagUtils.trimScript(org.apache.commons.jelly.Script)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.startPrefixMapping(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.util.SafeContentHandler.processingInstruction(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.CompositeExpression.evaluate(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace([C,int,int)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.startDocument()' 'StatementThrowsNPE/org.apache.commons.jelly.expression.CompositeExpression.evaluateAsString(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.expression.CompositeExpression.evaluateAsIterator(org.apache.commons.jelly.JellyContext)' 'StatementThrowsNPE/org.apache.commons.jelly.parser.DefaultNamespaceFilter.endElement(java.lang.String,java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.processingInstruction(java.lang.String,java.lang.String)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.skippedEntity(java.lang.String)' 'StatementThrowsNPE/org.xml.sax.helpers.XMLFilterImpl.parse(java.lang.String)' 'StatementThrowsNPE/org.apache.commons.jelly.tags.core.CaseTag.doTag(org.apache.commons.jelly.XMLOutput)' };
fdje.f = [ 0 0 312 103 298 252 397 325 465 350 444 288 348 287 287 238 243 191 179 119 134 99 124 98 83 89 74 94 67 61 60 56 48 47 61 54 50 53 49 42 42 46 37 37 36 46 42 41 42 65 ; 0 0 0 29 59 96 134 136 190 200 228 237 244 246 222 249 242 247 239 227 203 197 177 176 162 181 159 144 158 146 134 134 139 129 151 128 113 98 119 115 115 115 105 113 107 99 106 105 93 199 ; 0 0 0 30 65 90 147 158 208 173 228 231 228 213 227 219 219 206 219 208 189 170 170 158 165 163 154 129 155 130 121 132 126 122 114 106 125 113 107 86 113 102 92 93 107 88 99 95 83 182 ; 0 0 95 73 79 54 50 28 24 12 15 8 13 3 8 6 6 7 3 7 4 3 9 8 5 7 6 4 4 6 5 3 4 5 12 9 5 2 2 7 10 7 8 5 0 3 6 1 4 10 ; 0 0 0 0 0 164 36 47 57 71 96 73 94 84 105 107 111 105 137 118 125 86 110 111 93 132 110 102 79 79 99 93 92 81 92 103 76 65 81 73 67 83 81 110 97 94 90 85 88 155 ; 0 0 0 0 1 4 6 9 13 10 11 19 5 21 19 19 24 25 22 26 22 33 32 25 39 35 33 38 40 48 43 41 37 61 60 56 47 57 59 62 59 60 75 45 57 77 73 70 61 158 ; 0 0 0 15 22 41 41 53 52 67 71 84 90 114 126 122 129 132 152 149 148 169 167 165 137 160 155 144 160 162 150 149 160 138 152 145 137 130 158 126 145 118 140 113 115 115 126 108 132 242 ; 0 0 0 13 18 21 35 32 41 64 60 79 89 103 82 102 108 127 131 129 131 147 148 125 147 143 131 139 129 157 143 145 153 139 148 140 158 151 162 121 127 142 123 157 124 152 120 144 142 249 ; 0 0 0 0 0 0 1 0 3 4 2 2 6 10 8 7 9 8 11 13 10 12 10 12 14 13 16 19 16 18 17 19 29 29 33 28 30 36 40 39 33 41 36 39 34 47 40 41 47 113 ; 0 0 0 4 9 12 25 32 39 55 66 98 120 129 106 127 145 190 171 153 158 173 167 185 159 168 169 158 178 178 182 157 141 142 133 129 134 124 137 123 121 127 134 111 107 94 113 117 101 209 ; 0 0 0 40 71 107 122 162 185 213 205 216 223 245 199 228 215 243 227 207 240 201 150 151 159 157 142 142 119 132 133 138 122 112 131 119 114 108 103 101 104 99 90 123 115 114 95 103 101 182 ; 0 0 0 5 11 18 26 41 46 48 65 75 88 94 72 101 80 88 79 97 99 95 96 84 93 72 89 71 88 79 86 75 61 80 78 84 79 72 77 76 85 68 85 67 80 58 57 63 57 127 ; 0 0 84 70 178 157 213 210 229 235 241 217 196 206 182 155 177 121 143 153 139 126 142 121 119 133 117 116 96 97 83 95 85 78 75 85 93 81 81 86 74 70 61 58 70 54 54 64 45 131 ; 0 0 0 8 25 29 44 42 43 67 83 78 119 90 110 128 137 137 166 180 160 175 171 170 162 177 171 171 158 172 182 143 158 156 142 138 149 118 148 151 115 123 119 132 135 106 117 120 117 212 ; 0 0 0 35 57 104 134 166 164 192 195 226 217 221 226 203 186 182 234 207 153 173 183 183 145 147 145 134 149 130 126 113 124 113 112 112 104 119 85 87 102 82 84 91 120 84 86 96 87 154 ; 0 0 0 0 0 6 6 34 30 67 73 72 95 110 107 104 110 107 123 118 107 110 129 147 109 135 109 118 108 89 93 114 83 96 70 90 95 93 90 86 76 70 95 99 70 66 58 63 62 127 ; 0 0 0 10 15 33 41 60 74 72 107 117 124 142 139 172 170 190 184 174 163 170 183 176 147 169 171 163 128 114 120 137 139 129 103 130 130 115 130 121 128 123 108 113 105 113 117 129 100 215 ; 0 0 0 0 0 1 3 2 0 4 0 4 1 9 1 3 5 3 2 5 6 8 7 14 11 8 7 7 3 8 14 9 11 11 12 9 9 8 13 12 7 12 9 10 8 7 12 17 19 34 ; 0 0 0 0 0 7 3 8 5 12 26 21 23 40 40 57 51 53 70 57 80 76 69 98 94 97 85 90 104 98 101 104 99 99 97 96 97 105 104 81 92 74 82 84 92 82 86 100 96 161 ; 0 0 99 94 62 51 46 28 17 14 11 10 8 7 12 6 11 7 7 10 8 8 9 8 3 6 5 7 11 12 4 3 4 1 6 10 10 5 3 8 5 9 7 4 3 3 4 3 7 8 ; 0 0 0 0 0 2 1 4 9 8 16 22 27 33 42 45 40 61 75 77 61 81 82 72 93 78 96 76 73 102 78 80 104 102 96 91 100 95 92 106 90 119 114 120 120 113 107 114 107 207 ; 0 0 0 0 0 2 5 5 6 13 30 22 37 33 37 36 47 59 66 64 87 78 93 85 94 79 100 107 95 109 79 83 101 103 110 90 106 94 104 128 120 108 106 138 105 121 133 104 106 256 ; 0 0 0 0 2 3 1 1 4 6 5 2 1 4 0 6 3 6 3 7 8 8 8 5 6 1 10 7 6 12 10 8 5 4 11 14 6 16 17 7 13 9 16 13 18 15 14 18 14 43 ; 0 0 0 0 0 0 2 2 4 5 4 6 15 10 18 21 30 19 45 39 25 45 37 54 54 57 54 69 51 54 64 59 65 61 62 50 65 55 57 73 63 65 65 75 53 63 62 57 52 96 ; 0 0 0 0 0 2 1 5 5 10 16 19 20 30 45 38 46 52 74 58 59 63 78 61 65 78 73 58 70 61 70 71 59 51 58 73 65 63 48 44 59 42 42 53 43 46 39 43 37 66 ; 0 0 0 0 0 2 10 14 34 22 24 42 32 34 60 55 56 69 61 67 90 85 78 87 87 93 106 98 101 83 83 92 110 97 111 85 108 97 90 126 97 92 91 88 110 81 93 89 98 178 ; 0 0 0 7 14 16 17 34 46 34 47 56 82 74 83 84 89 97 103 98 89 97 97 100 120 97 96 83 96 95 98 83 69 89 87 72 85 75 70 92 65 72 63 51 67 69 69 63 63 133 ; 0 0 0 0 0 3 3 4 7 15 24 24 39 33 54 57 55 80 77 83 90 101 92 94 108 114 118 122 110 101 100 110 94 93 96 83 78 60 92 79 64 63 76 79 77 74 77 66 67 111 ; 0 0 0 0 0 5 8 16 17 27 51 63 68 88 92 115 127 148 149 143 155 172 178 165 155 164 158 182 172 179 160 150 156 135 144 150 136 142 123 126 118 97 120 109 109 95 95 103 107 187 ; 0 0 0 23 61 90 129 143 193 219 196 222 230 227 241 220 234 229 224 210 206 206 209 179 143 159 134 159 132 148 131 161 133 125 137 123 113 112 128 111 109 109 96 98 119 108 97 90 81 186 ; 0 0 0 0 0 1 1 4 2 1 4 2 1 4 3 5 8 3 2 8 8 2 6 4 6 11 9 8 6 12 13 10 11 16 12 10 12 12 15 13 8 16 8 11 9 16 14 19 8 32 ; 0 0 40 58 53 73 88 77 93 89 91 91 75 80 82 72 81 65 64 66 56 67 66 54 55 48 50 47 59 48 42 28 39 34 33 30 39 30 38 27 30 27 26 29 41 25 29 25 25 59 ; 0 0 106 76 93 149 112 105 95 98 85 87 85 73 92 64 69 57 56 42 48 59 58 44 52 34 39 50 42 40 36 61 49 46 40 40 46 26 36 32 21 32 34 39 27 29 37 28 30 60 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 4 2 2 2 7 5 4 5 9 5 10 5 2 8 10 14 8 9 10 11 19 16 14 15 12 15 21 21 24 25 27 21 20 25 62 ; 0 0 0 0 0 0 1 3 2 2 6 10 10 11 12 15 21 27 23 21 26 29 32 25 21 22 31 27 28 36 19 26 29 33 34 28 25 27 27 22 26 22 27 30 21 24 18 27 17 37 ; 0 0 0 0 0 0 1 1 2 1 1 1 6 10 1 14 2 7 4 4 9 8 9 8 17 11 17 15 9 18 11 17 17 13 15 26 13 21 21 27 25 28 27 30 30 28 31 30 28 59 ; 0 0 0 1 44 59 67 80 81 106 99 92 82 86 91 75 88 81 74 88 77 53 58 54 54 58 55 50 54 61 45 47 37 32 44 42 25 28 29 29 34 37 29 26 36 26 26 23 30 41 ; 0 0 0 0 0 1 1 1 0 3 4 3 2 14 4 9 6 10 6 7 12 15 9 7 5 10 12 16 13 11 6 13 12 3 8 9 9 11 12 10 10 7 6 8 7 7 9 9 5 20 ; 0 0 0 35 52 60 71 75 92 98 96 82 103 95 66 78 82 78 75 73 75 60 53 65 44 49 47 54 39 45 38 36 43 42 40 49 28 36 36 32 31 38 34 41 26 32 23 27 27 38 ; 0 0 0 1 3 44 59 97 65 101 101 95 97 95 79 92 67 95 75 64 70 80 69 48 58 52 53 46 61 45 43 30 38 31 42 26 40 31 27 19 21 34 30 39 33 30 30 24 30 51 ; 0 0 0 41 60 69 78 94 88 120 89 89 104 82 70 67 74 72 81 87 65 71 61 65 60 55 46 58 54 50 36 34 44 40 41 34 41 40 25 29 34 38 35 25 27 25 38 29 40 51 ; 0 0 0 0 0 12 16 44 56 79 90 77 99 99 94 90 113 117 79 89 69 86 75 73 55 82 71 66 49 59 46 61 58 40 49 39 47 40 44 33 45 43 30 46 36 42 31 35 35 65 ; 0 0 0 0 1 0 0 7 4 4 3 5 2 2 6 7 1 7 4 3 3 6 7 7 6 10 6 9 9 6 14 9 6 6 8 17 16 9 22 15 13 16 15 11 11 12 10 11 11 32 ; 0 0 0 0 0 0 0 1 0 1 6 6 6 9 15 11 22 21 34 35 33 40 33 43 46 43 51 48 47 57 47 57 46 63 52 56 63 54 52 50 46 43 52 31 52 46 38 36 50 91 ; 0 0 0 0 0 1 3 10 11 6 11 19 28 24 33 44 54 47 44 56 70 64 73 76 59 70 90 78 99 95 88 95 80 80 100 97 73 74 73 78 85 68 93 81 85 81 76 87 83 159 ; 0 0 75 81 80 41 45 26 13 15 16 11 11 13 7 7 6 6 6 10 1 11 3 9 9 4 5 4 5 4 7 7 5 2 5 8 8 5 2 9 5 8 8 3 5 1 4 3 1 7 ; 0 0 0 1 34 32 81 83 81 76 94 100 104 81 97 72 80 65 68 72 72 53 53 44 53 62 47 47 35 53 35 42 36 40 41 45 30 32 39 40 22 38 31 21 33 29 24 32 17 45 ; 0 0 0 34 56 58 77 86 80 106 87 88 93 76 93 63 68 65 69 54 59 52 66 39 50 53 44 45 44 48 28 42 30 40 35 32 32 41 33 32 32 24 24 19 26 28 20 25 28 55 ; 0 0 0 0 0 10 19 39 50 70 85 99 100 106 106 86 89 90 86 98 84 69 76 96 69 54 46 53 53 46 55 54 32 44 34 45 35 45 50 39 48 27 28 29 32 39 32 34 27 63 ; 0 0 0 29 52 71 76 93 89 96 94 88 85 86 60 78 65 58 73 73 73 67 71 52 37 50 51 39 42 45 40 41 35 45 34 34 29 33 27 29 33 36 42 29 29 35 27 33 35 42 ; 0 0 0 38 59 72 89 81 88 84 90 103 83 81 98 70 83 81 67 74 73 54 58 53 54 60 49 47 52 45 40 36 35 32 45 29 44 34 38 32 17 26 28 26 40 35 26 17 28 50 ; 0 0 0 0 0 0 0 0 0 0 3 2 2 2 6 0 3 4 11 7 10 17 10 4 11 12 15 13 16 16 20 17 19 16 26 24 20 30 32 34 28 33 30 47 43 30 35 41 34 93 ; 0 0 0 0 0 1 0 2 0 1 2 3 2 6 5 6 4 8 6 4 6 7 3 9 15 4 8 10 11 12 9 14 11 11 12 9 13 12 9 6 9 6 3 13 10 10 8 3 17 18 ; 0 0 24 30 34 34 45 54 69 57 68 55 62 56 43 49 58 63 59 48 72 53 49 51 45 49 49 51 52 55 45 48 42 37 39 43 48 39 34 35 44 37 37 44 34 32 46 37 26 83 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 2 1 0 2 2 0 1 2 2 2 3 3 4 3 0 2 1 6 5 ; 0 0 0 0 1 1 37 41 52 50 31 19 39 52 37 34 14 18 19 8 16 15 13 10 10 9 2 9 5 7 3 4 1 4 4 10 7 2 6 0 0 4 5 2 0 1 6 3 0 2 ; 0 0 0 0 0 0 1 2 7 5 4 8 16 13 8 21 18 18 18 24 23 22 25 33 13 34 32 30 29 28 45 27 48 30 28 34 39 33 29 34 37 32 25 26 43 34 44 32 42 82 ; 0 0 0 0 14 28 35 29 25 19 24 35 24 18 12 17 17 8 12 11 11 7 11 9 1 10 4 8 4 8 6 3 2 5 7 6 3 3 1 5 2 1 3 2 4 5 1 1 1 5 ; 0 0 0 32 58 77 72 99 110 107 105 89 112 92 83 77 71 69 80 81 62 67 63 48 46 43 38 47 52 25 51 35 44 30 38 39 31 34 43 31 29 25 22 27 19 33 31 22 28 45 ; 0 0 0 0 0 2 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 ; 0 0 33 54 84 64 99 93 76 92 87 98 72 89 72 80 83 89 72 85 67 76 60 47 34 46 40 62 45 46 49 35 42 45 31 36 36 43 25 24 20 28 33 43 31 37 34 34 25 63 ; 0 0 0 0 0 0 2 0 1 1 2 1 2 0 1 1 0 1 1 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 1 0 2 1 0 0 0 1 0 1 0 0 0 0 0 ; 0 0 0 16 15 21 20 19 17 23 21 21 21 11 16 16 8 7 11 9 6 8 14 6 2 6 7 0 5 4 2 3 2 4 2 2 4 3 3 2 0 0 2 1 4 2 1 2 0 6 ; 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 1 3 0 1 1 4 2 5 1 4 3 0 3 3 2 5 2 2 7 7 2 5 4 5 8 10 6 10 9 14 4 8 11 18 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 2 3 2 2 0 1 4 2 1 1 0 2 3 2 4 2 1 2 1 2 2 1 1 2 3 2 7 3 1 0 2 2 2 7 ; 0 0 0 0 0 0 8 12 24 44 54 40 61 40 62 57 53 45 58 42 31 36 35 39 35 30 18 29 25 24 24 19 16 9 13 12 17 10 12 8 2 4 9 3 6 2 3 3 2 11 ; 0 0 0 0 0 0 9 21 35 29 37 49 55 31 33 33 33 28 23 21 17 24 13 14 9 3 7 8 6 3 5 8 5 1 6 3 6 6 3 2 5 3 4 3 2 2 2 1 0 6 ; 0 0 0 0 20 30 34 34 22 16 29 26 28 24 18 19 17 10 15 9 13 12 8 10 1 2 4 3 3 8 1 1 5 8 5 7 4 4 0 2 0 2 0 1 3 0 0 3 1 4 ; 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 2 0 1 3 1 2 7 7 7 5 10 3 7 5 7 8 5 2 2 9 4 6 6 4 3 5 8 4 10 4 10 6 7 11 ; 0 0 0 12 19 31 30 20 10 28 21 15 19 9 11 10 4 16 12 8 4 7 6 1 2 5 6 7 5 4 2 2 5 4 3 5 6 3 2 3 3 1 0 0 6 2 3 1 2 4 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 4 1 3 2 3 1 1 2 1 1 1 0 1 2 4 4 1 1 1 2 3 1 2 2 0 3 2 3 0 1 0 3 ; 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 4 4 4 0 1 4 2 2 1 3 4 2 0 2 2 2 3 0 2 2 1 1 2 3 3 7 1 0 5 2 2 2 3 5 ; 0 0 20 17 12 6 4 2 4 4 2 2 3 0 1 0 1 2 1 1 0 1 2 2 1 0 1 0 0 0 0 1 2 1 2 1 1 1 0 4 0 0 1 0 0 2 0 2 2 1 ; 0 0 0 0 0 28 32 36 36 37 18 45 40 24 27 19 10 25 7 16 10 5 5 9 11 2 5 10 4 4 2 1 3 2 4 6 2 3 1 1 5 1 2 2 3 4 2 3 3 3 ; 0 0 0 0 1 29 34 45 39 30 14 41 38 29 26 19 16 13 10 10 17 13 11 4 8 2 6 4 7 5 4 2 3 6 9 8 10 1 4 5 1 1 4 1 1 0 1 1 0 2 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 1 0 2 1 0 3 0 0 0 2 0 2 2 2 1 2 1 2 2 1 4 0 6 2 6 ; 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 2 0 0 5 1 1 5 4 4 5 3 1 3 1 4 1 2 3 3 1 2 0 3 2 7 4 6 7 5 5 3 5 ; 0 0 0 0 0 0 0 0 1 0 0 0 1 0 3 0 3 5 2 0 2 3 1 2 3 1 3 0 3 2 2 1 3 2 4 0 2 2 1 1 5 6 3 2 2 1 2 1 0 4 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 2 1 1 0 0 0 0 2 0 0 2 0 0 1 1 0 0 1 1 3 3 1 1 1 1 2 4 3 4 3 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 2 0 0 0 0 0 1 3 0 2 1 0 0 0 2 1 1 0 0 0 2 2 1 3 1 0 2 1 4 0 0 3 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 0 2 2 4 1 2 2 1 0 0 0 0 4 2 2 1 3 1 2 0 1 1 1 6 1 3 1 3 2 1 3 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 1 1 3 0 4 1 2 4 1 2 0 0 1 2 4 1 0 1 1 1 0 0 2 1 0 6 3 2 3 2 1 2 6 ; 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 0 2 0 2 3 3 0 4 1 3 2 0 5 1 1 3 1 1 1 3 1 0 0 3 3 3 5 3 1 2 1 1 2 2 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 1 0 0 3 4 1 1 2 1 2 1 1 2 0 2 0 0 1 1 1 1 0 0 1 4 0 2 0 2 0 0 1 1 ; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 ; ];