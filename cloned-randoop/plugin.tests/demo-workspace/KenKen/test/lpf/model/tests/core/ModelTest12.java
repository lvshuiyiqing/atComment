package lpf.model.tests.core;

import junit.framework.*;

public class ModelTest12 extends TestCase {


  public void test1() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    boolean var17 = var4.isOccupied();
    var4.clearMarks();
    lpf.model.core.Value var19 = var4.getDigit();
    boolean var20 = var4.isOccupied();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.lang.Object[] var26 = var22.toArray(var25);
    var22.clear();
    java.util.Iterator var28 = var22.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    int var42 = var38.size();
    boolean var43 = var22.contains((java.lang.Object)var38);
    boolean var44 = var4.equals((java.lang.Object)var38);
    lpf.model.core.Value var45 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test2() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.Cell[][] var8 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var11 = new lpf.model.core.CellsIterator(var8, 10, 0);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    int var21 = var13.size();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.lang.Object[] var41 = var24.toArray(var40);
    lpf.model.kenken.Cage var42 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var24);
    lpf.model.core.CellsIterator var43 = new lpf.model.core.CellsIterator(var8, var21, (-1));
    boolean var44 = var1.contains((java.lang.Object)var43);
    lpf.model.core.Cell[][] var46 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var49 = new lpf.model.core.CellsIterator(var46, 10, 0);
    boolean var50 = var49.hasNext();
    boolean var51 = var49.hasNext();
    lpf.model.core.Cell var52 = var49.next();
    boolean var53 = var49.hasNext();
    boolean var54 = var49.hasNext();
    lpf.model.core.Cell var55 = var49.next();
    lpf.model.core.Cell var56 = var49.next();
    lpf.model.core.Cell var57 = var49.next();
    lpf.model.core.Cell var58 = var49.next();
    boolean var59 = var49.hasNext();
    boolean var60 = var1.contains((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test3() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var2 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    java.lang.Object[] var15 = new java.lang.Object[] { var13};
    java.lang.Object[] var16 = var9.toArray(var15);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    boolean var20 = var9.retainAll((java.util.Collection)var17);
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.lang.Object[] var22 = var5.toArray(var21);
    lpf.model.kenken.Cage var23 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var5);
    int var24 = var5.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(var24, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    lpf.model.core.Cell var31 = new lpf.model.core.Cell(var29);
    var31.clearMarks();
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    lpf.model.core.Cell var37 = new lpf.model.core.Cell(var35);
    lpf.model.core.Value var39 = new lpf.model.core.Value('#');
    var37.setDigit(var39);
    var31.addMark(var39);
    lpf.model.core.Value var42 = var31.getDigit();
    var31.clearDigit();
    java.util.Set var44 = var31.getMarks();
    lpf.model.core.Value var45 = var31.getDigit();
    java.util.Set var46 = var31.getMarks();
    var31.clearDigit();
    lpf.model.core.Value var48 = var31.getDigit();
    java.util.Set var49 = var31.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage(' ', var24, (java.util.Collection)var49);
    java.util.Iterator var51 = var50.iterator();
    java.util.Iterator var52 = var50.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test4() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    var14.clear();
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    lpf.model.core.Cell var52 = new lpf.model.core.Cell(var50);
    lpf.model.core.Value var54 = new lpf.model.core.Value('#');
    var52.setDigit(var54);
    var52.clearMarks();
    lpf.model.core.Value var58 = new lpf.model.core.Value('#');
    var52.removeMark(var58);
    boolean var60 = var52.isOccupied();
    var52.clearMarks();
    lpf.model.core.Value var62 = var52.getDigit();
    boolean var63 = var52.isOccupied();
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var66);
    lpf.model.core.Value var70 = new lpf.model.core.Value('#');
    var68.setDigit(var70);
    var68.clearDigit();
    var68.clearDigit();
    var68.clearDigit();
    var68.clearMarks();
    var68.clearMarks();
    var68.clearDigit();
    lpf.model.core.Value var79 = new lpf.model.core.Value(' ');
    var68.setDigit(var79);
    lpf.model.core.Value var81 = var68.getDigit();
    boolean var82 = var52.equals((java.lang.Object)var68);
    boolean var83 = var14.remove((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test5() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    boolean var48 = var24.isEmpty();
    java.lang.Object[] var49 = var24.toArray();
    java.lang.Object[] var50 = var24.toArray();
    java.util.Iterator var51 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test6() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    java.lang.Object[] var42 = var20.toArray();
    java.util.Iterator var43 = var20.iterator();
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var20);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var76 = var73.remove((java.lang.Object)(short)100);
    boolean var77 = var69.retainAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var73);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    java.util.Iterator var80 = var79.iterator();
    boolean var81 = var73.containsAll((java.util.Collection)var79);
    java.util.Iterator var82 = var79.iterator();
    java.lang.Object[] var83 = var79.toArray();
    lpf.model.core.Location var86 = new lpf.model.core.Location(1, '4');
    java.lang.String var87 = var86.toString();
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var86);
    lpf.model.core.Value var89 = var88.getDigit();
    var88.clearDigit();
    lpf.model.core.Value var91 = var88.getDigit();
    boolean var92 = var88.isOccupied();
    java.util.Set var93 = var88.getMarks();
    java.util.Set var94 = var88.getMarks();
    java.util.Set var95 = var88.getMarks();
    boolean var96 = var79.addAll((java.util.Collection)var95);
    var79.clear();
    boolean var98 = var79.isEmpty();
    java.util.Iterator var99 = var79.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(4,1)"+ "'", var87.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test7() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    boolean var38 = var4.isOccupied();
    java.util.Set var39 = var4.getMarks();
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var42);
    lpf.model.core.Value var46 = new lpf.model.core.Value('#');
    var44.setDigit(var46);
    var4.removeMark(var46);
    var4.clearDigit();
    lpf.model.core.Cell[][] var51 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var77 = var56.retainAll((java.util.Collection)var65);
    boolean var79 = var56.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var80 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var56);
    lpf.model.core.CellsIterator var81 = new lpf.model.core.CellsIterator(var51, 100, 0);
    lpf.model.core.Cell var82 = var81.next();
    boolean var83 = var4.equals((java.lang.Object)var81);
    java.util.Set var84 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test8() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var6 = var4.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var8 = new lpf.model.core.Value('#');
    var4.addMark(var8);
    lpf.model.core.Value var11 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var34 = var13.retainAll((java.util.Collection)var22);
    boolean var36 = var13.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var51.toArray(var54);
    var51.clear();
    boolean var57 = var38.contains((java.lang.Object)var51);
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var51);
    lpf.model.core.Value var59 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var60 = new lpf.model.core.Value(' ');
    var4.removeMark(var60);
    lpf.model.core.Value var62 = var4.getDigit();
    lpf.model.core.Value var63 = var4.getDigit();
    lpf.model.core.Value var64 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test9() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    var33.clear();
    int var38 = var33.size();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.util.Iterator var48 = var40.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.lang.Object[] var50 = var49.toArray();
    boolean var51 = var40.add((java.lang.Object)var49);
    boolean var52 = var40.isEmpty();
    boolean var53 = var40.isEmpty();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('#', var38, (java.util.Collection)var40);
    boolean var55 = var54.isAdjacent();
    boolean var56 = var54.isAdjacent();
    boolean var57 = var54.isAdjacent();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    boolean var82 = var61.retainAll((java.util.Collection)var70);
    java.lang.Object[] var83 = var61.toArray();
    java.util.Iterator var84 = var61.iterator();
    lpf.model.kenken.Cage var85 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var61);
    lpf.model.core.Location var87 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Location var90 = new lpf.model.core.Location(1, '4');
    java.lang.String var91 = var90.toString();
    java.lang.String var92 = var90.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var93 = new lpf.model.kenken.InvalidKenKenPuzzleException(var92);
    lpf.model.kenken.InvalidKenKenPuzzleException var94 = new lpf.model.kenken.InvalidKenKenPuzzleException(var92);
    java.lang.String var95 = var94.toString();
    boolean var96 = var87.equals((java.lang.Object)var95);
    boolean var97 = var54.contains(var87);
    java.lang.String var98 = var87.toString();
    lpf.model.core.Cell var99 = new lpf.model.core.Cell(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(4,1)"+ "'", var91.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(4,1)"+ "'", var92.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var95.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "(#,0)"+ "'", var98.equals("(#,0)"));

  }

  public void test10() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    java.lang.Object[] var32 = var8.toArray();
    java.lang.Object[] var33 = var8.toArray();
    boolean var34 = var1.retainAll((java.util.Collection)var8);
    java.lang.Object[] var35 = var8.toArray();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var37.addAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    java.lang.Object[] var72 = var60.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    boolean var87 = var82.contains((java.lang.Object)'#');
    boolean var88 = var60.containsAll((java.util.Collection)var82);
    boolean var89 = var8.containsAll((java.util.Collection)var82);
    var82.clear();
    int var91 = var82.size();
    var82.clear();
    var82.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test11() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var27.toArray(var30);
    var27.clear();
    boolean var33 = var14.contains((java.lang.Object)var27);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    java.lang.Object[] var61 = var34.toArray(var60);
    java.lang.Object[] var62 = var27.toArray(var60);
    java.util.Iterator var63 = var27.iterator();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    java.util.Iterator var65 = var64.iterator();
    var64.clear();
    boolean var67 = var27.retainAll((java.util.Collection)var64);
    boolean var68 = var9.removeAll((java.util.Collection)var64);
    java.lang.Object[] var69 = var9.toArray();
    lpf.model.kenken.InvalidKenKenPuzzleException var70 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var71 = var70.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var72 = new lpf.model.kenken.InvalidKenKenPuzzleException(var71);
    java.lang.String var73 = var72.toString();
    boolean var74 = var9.add((java.lang.Object)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    lpf.model.core.Cell var79 = new lpf.model.core.Cell(var77);
    var79.clearMarks();
    java.util.Set var81 = var79.getMarks();
    lpf.model.core.Value var82 = var79.getDigit();
    var79.clearDigit();
    var79.clearDigit();
    var79.clearDigit();
    var79.clearMarks();
    java.util.Set var87 = var79.getMarks();
    boolean var88 = var9.remove((java.lang.Object)var79);
    java.lang.Object[] var89 = var9.toArray();
    java.util.Iterator var90 = var9.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var71.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var73.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test12() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var25.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    java.lang.Object[] var52 = var25.toArray(var51);
    boolean var53 = var9.removeAll((java.util.Collection)var25);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    lpf.model.core.Cell var58 = new lpf.model.core.Cell(var56);
    var58.clearMarks();
    boolean var61 = var58.equals((java.lang.Object)(short)0);
    boolean var62 = var58.isOccupied();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    boolean var85 = var64.retainAll((java.util.Collection)var73);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var64.addAll((java.util.Collection)var87);
    int var90 = var87.size();
    boolean var91 = var58.equals((java.lang.Object)var87);
    boolean var92 = var9.removeAll((java.util.Collection)var87);
    java.util.Iterator var93 = var9.iterator();
    boolean var94 = var9.isEmpty();
    int var95 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);

  }

  public void test13() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var2 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    java.lang.Object[] var15 = new java.lang.Object[] { var13};
    java.lang.Object[] var16 = var9.toArray(var15);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    boolean var20 = var9.retainAll((java.util.Collection)var17);
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.lang.Object[] var22 = var5.toArray(var21);
    lpf.model.kenken.Cage var23 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var5);
    int var24 = var5.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(var24, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    lpf.model.core.Cell var31 = new lpf.model.core.Cell(var29);
    var31.clearMarks();
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    lpf.model.core.Cell var37 = new lpf.model.core.Cell(var35);
    lpf.model.core.Value var39 = new lpf.model.core.Value('#');
    var37.setDigit(var39);
    var31.addMark(var39);
    lpf.model.core.Value var42 = var31.getDigit();
    var31.clearDigit();
    java.util.Set var44 = var31.getMarks();
    lpf.model.core.Value var45 = var31.getDigit();
    java.util.Set var46 = var31.getMarks();
    var31.clearDigit();
    lpf.model.core.Value var48 = var31.getDigit();
    java.util.Set var49 = var31.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage(' ', var24, (java.util.Collection)var49);
    boolean var51 = var50.isAdjacent();
    boolean var52 = var50.isAdjacent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test14() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var77 = var39.addAll((java.util.Collection)var64);
    int var78 = var64.size();
    java.lang.Object[] var79 = var64.toArray();
    boolean var80 = var64.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test15() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var43);
    java.util.Set var45 = var44.getMarks();
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var48);
    lpf.model.core.Value var52 = new lpf.model.core.Value('#');
    var50.setDigit(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var55.remove((java.lang.Object)var67);
    boolean var71 = var52.equals((java.lang.Object)var55);
    var44.removeMark(var52);
    boolean var73 = var44.isOccupied();
    java.util.Set var74 = var44.getMarks();
    var44.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test16() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    var9.clear();
    int var15 = var9.size();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var40 = var19.retainAll((java.util.Collection)var28);
    boolean var42 = var19.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var43 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var19);
    lpf.model.core.Location var44 = new lpf.model.core.Location(var15, ' ');
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    int var48 = var45.size();
    int var49 = var45.size();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var66 = var61.contains((java.lang.Object)'#');
    lpf.model.core.Location var67 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var68 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var69 = new lpf.model.core.Value('#');
    lpf.model.core.Value var70 = new lpf.model.core.Value('#');
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    lpf.model.core.Value var72 = new lpf.model.core.Value('#');
    lpf.model.core.Location var73 = new lpf.model.core.Location(var49, '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(var15, '#');
    lpf.model.core.Value var75 = new lpf.model.core.Value('#');
    lpf.model.core.Value var76 = new lpf.model.core.Value('#');
    lpf.model.core.Value var77 = new lpf.model.core.Value('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test17() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.Value var18 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    java.util.Set var57 = var55.getMarks();
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var57);
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, '#');
    boolean var61 = var13.add((java.lang.Object)var60);
    java.lang.String var62 = var60.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var63 = new lpf.model.kenken.InvalidKenKenPuzzleException(var62);
    java.lang.String var64 = var63.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var65 = new lpf.model.kenken.InvalidKenKenPuzzleException(var64);
    lpf.model.kenken.InvalidKenKenPuzzleException var66 = new lpf.model.kenken.InvalidKenKenPuzzleException(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(#,0)"+ "'", var62.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"+ "'", var64.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"));

  }

  public void test18() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Value var21 = new lpf.model.core.Value('a');
    lpf.model.core.Value var22 = new lpf.model.core.Value('a');
    lpf.model.core.Value var23 = new lpf.model.core.Value('a');
    lpf.model.core.Value var24 = new lpf.model.core.Value('a');
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    boolean var46 = var35.retainAll((java.util.Collection)var43);
    boolean var47 = var26.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    boolean var57 = var26.addAll((java.util.Collection)var49);
    var26.clear();
    var26.clear();
    java.util.Iterator var60 = var26.iterator();
    int var61 = var26.size();
    int var62 = var26.size();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.lang.Object[] var80 = var63.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var63.containsAll((java.util.Collection)var81);
    java.lang.Object[] var85 = var63.toArray();
    var63.clear();
    java.lang.Object[] var87 = var63.toArray();
    java.lang.Object[] var88 = var63.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('a', var62, (java.util.Collection)var63);
    java.util.Iterator var90 = var89.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var91 = var89.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test19() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    java.util.Iterator var9 = var1.iterator();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    java.lang.Object[] var11 = var10.toArray();
    boolean var12 = var1.add((java.lang.Object)var10);
    lpf.model.core.Location var15 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var20 = var17.remove((java.lang.Object)(short)100);
    boolean var21 = var15.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var22 = new lpf.model.core.Cell(var15);
    var22.clearMarks();
    var22.clearMarks();
    java.util.Set var25 = var22.getMarks();
    java.util.Set var26 = var22.getMarks();
    java.util.Set var27 = var22.getMarks();
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    lpf.model.core.Cell var32 = new lpf.model.core.Cell(var30);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    boolean var65 = var34.addAll((java.util.Collection)var57);
    var34.clear();
    boolean var67 = var32.equals((java.lang.Object)var34);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    boolean var82 = var77.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    lpf.model.core.Location var88 = new lpf.model.core.Location(1, '4');
    java.lang.String var89 = var88.toString();
    java.lang.Object[] var90 = new java.lang.Object[] { var88};
    java.lang.Object[] var91 = var84.toArray(var90);
    boolean var92 = var77.remove((java.lang.Object)var84);
    boolean var93 = var34.retainAll((java.util.Collection)var77);
    int var94 = var77.size();
    boolean var95 = var22.equals((java.lang.Object)var77);
    java.lang.Object[] var96 = var77.toArray();
    java.lang.Object[] var97 = var1.toArray(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(4,1)"+ "'", var89.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test20() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    java.lang.Object[] var39 = var14.toArray();
    boolean var40 = var14.isEmpty();
    boolean var41 = var1.removeAll((java.util.Collection)var14);
    java.util.Iterator var42 = var1.iterator();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    java.lang.Object[] var56 = var52.toArray();
    java.lang.Object[] var57 = var52.toArray();
    var52.clear();
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    lpf.model.core.Cell var63 = new lpf.model.core.Cell(var61);
    var63.clearMarks();
    java.util.Set var65 = var63.getMarks();
    boolean var66 = var52.remove((java.lang.Object)var65);
    int var67 = var52.size();
    int var68 = var52.size();
    var52.clear();
    java.util.Iterator var70 = var52.iterator();
    boolean var71 = var1.addAll((java.util.Collection)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test21() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    boolean var19 = var4.isOccupied();
    lpf.model.core.Value var20 = var4.getDigit();
    boolean var21 = var4.isOccupied();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.lang.Object[] var41 = var24.toArray(var40);
    lpf.model.kenken.Cage var42 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var24);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var49.retainAll((java.util.Collection)var57);
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.lang.Object[] var62 = var45.toArray(var61);
    lpf.model.kenken.Cage var63 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var45);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    boolean var68 = var63.contains(var66);
    boolean var69 = var42.contains(var66);
    java.util.Iterator var70 = var42.iterator();
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.String var75 = var73.toString();
    java.lang.String var76 = var73.toString();
    boolean var77 = var42.contains(var73);
    boolean var78 = var4.equals((java.lang.Object)var73);
    var4.clearMarks();
    lpf.model.core.Value var80 = var4.getDigit();
    lpf.model.core.Value var81 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test22() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    lpf.model.core.Value var10 = var4.getDigit();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var27 = var22.contains((java.lang.Object)'#');
    lpf.model.core.Location var28 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var30 = new lpf.model.core.Value('#');
    var4.setDigit(var30);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test23() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.retainAll((java.util.Collection)var21);
    java.util.Iterator var25 = var21.iterator();
    boolean var26 = var21.isEmpty();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    java.util.Iterator var28 = var27.iterator();
    boolean var29 = var21.contains((java.lang.Object)var28);
    boolean var30 = var4.equals((java.lang.Object)var21);
    var21.clear();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    int var45 = var41.size();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var47.remove((java.lang.Object)var59);
    boolean var63 = var41.containsAll((java.util.Collection)var47);
    boolean var64 = var21.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    java.lang.Object[] var81 = new java.lang.Object[] { var80};
    java.lang.Object[] var82 = var65.toArray(var81);
    boolean var83 = var21.contains((java.lang.Object)var81);
    boolean var84 = var21.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test24() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.kenken.InvalidKenKenPuzzleException var3 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var6 = new lpf.model.kenken.InvalidKenKenPuzzleException(var5);
    boolean var7 = var0.add((java.lang.Object)var6);
    java.lang.String var8 = var6.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var9 = new lpf.model.kenken.InvalidKenKenPuzzleException(var8);
    java.lang.String var10 = var9.toString();
    java.lang.String var11 = var9.toString();
    java.lang.String var12 = var9.toString();
    java.lang.String var13 = var9.toString();
    java.lang.String var14 = var9.toString();
    java.lang.String var15 = var9.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var16 = new lpf.model.kenken.InvalidKenKenPuzzleException(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var4.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var5.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var8.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var10.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var11.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var12.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var13.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var14.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var15.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));

  }

  public void test25() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    var4.clearMarks();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var27.toArray(var30);
    var27.clear();
    boolean var33 = var14.contains((java.lang.Object)var27);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    java.lang.Object[] var61 = var34.toArray(var60);
    java.lang.Object[] var62 = var27.toArray(var60);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.lang.Object[] var68 = var64.toArray(var67);
    var64.clear();
    boolean var70 = var27.removeAll((java.util.Collection)var64);
    java.util.Iterator var71 = var27.iterator();
    lpf.model.core.Value var73 = new lpf.model.core.Value('#');
    boolean var74 = var27.contains((java.lang.Object)var73);
    var4.removeMark(var73);
    var4.clearMarks();
    lpf.model.core.Value var77 = var4.getDigit();
    java.util.Set var78 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test26() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    lpf.model.core.Cell var28 = new lpf.model.core.Cell(var26);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    boolean var61 = var30.addAll((java.util.Collection)var53);
    var30.clear();
    boolean var63 = var28.equals((java.lang.Object)var30);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    boolean var88 = var73.remove((java.lang.Object)var80);
    boolean var89 = var30.retainAll((java.util.Collection)var73);
    boolean var90 = var30.isEmpty();
    int var91 = var30.size();
    boolean var92 = var30.isEmpty();
    java.util.Iterator var93 = var30.iterator();
    boolean var94 = var1.removeAll((java.util.Collection)var30);
    java.util.Iterator var95 = var1.iterator();
    java.lang.Object[] var96 = var1.toArray();
    java.util.Iterator var97 = var1.iterator();
    int var98 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test27() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    lpf.model.core.Location var41 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    java.lang.String var43 = var42.toString();
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var42);
    var44.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(#,100)"+ "'", var43.equals("(#,100)"));

  }

  public void test28() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    boolean var8 = var4.isOccupied();
    var4.clearDigit();
    lpf.model.core.Value var10 = var4.getDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var56 = var35.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var35.addAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.lang.Object[] var80 = var63.toArray(var79);
    lpf.model.kenken.Cage var81 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var63);
    boolean var82 = var58.remove((java.lang.Object)var63);
    boolean var83 = var58.isEmpty();
    int var84 = var58.size();
    boolean var85 = var12.addAll((java.util.Collection)var58);
    boolean var86 = var4.equals((java.lang.Object)var58);
    java.util.Set var87 = var4.getMarks();
    var4.clearDigit();
    var4.clearDigit();
    boolean var90 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test29() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    java.lang.String var85 = var84.toString();
    java.lang.String var86 = var84.toString();
    java.lang.String var87 = var84.toString();
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var84);
    java.lang.String var89 = var84.toString();
    lpf.model.core.Cell var90 = new lpf.model.core.Cell(var84);
    
    // Checks the contract:  equals-hashcode on var88 and var90
    assertTrue("Contract failed: equals-hashcode on var88 and var90", var88.equals(var90) ? var88.hashCode() == var90.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var90 and var88
    assertTrue("Contract failed: equals-hashcode on var90 and var88", var90.equals(var88) ? var90.hashCode() == var88.hashCode() : true);

  }

  public void test30() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    java.lang.Object[] var47 = var14.toArray();
    java.util.Iterator var48 = var14.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var50 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var51 = var50.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var52 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    lpf.model.kenken.InvalidKenKenPuzzleException var53 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    lpf.model.kenken.InvalidKenKenPuzzleException var54 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    lpf.model.kenken.InvalidKenKenPuzzleException var55 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    lpf.model.kenken.InvalidKenKenPuzzleException var56 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    boolean var57 = var14.remove((java.lang.Object)var51);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    boolean var80 = var59.retainAll((java.util.Collection)var68);
    java.util.Iterator var81 = var59.iterator();
    int var82 = var59.size();
    java.lang.Object[] var83 = var59.toArray();
    boolean var84 = var14.containsAll((java.util.Collection)var59);
    int var85 = var14.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var51.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test31() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    boolean var39 = var1.removeAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var50.retainAll((java.util.Collection)var58);
    boolean var62 = var41.retainAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var41.addAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    java.lang.Object[] var85 = new java.lang.Object[] { var84};
    java.lang.Object[] var86 = var69.toArray(var85);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var69);
    boolean var88 = var64.remove((java.lang.Object)var69);
    java.util.Iterator var89 = var64.iterator();
    boolean var90 = var1.removeAll((java.util.Collection)var64);
    java.util.Iterator var91 = var1.iterator();
    int var92 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test32() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    java.lang.Object[] var42 = var20.toArray();
    java.util.Iterator var43 = var20.iterator();
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var20);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var76 = var73.remove((java.lang.Object)(short)100);
    boolean var77 = var69.retainAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var73);
    java.util.Iterator var79 = var73.iterator();
    var73.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test33() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    boolean var20 = var1.contains((java.lang.Object)var14);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.lang.Object[] var48 = var21.toArray(var47);
    java.lang.Object[] var49 = var14.toArray(var47);
    java.util.Iterator var50 = var14.iterator();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.lang.Object[] var69 = var65.toArray(var68);
    var65.clear();
    boolean var71 = var52.contains((java.lang.Object)var65);
    boolean var72 = var14.removeAll((java.util.Collection)var52);
    java.util.Iterator var73 = var14.iterator();
    java.lang.Object[] var74 = var14.toArray();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    java.lang.Object[] var85 = new java.lang.Object[] { var83};
    java.lang.Object[] var86 = var79.toArray(var85);
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    boolean var89 = var87.retainAll((java.util.Collection)var88);
    boolean var90 = var79.retainAll((java.util.Collection)var87);
    java.lang.Object[] var91 = new java.lang.Object[] { var90};
    java.lang.Object[] var92 = var75.toArray(var91);
    lpf.model.core.ArraySet var93 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var94 = new lpf.model.core.ArraySet();
    boolean var95 = var93.retainAll((java.util.Collection)var94);
    boolean var96 = var75.containsAll((java.util.Collection)var93);
    int var97 = var75.size();
    var75.clear();
    boolean var99 = var14.containsAll((java.util.Collection)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test34() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Cell[][] var10 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    boolean var38 = var15.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var39 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var15);
    lpf.model.core.CellsIterator var40 = new lpf.model.core.CellsIterator(var10, 100, 0);
    lpf.model.core.Cell var41 = var40.next();
    boolean var42 = var40.hasNext();
    boolean var43 = var4.equals((java.lang.Object)var42);
    boolean var44 = var4.isOccupied();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test35() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    java.util.Set var19 = var4.getMarks();
    var4.clearDigit();
    boolean var21 = var4.isOccupied();
    lpf.model.kenken.InvalidKenKenPuzzleException var23 = new lpf.model.kenken.InvalidKenKenPuzzleException("hi!");
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var27 = new lpf.model.kenken.InvalidKenKenPuzzleException(var26);
    java.lang.String var28 = var27.toString();
    boolean var29 = var4.equals((java.lang.Object)var28);
    lpf.model.core.Value var30 = var4.getDigit();
    lpf.model.core.Location var33 = new lpf.model.core.Location((-1), 'a');
    java.lang.String var34 = var33.toString();
    lpf.model.core.Cell var35 = new lpf.model.core.Cell(var33);
    boolean var36 = var35.isOccupied();
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    lpf.model.core.Cell var41 = new lpf.model.core.Cell(var39);
    java.util.Set var42 = var41.getMarks();
    lpf.model.core.Value var44 = new lpf.model.core.Value('a');
    lpf.model.core.Value var45 = new lpf.model.core.Value('a');
    lpf.model.core.Value var46 = new lpf.model.core.Value('a');
    var41.addMark(var46);
    var35.addMark(var46);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var50.retainAll((java.util.Collection)var58);
    java.util.Iterator var62 = var58.iterator();
    boolean var63 = var58.isEmpty();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    java.util.Iterator var65 = var64.iterator();
    boolean var66 = var58.contains((java.lang.Object)var65);
    boolean var67 = var46.equals((java.lang.Object)var66);
    var4.setDigit(var46);
    var4.clearDigit();
    
    // Checks the contract:  equals-hashcode on var4 and var41
    assertTrue("Contract failed: equals-hashcode on var4 and var41", var4.equals(var41) ? var4.hashCode() == var41.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var41 and var4
    assertTrue("Contract failed: equals-hashcode on var41 and var4", var41.equals(var4) ? var41.hashCode() == var4.hashCode() : true);

  }

  public void test36() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.lang.Object[] var37 = var33.toArray(var36);
    var33.clear();
    boolean var39 = var20.contains((java.lang.Object)var33);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.lang.Object[] var57 = var40.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    java.lang.Object[] var67 = var40.toArray(var66);
    java.lang.Object[] var68 = var33.toArray(var66);
    java.lang.Object[] var69 = var14.toArray(var68);
    boolean var70 = var1.removeAll((java.util.Collection)var14);
    java.lang.Object[] var71 = var1.toArray();
    boolean var72 = var1.isEmpty();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var88 = var83.contains((java.lang.Object)'#');
    lpf.model.core.Location var89 = new lpf.model.core.Location(100, '#');
    boolean var90 = var1.contains((java.lang.Object)100);
    java.lang.Object[] var91 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test37() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    lpf.model.kenken.InvalidKenKenPuzzleException var12 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var13 = var12.toString();
    java.lang.String var14 = var12.toString();
    boolean var15 = var1.contains((java.lang.Object)var14);
    var1.clear();
    int var17 = var1.size();
    boolean var18 = var1.isEmpty();
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Cell var51 = var50.next();
    boolean var52 = var50.hasNext();
    boolean var53 = var50.hasNext();
    boolean var54 = var50.hasNext();
    lpf.model.core.Cell var55 = var50.next();
    lpf.model.core.Cell var56 = var50.next();
    lpf.model.core.Cell var57 = var50.next();
    lpf.model.core.Cell var58 = var50.next();
    boolean var59 = var1.add((java.lang.Object)var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var50.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var13.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var14.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test38() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    boolean var37 = var6.addAll((java.util.Collection)var29);
    var6.clear();
    boolean var39 = var4.equals((java.lang.Object)var6);
    int var40 = var6.size();
    boolean var41 = var6.isEmpty();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var64 = var43.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    boolean var74 = var43.addAll((java.util.Collection)var66);
    var43.clear();
    var43.clear();
    java.util.Iterator var77 = var43.iterator();
    java.lang.Object[] var78 = var43.toArray();
    var43.clear();
    boolean var80 = var43.isEmpty();
    boolean var81 = var6.containsAll((java.util.Collection)var43);
    var43.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test39() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    boolean var20 = var1.contains((java.lang.Object)var14);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.lang.Object[] var48 = var21.toArray(var47);
    java.lang.Object[] var49 = var14.toArray(var47);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var51.toArray(var54);
    var51.clear();
    boolean var57 = var14.removeAll((java.util.Collection)var51);
    java.util.Iterator var58 = var51.iterator();
    java.lang.Object[] var59 = var51.toArray();
    java.util.Iterator var60 = var51.iterator();
    var51.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test40() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    var33.clear();
    int var38 = var33.size();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.util.Iterator var48 = var40.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.lang.Object[] var50 = var49.toArray();
    boolean var51 = var40.add((java.lang.Object)var49);
    boolean var52 = var40.isEmpty();
    boolean var53 = var40.isEmpty();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('#', var38, (java.util.Collection)var40);
    boolean var55 = var54.isAdjacent();
    boolean var56 = var54.isAdjacent();
    java.util.Iterator var57 = var54.iterator();
    boolean var58 = var54.isAdjacent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test41() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    var4.clearMarks();
    java.util.Set var10 = var4.getMarks();
    java.util.Set var11 = var4.getMarks();
    var4.clearDigit();
    lpf.model.core.Value var13 = var4.getDigit();
    lpf.model.core.Value var14 = var4.getDigit();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test42() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    boolean var5 = var4.hasNext();
    boolean var6 = var4.hasNext();
    lpf.model.core.Cell var7 = var4.next();
    boolean var8 = var4.hasNext();
    boolean var9 = var4.hasNext();
    boolean var10 = var4.hasNext();
    boolean var11 = var4.hasNext();
    boolean var12 = var4.hasNext();
    lpf.model.core.Cell var13 = var4.next();
    boolean var14 = var4.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test43() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    boolean var5 = var4.hasNext();
    lpf.model.core.Cell var6 = var4.next();
    lpf.model.core.Cell var7 = var4.next();
    boolean var8 = var4.hasNext();
    boolean var9 = var4.hasNext();
    boolean var10 = var4.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test44() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var84);
    java.lang.String var86 = var84.toString();
    lpf.model.core.Location var89 = new lpf.model.core.Location(1, '4');
    java.lang.String var90 = var89.toString();
    lpf.model.core.Cell var91 = new lpf.model.core.Cell(var89);
    lpf.model.core.Value var93 = new lpf.model.core.Value('#');
    var91.setDigit(var93);
    boolean var95 = var91.isOccupied();
    var91.clearDigit();
    lpf.model.core.Value var97 = var91.getDigit();
    boolean var98 = var91.isOccupied();
    boolean var99 = var84.equals((java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(#,-1)"+ "'", var86.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(4,1)"+ "'", var90.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test45() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var4 = var3.getDigit();
    boolean var5 = var3.isOccupied();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var6.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var6.containsAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    boolean var52 = var31.retainAll((java.util.Collection)var40);
    boolean var54 = var31.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var55 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var31);
    boolean var56 = var24.containsAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    int var70 = var66.size();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var72.remove((java.lang.Object)var84);
    boolean var88 = var66.containsAll((java.util.Collection)var72);
    boolean var89 = var31.addAll((java.util.Collection)var66);
    java.lang.Object[] var90 = var66.toArray();
    boolean var91 = var3.equals((java.lang.Object)var66);
    boolean var92 = var3.isOccupied();
    lpf.model.core.Value var93 = var3.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test46() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Value var6 = var4.getDigit();
    java.util.Set var7 = var4.getMarks();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.lang.Object[] var25 = var8.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var8.toArray(var34);
    lpf.model.core.Value var37 = new lpf.model.core.Value('a');
    boolean var38 = var8.contains((java.lang.Object)var37);
    boolean var39 = var4.equals((java.lang.Object)var37);
    lpf.model.core.Value var41 = new lpf.model.core.Value('#');
    var4.setDigit(var41);
    var4.clearDigit();
    boolean var44 = var4.isOccupied();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test47() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.Value var6 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var46.toArray(var49);
    var46.clear();
    boolean var52 = var33.contains((java.lang.Object)var46);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var46);
    lpf.model.core.Value var54 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var55 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var56 = new lpf.model.core.Location(10, ' ');
    lpf.model.core.Value var57 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var58 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var59 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var60 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var61 = new lpf.model.core.Value(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test48() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    java.util.Iterator var32 = var20.iterator();
    lpf.model.core.Location var35 = new lpf.model.core.Location((-1), 'a');
    boolean var36 = var20.contains(var35);
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.String var39 = var38.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var40 = new lpf.model.kenken.InvalidKenKenPuzzleException(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(a,-1)"+ "'", var37.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (a,-1)"+ "'", var39.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (a,-1)"));

  }

  public void test49() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    lpf.model.core.Cell[][] var15 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Value var17 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var19 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var45 = var24.retainAll((java.util.Collection)var33);
    boolean var47 = var24.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var24);
    lpf.model.core.CellsIterator var49 = new lpf.model.core.CellsIterator(var19, 100, 0);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    var54.clearMarks();
    java.util.Set var56 = var54.getMarks();
    lpf.model.kenken.Cage var57 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var56);
    lpf.model.core.Location var59 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell[][] var61 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    java.lang.Object[] var80 = new java.lang.Object[] { var79};
    java.lang.Object[] var81 = var64.toArray(var80);
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var64);
    int var83 = var64.size();
    lpf.model.core.Location var86 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var87 = new lpf.model.core.CellsIterator(var61, var83, 1);
    lpf.model.core.CellsIterator var88 = new lpf.model.core.CellsIterator(var15, 0, 1);
    boolean var89 = var88.hasNext();
    lpf.model.core.Cell var90 = var88.next();
    lpf.model.core.Cell var91 = var88.next();
    boolean var92 = var88.hasNext();
    boolean var93 = var9.add((java.lang.Object)var88);
    boolean var94 = var88.hasNext();
    lpf.model.core.Cell var95 = var88.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test50() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    lpf.model.core.Cell var51 = new lpf.model.core.Cell(var49);
    var51.clearMarks();
    boolean var54 = var51.equals((java.lang.Object)(short)0);
    boolean var55 = var51.isOccupied();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var57.addAll((java.util.Collection)var80);
    int var83 = var80.size();
    boolean var84 = var51.equals((java.lang.Object)var80);
    boolean var85 = var1.removeAll((java.util.Collection)var80);
    java.lang.Object[] var86 = var1.toArray();
    boolean var87 = var1.isEmpty();
    int var88 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test51() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    java.util.Iterator var11 = var1.iterator();
    int var12 = var1.size();
    int var13 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test52() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    lpf.model.core.Value var9 = var4.getDigit();
    java.util.Set var10 = var4.getMarks();
    var4.clearDigit();
    lpf.model.core.Value var12 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test53() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    var33.clear();
    int var38 = var33.size();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.util.Iterator var48 = var40.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.lang.Object[] var50 = var49.toArray();
    boolean var51 = var40.add((java.lang.Object)var49);
    boolean var52 = var40.isEmpty();
    boolean var53 = var40.isEmpty();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('#', var38, (java.util.Collection)var40);
    java.util.Iterator var55 = var54.iterator();
    java.util.Iterator var56 = var54.iterator();
    boolean var57 = var54.isAdjacent();
    boolean var58 = var54.isAdjacent();
    java.util.Iterator var59 = var54.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test54() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    java.lang.Object[] var47 = var14.toArray();
    boolean var48 = var14.isEmpty();
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    java.lang.String var54 = var51.toString();
    boolean var55 = var14.add((java.lang.Object)var51);
    lpf.model.core.Cell var56 = new lpf.model.core.Cell(var51);
    java.lang.String var57 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var58 = new lpf.model.kenken.InvalidKenKenPuzzleException(var57);
    java.lang.String var59 = var58.toString();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.toString();
    java.lang.String var62 = var58.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var59.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var60.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var61.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var62.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test55() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    java.lang.Object[] var14 = var9.toArray();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var30 = var25.contains((java.lang.Object)'#');
    lpf.model.core.Location var31 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    lpf.model.core.Cell var36 = new lpf.model.core.Cell(var34);
    lpf.model.core.Value var38 = new lpf.model.core.Value('#');
    var36.setDigit(var38);
    var36.clearMarks();
    lpf.model.core.Value var42 = new lpf.model.core.Value('#');
    var36.removeMark(var42);
    boolean var44 = var36.isOccupied();
    var36.clearDigit();
    boolean var46 = var36.isOccupied();
    boolean var47 = var31.equals((java.lang.Object)var36);
    java.lang.String var48 = var31.toString();
    lpf.model.core.Cell[][] var50 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var78 = var55.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var79 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var55);
    lpf.model.core.CellsIterator var80 = new lpf.model.core.CellsIterator(var50, 100, 0);
    lpf.model.core.Cell var81 = var80.next();
    lpf.model.core.Cell var82 = var80.next();
    boolean var83 = var80.hasNext();
    lpf.model.core.Cell var84 = var80.next();
    lpf.model.core.Cell var85 = var80.next();
    boolean var86 = var80.hasNext();
    lpf.model.core.Cell var87 = var80.next();
    boolean var88 = var80.hasNext();
    boolean var89 = var31.equals((java.lang.Object)var80);
    boolean var90 = var9.add((java.lang.Object)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(#,100)"+ "'", var48.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test56() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.util.Iterator var28 = var27.iterator();
    java.util.Iterator var29 = var27.iterator();
    java.util.Iterator var30 = var27.iterator();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location((-1), '#');
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    boolean var52 = var27.contains(var49);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    int var66 = var62.size();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var68.remove((java.lang.Object)var80);
    boolean var84 = var62.containsAll((java.util.Collection)var68);
    java.lang.Object[] var85 = var68.toArray();
    boolean var86 = var49.equals((java.lang.Object)var68);
    java.lang.String var87 = var49.toString();
    java.lang.String var88 = var49.toString();
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var49);
    java.lang.String var90 = var49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(#,-1)"+ "'", var50.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(#,-1)"+ "'", var51.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(#,-1)"+ "'", var87.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(#,-1)"+ "'", var88.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(#,-1)"+ "'", var90.equals("(#,-1)"));

  }

  public void test57() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    java.util.Set var9 = var4.getMarks();
    boolean var10 = var4.isOccupied();
    boolean var11 = var4.isOccupied();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.retainAll((java.util.Collection)var21);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var13.remove((java.lang.Object)var25);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var30.addAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    java.lang.Object[] var65 = var53.toArray(var64);
    boolean var66 = var13.addAll((java.util.Collection)var53);
    java.util.Iterator var67 = var53.iterator();
    java.lang.Object[] var68 = var53.toArray();
    boolean var69 = var4.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test58() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    int var22 = var0.size();
    int var23 = var0.size();
    int var24 = var0.size();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    boolean var34 = var26.isEmpty();
    boolean var35 = var26.isEmpty();
    java.util.Iterator var36 = var26.iterator();
    var26.clear();
    boolean var38 = var26.isEmpty();
    boolean var39 = var26.isEmpty();
    java.lang.Object[] var40 = var26.toArray();
    boolean var41 = var0.retainAll((java.util.Collection)var26);
    int var42 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test59() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    boolean var14 = var9.isEmpty();
    int var15 = var9.size();
    lpf.model.core.Value var17 = new lpf.model.core.Value('4');
    lpf.model.core.Location var18 = new lpf.model.core.Location(var15, '4');
    lpf.model.core.Value var19 = new lpf.model.core.Value('4');
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    lpf.model.core.Cell var24 = new lpf.model.core.Cell(var22);
    lpf.model.core.Value var26 = new lpf.model.core.Value('#');
    var24.setDigit(var26);
    var24.clearDigit();
    var24.clearDigit();
    var24.clearDigit();
    var24.clearDigit();
    java.util.Set var32 = var24.getMarks();
    var24.clearDigit();
    boolean var34 = var24.isOccupied();
    java.util.Set var35 = var24.getMarks();
    boolean var36 = var19.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test60() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(#,0)"+ "'", var44.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(#,0)"+ "'", var45.equals("(#,0)"));

  }

  public void test61() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));

  }

  public void test62() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.Location var26 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var33 = new lpf.model.kenken.InvalidKenKenPuzzleException(var32);
    lpf.model.kenken.InvalidKenKenPuzzleException var34 = new lpf.model.kenken.InvalidKenKenPuzzleException(var32);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException(var32);
    lpf.model.kenken.InvalidKenKenPuzzleException var36 = new lpf.model.kenken.InvalidKenKenPuzzleException(var32);
    java.lang.String var37 = var36.toString();
    boolean var38 = var26.equals((java.lang.Object)var37);
    java.lang.String var39 = var26.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var40 = new lpf.model.kenken.InvalidKenKenPuzzleException(var39);
    lpf.model.kenken.InvalidKenKenPuzzleException var41 = new lpf.model.kenken.InvalidKenKenPuzzleException(var39);
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var45 = new lpf.model.kenken.InvalidKenKenPuzzleException(var44);
    java.lang.String var46 = var45.toString();
    java.lang.String var47 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(a,100)"+ "'", var39.equals("(a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"+ "'", var42.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"+ "'", var43.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"+ "'", var44.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"+ "'", var46.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"+ "'", var47.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (a,100)"));

  }

  public void test63() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    java.util.Iterator var7 = var1.iterator();
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.lang.Object[] var29 = var12.toArray(var28);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var12);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    boolean var63 = var32.addAll((java.util.Collection)var55);
    boolean var64 = var12.addAll((java.util.Collection)var55);
    int var65 = var12.size();
    java.util.Iterator var66 = var12.iterator();
    boolean var67 = var1.retainAll((java.util.Collection)var12);
    java.util.Iterator var68 = var12.iterator();
    java.lang.Object[] var69 = var12.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test64() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    java.lang.Object[] var39 = var14.toArray();
    boolean var40 = var14.isEmpty();
    boolean var41 = var1.removeAll((java.util.Collection)var14);
    var14.clear();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    java.lang.Object[] var56 = var52.toArray();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var58.remove((java.lang.Object)var70);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    java.lang.Object[] var84 = new java.lang.Object[] { var82};
    java.lang.Object[] var85 = var78.toArray(var84);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var78.retainAll((java.util.Collection)var86);
    java.lang.Object[] var90 = new java.lang.Object[] { var89};
    java.lang.Object[] var91 = var74.toArray(var90);
    lpf.model.core.ArraySet var92 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var93 = new lpf.model.core.ArraySet();
    boolean var94 = var92.retainAll((java.util.Collection)var93);
    boolean var95 = var74.containsAll((java.util.Collection)var92);
    boolean var96 = var58.add((java.lang.Object)var95);
    boolean var97 = var52.removeAll((java.util.Collection)var58);
    boolean var98 = var14.retainAll((java.util.Collection)var52);
    java.util.Iterator var99 = var14.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test65() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    java.lang.Object[] var88 = var84.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var84);
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.CellsIterator var91 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var92 = var91.next();
    lpf.model.core.Cell var93 = var91.next();
    boolean var94 = var91.hasNext();
    boolean var95 = var91.hasNext();
    lpf.model.core.Cell var96 = var91.next();
    boolean var97 = var91.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var91.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test66() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    var4.clearMarks();
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    lpf.model.core.Cell var11 = new lpf.model.core.Cell(var9);
    lpf.model.core.Value var13 = new lpf.model.core.Value('#');
    var11.setDigit(var13);
    var11.clearMarks();
    lpf.model.core.Value var17 = new lpf.model.core.Value('#');
    var11.removeMark(var17);
    var4.addMark(var17);
    var4.clearDigit();
    java.util.Set var21 = var4.getMarks();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var36 = var31.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    boolean var46 = var31.remove((java.lang.Object)var38);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.lang.Object[] var64 = var47.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    java.lang.Object[] var74 = var47.toArray(var73);
    boolean var75 = var31.removeAll((java.util.Collection)var47);
    int var76 = var47.size();
    lpf.model.core.Value var78 = new lpf.model.core.Value('#');
    lpf.model.core.Value var79 = new lpf.model.core.Value('#');
    lpf.model.core.Location var80 = new lpf.model.core.Location(var76, '#');
    boolean var81 = var4.equals((java.lang.Object)var80);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test67() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.lang.Object[] var44 = var27.toArray(var43);
    lpf.model.kenken.Cage var45 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var27);
    int var46 = var27.size();
    boolean var47 = var9.retainAll((java.util.Collection)var27);
    java.util.Iterator var48 = var9.iterator();
    java.lang.Object[] var49 = var9.toArray();
    var9.clear();
    int var51 = var9.size();
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    lpf.model.core.Cell var56 = new lpf.model.core.Cell(var54);
    lpf.model.core.Value var58 = new lpf.model.core.Value('#');
    var56.setDigit(var58);
    boolean var60 = var56.isOccupied();
    var56.clearDigit();
    lpf.model.core.Value var62 = var56.getDigit();
    java.util.Set var63 = var56.getMarks();
    var56.clearDigit();
    boolean var65 = var9.contains((java.lang.Object)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test68() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    var7.clearMarks();
    boolean var10 = var7.equals((java.lang.Object)(short)0);
    boolean var11 = var7.isOccupied();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var34 = var13.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var13.addAll((java.util.Collection)var36);
    int var39 = var36.size();
    boolean var40 = var7.equals((java.lang.Object)var36);
    boolean var41 = var7.isOccupied();
    java.util.Set var42 = var7.getMarks();
    boolean var43 = var7.isOccupied();
    lpf.model.core.Value var44 = var7.getDigit();
    lpf.model.core.Value var46 = new lpf.model.core.Value('a');
    boolean var47 = var7.equals((java.lang.Object)'a');
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, 'a');
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    lpf.model.core.Cell var53 = new lpf.model.core.Cell(var51);
    var53.clearMarks();
    boolean var56 = var53.equals((java.lang.Object)(short)0);
    boolean var57 = var48.equals((java.lang.Object)var53);
    
    // Checks the contract:  equals-hashcode on var7 and var53
    assertTrue("Contract failed: equals-hashcode on var7 and var53", var7.equals(var53) ? var7.hashCode() == var53.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var53 and var7
    assertTrue("Contract failed: equals-hashcode on var53 and var7", var53.equals(var7) ? var53.hashCode() == var7.hashCode() : true);

  }

  public void test69() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var77 = var39.addAll((java.util.Collection)var64);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var81 = new lpf.model.core.Cell(var80);
    boolean var82 = var64.add((java.lang.Object)var80);
    java.lang.String var83 = var80.toString();
    java.lang.String var84 = var80.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var85 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    java.lang.String var86 = var85.toString();
    java.lang.String var87 = var85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var86.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test70() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.Value var18 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    java.util.Set var57 = var55.getMarks();
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var57);
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, '#');
    boolean var61 = var13.add((java.lang.Object)var60);
    java.lang.String var62 = var60.toString();
    java.lang.String var63 = var60.toString();
    lpf.model.core.Cell var64 = new lpf.model.core.Cell(var60);
    boolean var65 = var64.isOccupied();
    boolean var66 = var64.isOccupied();
    lpf.model.core.Value var67 = var64.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(#,0)"+ "'", var62.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(#,0)"+ "'", var63.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test71() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    lpf.model.core.Location var41 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    boolean var44 = var42.equals((java.lang.Object)0L);
    lpf.model.core.Cell var45 = new lpf.model.core.Cell(var42);
    var45.clearMarks();
    var45.clearDigit();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var65 = var60.contains((java.lang.Object)'#');
    lpf.model.core.Location var66 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var67 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var69 = new lpf.model.core.Cell(var68);
    java.lang.String var70 = var68.toString();
    boolean var71 = var45.equals((java.lang.Object)var70);
    var45.clearMarks();
    var45.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(#,1)"+ "'", var70.equals("(#,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test72() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    boolean var37 = var16.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    boolean var47 = var16.addAll((java.util.Collection)var39);
    boolean var48 = var3.addAll((java.util.Collection)var16);
    int var49 = var16.size();
    lpf.model.core.Cell[][] var51 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.lang.Object[] var71 = var54.toArray(var70);
    lpf.model.kenken.Cage var72 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var54);
    int var73 = var54.size();
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var77 = new lpf.model.core.CellsIterator(var51, var73, 1);
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var1, var49, var73);
    lpf.model.core.Cell var79 = var78.next();
    lpf.model.core.Cell var80 = var78.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var78.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test73() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var4 = var3.getDigit();
    boolean var5 = var3.isOccupied();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.Object[] var13 = new java.lang.Object[] { var11};
    java.lang.Object[] var14 = var7.toArray(var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var28 = var7.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var7.addAll((java.util.Collection)var30);
    int var33 = var30.size();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    boolean var52 = var30.add((java.lang.Object)var50);
    int var53 = var30.size();
    int var54 = var30.size();
    lpf.model.core.Value var56 = new lpf.model.core.Value('a');
    lpf.model.core.Location var57 = new lpf.model.core.Location(var54, 'a');
    lpf.model.core.Value var58 = new lpf.model.core.Value('a');
    var3.addMark(var58);
    var3.clearMarks();
    lpf.model.core.Value var61 = var3.getDigit();
    var3.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test74() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var17 = new lpf.model.core.Cell(var16);
    boolean var18 = var17.isOccupied();
    var17.clearMarks();
    lpf.model.core.Value var20 = var17.getDigit();
    java.util.Set var21 = var17.getMarks();
    lpf.model.core.Value var22 = var17.getDigit();
    java.util.Set var23 = var17.getMarks();
    var17.clearMarks();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var26.remove((java.lang.Object)var38);
    lpf.model.core.Value var43 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var45 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    boolean var73 = var50.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var50);
    lpf.model.core.CellsIterator var75 = new lpf.model.core.CellsIterator(var45, 100, 0);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    lpf.model.core.Cell var80 = new lpf.model.core.Cell(var78);
    var80.clearMarks();
    java.util.Set var82 = var80.getMarks();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var82);
    lpf.model.core.Location var85 = new lpf.model.core.Location(0, '#');
    boolean var86 = var38.add((java.lang.Object)var85);
    lpf.model.core.Cell var87 = new lpf.model.core.Cell(var85);
    var87.clearMarks();
    java.util.Set var89 = var87.getMarks();
    var87.clearMarks();
    var87.clearMarks();
    var87.clearMarks();
    boolean var93 = var17.equals((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test75() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    java.util.Set var10 = var4.getMarks();
    var4.clearMarks();
    lpf.model.core.Value var12 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test76() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    boolean var10 = var4.isOccupied();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.retainAll((java.util.Collection)var21);
    boolean var26 = var21.contains((java.lang.Object)'#');
    lpf.model.core.Location var27 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Value var28 = new lpf.model.core.Value('#');
    lpf.model.core.Value var29 = new lpf.model.core.Value('#');
    var4.addMark(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test77() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    var4.clearMarks();
    java.util.Set var39 = var4.getMarks();
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var42);
    lpf.model.core.Value var46 = new lpf.model.core.Value('#');
    var44.setDigit(var46);
    var44.clearMarks();
    lpf.model.core.Value var50 = new lpf.model.core.Value('#');
    var44.removeMark(var50);
    boolean var52 = var44.isOccupied();
    java.util.Set var53 = var44.getMarks();
    lpf.model.core.Value var54 = var44.getDigit();
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    boolean var62 = var59.equals((java.lang.Object)(short)0);
    java.util.Set var63 = var59.getMarks();
    var59.clearMarks();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var87 = var66.retainAll((java.util.Collection)var75);
    boolean var89 = var66.contains((java.lang.Object)100);
    lpf.model.core.Location var91 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Value var92 = new lpf.model.core.Value('a');
    var59.removeMark(var92);
    boolean var94 = var54.equals((java.lang.Object)var92);
    var4.removeMark(var54);
    
    // Checks the contract:  equals-hashcode on var4 and var59
    assertTrue("Contract failed: equals-hashcode on var4 and var59", var4.equals(var59) ? var4.hashCode() == var59.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var59 and var4
    assertTrue("Contract failed: equals-hashcode on var59 and var4", var59.equals(var4) ? var59.hashCode() == var4.hashCode() : true);

  }

  public void test78() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    int var24 = var1.size();
    var1.clear();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test79() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    var7.clearMarks();
    java.util.Set var9 = var7.getMarks();
    var7.clearMarks();
    var7.clearDigit();
    var7.clearMarks();
    boolean var13 = var1.add((java.lang.Object)var7);
    java.lang.Object[] var14 = var1.toArray();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    java.lang.Object[] var28 = var24.toArray();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.lang.Object[] var34 = var30.toArray(var33);
    var30.clear();
    var30.clear();
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    lpf.model.core.Cell var41 = new lpf.model.core.Cell(var39);
    var41.clearMarks();
    boolean var44 = var41.equals((java.lang.Object)(short)0);
    boolean var46 = var41.equals((java.lang.Object)0.0f);
    boolean var47 = var30.add((java.lang.Object)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var70 = var49.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    boolean var80 = var49.addAll((java.util.Collection)var72);
    var49.clear();
    var49.clear();
    boolean var83 = var30.containsAll((java.util.Collection)var49);
    int var84 = var49.size();
    int var85 = var49.size();
    var49.clear();
    boolean var87 = var24.retainAll((java.util.Collection)var49);
    boolean var88 = var1.retainAll((java.util.Collection)var49);
    
    // Checks the contract:  equals-hashcode on var7 and var41
    assertTrue("Contract failed: equals-hashcode on var7 and var41", var7.equals(var41) ? var7.hashCode() == var41.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var41 and var7
    assertTrue("Contract failed: equals-hashcode on var41 and var7", var41.equals(var7) ? var41.hashCode() == var7.hashCode() : true);

  }

  public void test80() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.util.Iterator var23 = var1.iterator();
    boolean var24 = var1.isEmpty();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    boolean var60 = var39.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    boolean var70 = var39.addAll((java.util.Collection)var62);
    boolean var71 = var26.addAll((java.util.Collection)var39);
    int var72 = var39.size();
    boolean var73 = var1.containsAll((java.util.Collection)var39);
    java.lang.Object[] var74 = var1.toArray();
    boolean var75 = var1.isEmpty();
    java.util.Iterator var76 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test81() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.Cell[][] var8 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var11 = new lpf.model.core.CellsIterator(var8, 10, 0);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    int var21 = var13.size();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.lang.Object[] var41 = var24.toArray(var40);
    lpf.model.kenken.Cage var42 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var24);
    lpf.model.core.CellsIterator var43 = new lpf.model.core.CellsIterator(var8, var21, (-1));
    boolean var44 = var1.contains((java.lang.Object)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test82() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test83() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var84);
    var85.clearMarks();
    boolean var87 = var85.isOccupied();
    boolean var88 = var85.isOccupied();
    lpf.model.core.Value var89 = var85.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test84() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    java.util.Iterator var27 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test85() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    lpf.model.core.Cell var23 = new lpf.model.core.Cell(var21);
    lpf.model.core.Value var25 = new lpf.model.core.Value('#');
    var23.setDigit(var25);
    var23.clearDigit();
    var23.clearDigit();
    var23.clearDigit();
    var23.clearMarks();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.util.Iterator var44 = var40.iterator();
    boolean var45 = var40.isEmpty();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    java.util.Iterator var47 = var46.iterator();
    boolean var48 = var40.contains((java.lang.Object)var47);
    boolean var49 = var23.equals((java.lang.Object)var40);
    lpf.model.core.Value var51 = new lpf.model.core.Value(' ');
    boolean var52 = var23.equals((java.lang.Object)var51);
    var4.setDigit(var51);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var56.toArray(var72);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var56);
    lpf.model.core.Value var75 = new lpf.model.core.Value('a');
    lpf.model.core.Value var76 = new lpf.model.core.Value('a');
    lpf.model.core.Value var77 = new lpf.model.core.Value('a');
    lpf.model.core.Value var78 = new lpf.model.core.Value('a');
    lpf.model.core.Value var79 = new lpf.model.core.Value('a');
    var4.addMark(var79);
    var4.clearDigit();
    
    // Checks the contract:  equals-hashcode on var4 and var23
    assertTrue("Contract failed: equals-hashcode on var4 and var23", var4.equals(var23) ? var4.hashCode() == var23.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var23 and var4
    assertTrue("Contract failed: equals-hashcode on var23 and var4", var23.equals(var4) ? var23.hashCode() == var4.hashCode() : true);

  }

  public void test86() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    int var5 = var0.size();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    java.lang.Object[] var11 = var0.toArray((java.lang.Object[])var7);
    lpf.model.core.Location var14 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    int var37 = var15.size();
    lpf.model.core.CellsIterator var38 = new lpf.model.core.CellsIterator(var7, (-1), var37);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var43 = new lpf.model.core.CellsIterator(var7, (-1), 1);
    lpf.model.core.Cell var44 = var43.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test87() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    boolean var27 = var20.contains(var23);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var30.toArray(var46);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var30);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    boolean var53 = var48.contains(var51);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    lpf.model.core.Cell var58 = new lpf.model.core.Cell(var56);
    boolean var59 = var48.contains(var56);
    lpf.model.core.Location var62 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var67 = var64.remove((java.lang.Object)(short)100);
    boolean var68 = var62.equals((java.lang.Object)(short)100);
    boolean var69 = var48.contains(var62);
    boolean var70 = var20.contains(var62);
    java.util.Iterator var71 = var20.iterator();
    java.util.Iterator var72 = var20.iterator();
    java.util.Iterator var73 = var20.iterator();
    java.util.Iterator var74 = var20.iterator();
    java.util.Iterator var75 = var20.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test88() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.Location var31 = new lpf.model.core.Location(var29, ' ');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    boolean var77 = var46.addAll((java.util.Collection)var69);
    boolean var78 = var33.addAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var33.removeAll((java.util.Collection)var80);
    boolean var83 = var31.equals((java.lang.Object)var33);
    int var84 = var33.size();
    var33.clear();
    int var86 = var33.size();
    boolean var87 = var33.isEmpty();
    java.lang.Object[] var88 = var33.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test89() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var46 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    java.lang.Object[] var72 = var50.toArray();
    java.util.Iterator var73 = var50.iterator();
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var50);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var76);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.kenken.InvalidKenKenPuzzleException var87 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var88 = var87.toString();
    java.lang.String var89 = var87.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var90 = new lpf.model.kenken.InvalidKenKenPuzzleException(var89);
    java.lang.String var91 = var90.toString();
    java.lang.String var92 = var90.toString();
    java.lang.String var93 = var90.toString();
    java.lang.String var94 = var90.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var95 = new lpf.model.kenken.InvalidKenKenPuzzleException(var94);
    java.lang.String var96 = var95.toString();
    java.lang.String var97 = var95.toString();
    boolean var98 = var86.equals((java.lang.Object)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var88.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var89.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var91.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var92.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var93.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var94.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var96.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var97.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test90() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.util.Iterator var48 = var20.iterator();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    boolean var64 = var59.contains((java.lang.Object)'#');
    lpf.model.core.Location var65 = new lpf.model.core.Location(100, '#');
    boolean var66 = var20.contains(var65);
    java.util.Iterator var67 = var20.iterator();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    boolean var83 = var78.contains((java.lang.Object)'#');
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var86 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var87 = var86.toString();
    boolean var88 = var84.equals((java.lang.Object)var86);
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var84);
    boolean var90 = var20.contains(var84);
    java.lang.String var91 = var84.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var92 = new lpf.model.kenken.InvalidKenKenPuzzleException(var91);
    java.lang.String var93 = var92.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(#,100)"+ "'", var91.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var93.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));

  }

  public void test91() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    boolean var12 = var4.isOccupied();
    java.util.Set var13 = var4.getMarks();
    lpf.model.core.Value var14 = var4.getDigit();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.lang.Object[] var34 = var17.toArray(var33);
    lpf.model.kenken.Cage var35 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var17);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    java.lang.String var41 = var38.toString();
    boolean var42 = var35.contains(var38);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var59 = var54.contains((java.lang.Object)'#');
    lpf.model.core.Location var60 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var61 = new lpf.model.core.Location((-1), '#');
    java.lang.String var62 = var61.toString();
    boolean var63 = var35.contains(var61);
    java.util.Iterator var64 = var35.iterator();
    boolean var65 = var4.equals((java.lang.Object)var35);
    java.util.Iterator var66 = var35.iterator();
    java.util.Iterator var67 = var35.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var68 = var35.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(#,-1)"+ "'", var62.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test92() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.util.Iterator var28 = var27.iterator();
    java.util.Iterator var29 = var27.iterator();
    java.util.Iterator var30 = var27.iterator();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    boolean var57 = var34.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var34);
    java.util.Iterator var59 = var58.iterator();
    java.util.Iterator var60 = var58.iterator();
    java.util.Iterator var61 = var58.iterator();
    java.util.Iterator var62 = var58.iterator();
    lpf.model.core.Location var65 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var70 = var67.remove((java.lang.Object)(short)100);
    boolean var71 = var65.equals((java.lang.Object)(short)100);
    boolean var72 = var58.contains(var65);
    lpf.model.core.Cell var73 = new lpf.model.core.Cell(var65);
    java.lang.String var74 = var65.toString();
    boolean var75 = var27.contains(var65);
    java.util.Iterator var76 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(a,-1)"+ "'", var74.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test93() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var14 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    lpf.model.kenken.InvalidKenKenPuzzleException var15 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    lpf.model.kenken.InvalidKenKenPuzzleException var16 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    boolean var17 = var4.equals((java.lang.Object)var16);
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    lpf.model.core.Cell var24 = new lpf.model.core.Cell(var22);
    java.util.Set var25 = var24.getMarks();
    lpf.model.core.Value var27 = new lpf.model.core.Value('a');
    lpf.model.core.Value var28 = new lpf.model.core.Value('a');
    lpf.model.core.Value var29 = new lpf.model.core.Value('a');
    var24.addMark(var29);
    var4.setDigit(var29);
    java.util.Set var32 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test94() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    var10.clearMarks();
    boolean var13 = var10.equals((java.lang.Object)(short)0);
    boolean var14 = var10.isOccupied();
    var10.clearMarks();
    lpf.model.core.Value var17 = new lpf.model.core.Value(' ');
    var10.addMark(var17);
    boolean var19 = var10.isOccupied();
    boolean var20 = var1.contains((java.lang.Object)var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    java.lang.Object[] var34 = var30.toArray();
    boolean var35 = var30.isEmpty();
    boolean var36 = var1.removeAll((java.util.Collection)var30);
    java.lang.Object[] var37 = var30.toArray();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    boolean var73 = var52.retainAll((java.util.Collection)var61);
    boolean var75 = var52.contains((java.lang.Object)100);
    java.lang.Object[] var76 = var52.toArray();
    boolean var77 = var39.removeAll((java.util.Collection)var52);
    java.util.Iterator var78 = var39.iterator();
    java.util.Iterator var79 = var39.iterator();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '4');
    java.lang.String var86 = var85.toString();
    java.lang.Object[] var87 = new java.lang.Object[] { var85};
    java.lang.Object[] var88 = var81.toArray(var87);
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var90 = new lpf.model.core.ArraySet();
    boolean var91 = var89.retainAll((java.util.Collection)var90);
    boolean var92 = var81.retainAll((java.util.Collection)var89);
    var81.clear();
    java.util.Iterator var94 = var81.iterator();
    java.lang.Object[] var95 = var81.toArray();
    boolean var96 = var39.remove((java.lang.Object)var95);
    java.lang.Object[] var97 = var30.toArray(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(4,1)"+ "'", var86.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test95() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    lpf.model.core.Value var56 = new lpf.model.core.Value('#');
    var54.setDigit(var56);
    boolean var58 = var54.isOccupied();
    boolean var59 = var54.isOccupied();
    lpf.model.kenken.InvalidKenKenPuzzleException var61 = new lpf.model.kenken.InvalidKenKenPuzzleException("hi!");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    boolean var64 = var54.equals((java.lang.Object)var61);
    var54.clearMarks();
    boolean var66 = var54.isOccupied();
    boolean var67 = var24.remove((java.lang.Object)var54);
    var54.clearMarks();
    boolean var69 = var54.isOccupied();
    boolean var70 = var54.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var62.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var63.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test96() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.lang.Object[] var20 = var16.toArray(var19);
    var16.clear();
    boolean var22 = var3.contains((java.lang.Object)var16);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    java.lang.Object[] var50 = var23.toArray(var49);
    java.lang.Object[] var51 = var16.toArray(var49);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.lang.Object[] var57 = var53.toArray(var56);
    var53.clear();
    boolean var59 = var16.removeAll((java.util.Collection)var53);
    var53.clear();
    var53.clear();
    java.lang.Object[] var62 = var53.toArray();
    int var63 = var53.size();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    boolean var79 = var73.isEmpty();
    boolean var80 = var73.isEmpty();
    int var81 = var73.size();
    lpf.model.core.CellsIterator var82 = new lpf.model.core.CellsIterator(var1, var63, var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test97() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    lpf.model.core.Value var22 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var24 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    boolean var52 = var29.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var29);
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var24, 100, 0);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    java.util.Set var61 = var59.getMarks();
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var61);
    lpf.model.core.Location var64 = new lpf.model.core.Location(0, '#');
    boolean var65 = var16.equals((java.lang.Object)'#');
    lpf.model.core.Cell var66 = new lpf.model.core.Cell(var16);
    java.util.Set var67 = var66.getMarks();
    boolean var68 = var66.isOccupied();
    var66.clearDigit();
    boolean var70 = var66.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test98() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    var1.clear();
    var1.clear();
    int var19 = var1.size();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    int var23 = var20.size();
    int var24 = var20.size();
    var20.clear();
    boolean var26 = var20.isEmpty();
    var20.clear();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    java.lang.Object[] var29 = var28.toArray();
    boolean var30 = var28.isEmpty();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    java.lang.Object[] var54 = var32.toArray();
    java.util.Iterator var55 = var32.iterator();
    int var56 = var32.size();
    boolean var57 = var28.addAll((java.util.Collection)var32);
    boolean var58 = var20.addAll((java.util.Collection)var28);
    var20.clear();
    boolean var60 = var1.addAll((java.util.Collection)var20);
    var20.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test99() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    var4.clearMarks();
    boolean var7 = var4.isOccupied();
    lpf.model.core.Value var8 = var4.getDigit();
    java.util.Set var9 = var4.getMarks();
    java.util.Set var10 = var4.getMarks();
    java.util.Set var11 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test100() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var31 = new lpf.model.core.Location(var27, '4');
    lpf.model.core.Value var32 = new lpf.model.core.Value('4');
    lpf.model.core.Value var33 = new lpf.model.core.Value('4');
    lpf.model.core.Value var34 = new lpf.model.core.Value('4');
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    lpf.model.core.Cell var39 = new lpf.model.core.Cell(var37);
    boolean var40 = var39.isOccupied();
    lpf.model.core.Cell[][] var42 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var68 = var47.retainAll((java.util.Collection)var56);
    boolean var70 = var47.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var71 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var47);
    lpf.model.core.CellsIterator var72 = new lpf.model.core.CellsIterator(var42, 100, 0);
    lpf.model.core.Cell var73 = var72.next();
    lpf.model.core.Cell var74 = var72.next();
    boolean var75 = var72.hasNext();
    lpf.model.core.Cell var76 = var72.next();
    boolean var77 = var39.equals((java.lang.Object)var72);
    boolean var78 = var72.hasNext();
    boolean var79 = var72.hasNext();
    boolean var80 = var72.hasNext();
    lpf.model.core.Cell var81 = var72.next();
    lpf.model.core.Cell var82 = var72.next();
    lpf.model.core.Cell var83 = var72.next();
    boolean var84 = var72.hasNext();
    boolean var85 = var34.equals((java.lang.Object)var72);
    boolean var86 = var72.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test101() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Value var5 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var36 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var12);
    lpf.model.core.CellsIterator var37 = new lpf.model.core.CellsIterator(var7, 100, 0);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    lpf.model.core.Cell var42 = new lpf.model.core.Cell(var40);
    var42.clearMarks();
    java.util.Set var44 = var42.getMarks();
    lpf.model.kenken.Cage var45 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var44);
    lpf.model.core.Location var47 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell[][] var49 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.lang.Object[] var69 = var52.toArray(var68);
    lpf.model.kenken.Cage var70 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var52);
    int var71 = var52.size();
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var75 = new lpf.model.core.CellsIterator(var49, var71, 1);
    lpf.model.core.CellsIterator var76 = new lpf.model.core.CellsIterator(var3, 0, 1);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.kenken.InvalidKenKenPuzzleException var80 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var81 = var80.toString();
    java.lang.String var82 = var80.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var83 = new lpf.model.kenken.InvalidKenKenPuzzleException(var82);
    boolean var84 = var77.add((java.lang.Object)var83);
    lpf.model.kenken.Cage var85 = new lpf.model.kenken.Cage('#', 1, (java.util.Collection)var77);
    boolean var86 = var85.isAdjacent();
    boolean var87 = var85.isAdjacent();
    boolean var88 = var85.isAdjacent();
    boolean var89 = var85.isAdjacent();
    boolean var90 = var85.isAdjacent();
    java.util.Iterator var91 = var85.iterator();
    boolean var92 = var85.isAdjacent();
    boolean var93 = var85.isAdjacent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var81.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test102() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    boolean var14 = var9.isEmpty();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    java.util.Iterator var24 = var16.iterator();
    java.util.Iterator var25 = var16.iterator();
    var16.clear();
    java.util.Iterator var27 = var16.iterator();
    var16.clear();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var30.addAll((java.util.Collection)var53);
    boolean var56 = var53.isEmpty();
    boolean var57 = var16.containsAll((java.util.Collection)var53);
    boolean var58 = var53.isEmpty();
    boolean var59 = var9.addAll((java.util.Collection)var53);
    var9.clear();
    int var61 = var9.size();
    int var62 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test103() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var84);
    java.lang.String var86 = var84.toString();
    lpf.model.core.Cell var87 = new lpf.model.core.Cell(var84);
    
    // Checks the contract:  equals-hashcode on var85 and var87
    assertTrue("Contract failed: equals-hashcode on var85 and var87", var85.equals(var87) ? var85.hashCode() == var87.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var87 and var85
    assertTrue("Contract failed: equals-hashcode on var87 and var85", var87.equals(var85) ? var87.hashCode() == var85.hashCode() : true);

  }

  public void test104() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    int var60 = var56.size();
    boolean var61 = var1.retainAll((java.util.Collection)var56);
    boolean var62 = var1.isEmpty();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    boolean var72 = var64.isEmpty();
    boolean var73 = var1.addAll((java.util.Collection)var64);
    boolean var74 = var1.isEmpty();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test105() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var4 = var3.getDigit();
    boolean var5 = var3.isOccupied();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.Object[] var13 = new java.lang.Object[] { var11};
    java.lang.Object[] var14 = var7.toArray(var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var28 = var7.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var7.addAll((java.util.Collection)var30);
    int var33 = var30.size();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    boolean var52 = var30.add((java.lang.Object)var50);
    int var53 = var30.size();
    int var54 = var30.size();
    lpf.model.core.Value var56 = new lpf.model.core.Value('a');
    lpf.model.core.Location var57 = new lpf.model.core.Location(var54, 'a');
    lpf.model.core.Value var58 = new lpf.model.core.Value('a');
    var3.addMark(var58);
    var3.clearMarks();
    var3.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);

  }

  public void test106() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    boolean var60 = var39.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    boolean var70 = var39.addAll((java.util.Collection)var62);
    boolean var71 = var26.addAll((java.util.Collection)var39);
    int var72 = var39.size();
    java.util.Iterator var73 = var39.iterator();
    boolean var74 = var39.isEmpty();
    boolean var75 = var9.removeAll((java.util.Collection)var39);
    java.util.Iterator var76 = var9.iterator();
    int var77 = var9.size();
    int var78 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test107() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    lpf.model.core.Value var22 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var24 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    boolean var52 = var29.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var29);
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var24, 100, 0);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    java.util.Set var61 = var59.getMarks();
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var61);
    lpf.model.core.Location var64 = new lpf.model.core.Location(0, '#');
    boolean var65 = var16.equals((java.lang.Object)'#');
    lpf.model.core.Cell var66 = new lpf.model.core.Cell(var16);
    boolean var67 = var66.isOccupied();
    var66.clearDigit();
    boolean var69 = var66.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test108() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    boolean var37 = var16.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    boolean var47 = var16.addAll((java.util.Collection)var39);
    boolean var48 = var3.addAll((java.util.Collection)var16);
    int var49 = var16.size();
    lpf.model.core.Cell[][] var51 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.lang.Object[] var71 = var54.toArray(var70);
    lpf.model.kenken.Cage var72 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var54);
    int var73 = var54.size();
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var77 = new lpf.model.core.CellsIterator(var51, var73, 1);
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var1, var49, var73);
    boolean var79 = var78.hasNext();
    lpf.model.core.Cell var80 = var78.next();
    lpf.model.core.Cell var81 = var78.next();
    boolean var82 = var78.hasNext();
    lpf.model.core.Cell var83 = var78.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var78.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test109() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    java.lang.Object[] var25 = var16.toArray();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.util.Iterator var39 = var35.iterator();
    boolean var40 = var35.isEmpty();
    boolean var41 = var16.addAll((java.util.Collection)var35);
    var16.clear();
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    lpf.model.core.Cell var47 = new lpf.model.core.Cell(var45);
    var47.clearMarks();
    boolean var50 = var47.equals((java.lang.Object)(short)0);
    boolean var51 = var47.isOccupied();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var53.addAll((java.util.Collection)var76);
    int var79 = var76.size();
    boolean var80 = var47.equals((java.lang.Object)var76);
    boolean var81 = var47.isOccupied();
    java.util.Set var82 = var47.getMarks();
    boolean var83 = var47.isOccupied();
    boolean var84 = var16.contains((java.lang.Object)var47);
    java.util.Set var85 = var47.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test110() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    boolean var4 = var1.remove((java.lang.Object)(short)100);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var6.addAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.kenken.Cage var52 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var34);
    boolean var53 = var29.remove((java.lang.Object)var34);
    boolean var54 = var1.containsAll((java.util.Collection)var29);
    int var55 = var1.size();
    java.lang.Object[] var56 = var1.toArray();
    lpf.model.core.Cell[][] var58 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var84 = var63.retainAll((java.util.Collection)var72);
    boolean var86 = var63.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var63);
    lpf.model.core.CellsIterator var88 = new lpf.model.core.CellsIterator(var58, 100, 0);
    lpf.model.core.Cell var89 = var88.next();
    lpf.model.core.Cell var90 = var88.next();
    boolean var91 = var88.hasNext();
    lpf.model.core.Cell var92 = var88.next();
    boolean var93 = var88.hasNext();
    boolean var94 = var88.hasNext();
    boolean var95 = var1.remove((java.lang.Object)var88);
    boolean var96 = var1.isEmpty();
    int var97 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);

  }

  public void test111() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.Location var29 = new lpf.model.core.Location(var23, ' ');
    java.lang.String var30 = var29.toString();
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = var29.toString();
    java.lang.String var33 = var29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "( ,0)"+ "'", var30.equals("( ,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "( ,0)"+ "'", var31.equals("( ,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "( ,0)"+ "'", var32.equals("( ,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "( ,0)"+ "'", var33.equals("( ,0)"));

  }

  public void test112() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    int var17 = var13.size();
    java.lang.Object[] var18 = var13.toArray();
    java.util.Iterator var19 = var13.iterator();
    var13.clear();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var22.remove((java.lang.Object)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    java.util.Iterator var47 = var39.iterator();
    java.util.Iterator var48 = var39.iterator();
    boolean var49 = var34.containsAll((java.util.Collection)var39);
    boolean var50 = var13.contains((java.lang.Object)var39);
    var39.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test113() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    java.util.Set var5 = var4.getMarks();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.Object[] var13 = new java.lang.Object[] { var11};
    java.lang.Object[] var14 = var7.toArray(var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var28 = var7.retainAll((java.util.Collection)var16);
    boolean var30 = var7.add((java.lang.Object)0.0d);
    boolean var31 = var4.equals((java.lang.Object)var30);
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Value var34 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    lpf.model.core.Cell var40 = new lpf.model.core.Cell(var38);
    lpf.model.core.Value var42 = new lpf.model.core.Value('#');
    var40.setDigit(var42);
    var40.clearDigit();
    var40.clearDigit();
    var40.clearDigit();
    var40.clearMarks();
    var40.clearMarks();
    var40.clearDigit();
    var40.clearMarks();
    boolean var51 = var40.isOccupied();
    boolean var52 = var40.isOccupied();
    lpf.model.core.Value var53 = var40.getDigit();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var73 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var75 = new lpf.model.core.Value('#');
    lpf.model.core.Value var76 = new lpf.model.core.Value('#');
    lpf.model.core.Value var77 = new lpf.model.core.Value('#');
    var40.addMark(var77);
    var4.setDigit(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test114() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    boolean var15 = var9.isEmpty();
    java.util.Iterator var16 = var9.iterator();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    boolean var29 = var18.retainAll((java.util.Collection)var26);
    boolean var31 = var26.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    boolean var41 = var26.remove((java.lang.Object)var33);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var64 = var43.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var43.addAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.lang.Object[] var88 = var71.toArray(var87);
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var71);
    boolean var90 = var66.remove((java.lang.Object)var71);
    boolean var91 = var33.addAll((java.util.Collection)var71);
    boolean var92 = var9.retainAll((java.util.Collection)var71);
    int var93 = var71.size();
    lpf.model.core.Location var95 = new lpf.model.core.Location(var93, ' ');
    lpf.model.core.Cell var96 = new lpf.model.core.Cell(var95);
    lpf.model.core.Cell var97 = new lpf.model.core.Cell(var95);
    
    // Checks the contract:  equals-hashcode on var96 and var97
    assertTrue("Contract failed: equals-hashcode on var96 and var97", var96.equals(var97) ? var96.hashCode() == var97.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var97 and var96
    assertTrue("Contract failed: equals-hashcode on var97 and var96", var97.equals(var96) ? var97.hashCode() == var96.hashCode() : true);

  }

  public void test115() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var17 = new lpf.model.core.Cell(var16);
    lpf.model.core.Value var18 = var17.getDigit();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.lang.Object[] var36 = var19.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var19.containsAll((java.util.Collection)var37);
    var37.clear();
    int var42 = var37.size();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    boolean var69 = var46.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var70 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var46);
    lpf.model.core.Value var71 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var72 = new lpf.model.core.Location(var42, ' ');
    boolean var73 = var17.equals((java.lang.Object)var72);
    var17.clearMarks();
    var17.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test116() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Cell var32 = var31.next();
    lpf.model.core.Cell var33 = var31.next();
    boolean var34 = var31.hasNext();
    lpf.model.core.Cell var35 = var31.next();
    boolean var36 = var31.hasNext();
    boolean var37 = var31.hasNext();
    boolean var38 = var31.hasNext();
    lpf.model.core.Cell var39 = var31.next();
    lpf.model.core.Cell var40 = var31.next();
    boolean var41 = var31.hasNext();
    boolean var42 = var31.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test117() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    var0.clear();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var6.remove((java.lang.Object)var18);
    lpf.model.core.Value var23 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var25 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    boolean var53 = var30.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var30);
    lpf.model.core.CellsIterator var55 = new lpf.model.core.CellsIterator(var25, 100, 0);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    lpf.model.core.Cell var60 = new lpf.model.core.Cell(var58);
    var60.clearMarks();
    java.util.Set var62 = var60.getMarks();
    lpf.model.kenken.Cage var63 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var62);
    lpf.model.core.Location var65 = new lpf.model.core.Location(0, '#');
    boolean var66 = var18.add((java.lang.Object)var65);
    lpf.model.core.Cell var67 = new lpf.model.core.Cell(var65);
    java.lang.String var68 = var65.toString();
    java.lang.String var69 = var65.toString();
    java.lang.String var70 = var65.toString();
    boolean var71 = var0.add((java.lang.Object)var70);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(#,0)"+ "'", var68.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(#,0)"+ "'", var69.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(#,0)"+ "'", var70.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test118() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var36 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    boolean var37 = var36.hasNext();
    boolean var38 = var36.hasNext();
    boolean var39 = var36.hasNext();
    lpf.model.core.Cell var40 = var36.next();
    boolean var41 = var36.hasNext();
    lpf.model.core.Cell var42 = var36.next();
    lpf.model.core.Cell var43 = var36.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test119() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    boolean var27 = var20.contains(var23);
    java.util.Iterator var28 = var20.iterator();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    boolean var46 = var35.retainAll((java.util.Collection)var43);
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.lang.Object[] var48 = var31.toArray(var47);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var31);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    boolean var55 = var49.contains(var52);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var60 = new lpf.model.kenken.InvalidKenKenPuzzleException(var59);
    java.lang.String var61 = var60.toString();
    boolean var62 = var52.equals((java.lang.Object)var60);
    boolean var63 = var20.contains(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var64 = var20.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var61.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test120() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    lpf.model.core.Cell var13 = new lpf.model.core.Cell(var11);
    var13.clearMarks();
    boolean var16 = var13.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var17 = var13.getDigit();
    lpf.model.core.Cell[][] var19 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var45 = var24.retainAll((java.util.Collection)var33);
    boolean var47 = var24.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var24);
    lpf.model.core.CellsIterator var49 = new lpf.model.core.CellsIterator(var19, 100, 0);
    lpf.model.core.Cell var50 = var49.next();
    boolean var51 = var49.hasNext();
    boolean var52 = var13.equals((java.lang.Object)var51);
    var13.clearMarks();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    boolean var80 = var57.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var81 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var57);
    lpf.model.core.Value var82 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var83 = new lpf.model.core.Value(' ');
    var13.setDigit(var83);
    lpf.model.core.Value var85 = var13.getDigit();
    var4.removeMark(var85);
    java.util.Set var87 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test121() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location((-1), 'a');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var5 = var4.isOccupied();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    java.util.Set var11 = var10.getMarks();
    lpf.model.core.Cell[][] var13 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var16 = new lpf.model.core.CellsIterator(var13, 10, 0);
    lpf.model.core.Value var18 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    boolean var43 = var20.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    boolean var56 = var45.retainAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.lang.Object[] var62 = var58.toArray(var61);
    var58.clear();
    boolean var64 = var45.contains((java.lang.Object)var58);
    lpf.model.kenken.Cage var65 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var58);
    lpf.model.core.Value var66 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var67 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var68 = new lpf.model.core.Location(10, ' ');
    lpf.model.core.Value var69 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var70 = new lpf.model.core.Value(' ');
    var10.addMark(var70);
    var4.removeMark(var70);
    boolean var73 = var4.isOccupied();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(a,-1)"+ "'", var3.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test122() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    boolean var19 = var4.isOccupied();
    var4.clearMarks();
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    lpf.model.core.Cell var28 = new lpf.model.core.Cell(var26);
    var28.clearMarks();
    boolean var31 = var28.equals((java.lang.Object)(short)0);
    boolean var32 = var28.isOccupied();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var34.addAll((java.util.Collection)var57);
    int var60 = var57.size();
    boolean var61 = var28.equals((java.lang.Object)var57);
    boolean var62 = var28.isOccupied();
    java.util.Set var63 = var28.getMarks();
    boolean var64 = var28.isOccupied();
    lpf.model.core.Value var65 = var28.getDigit();
    lpf.model.core.Value var67 = new lpf.model.core.Value('a');
    boolean var68 = var28.equals((java.lang.Object)'a');
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, 'a');
    lpf.model.core.Value var70 = new lpf.model.core.Value('a');
    var4.setDigit(var70);
    boolean var72 = var4.isOccupied();
    lpf.model.core.Value var73 = var4.getDigit();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test123() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    java.util.Iterator var24 = var1.iterator();
    java.util.Iterator var25 = var1.iterator();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var49.retainAll((java.util.Collection)var57);
    boolean var61 = var40.retainAll((java.util.Collection)var49);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    boolean var71 = var40.addAll((java.util.Collection)var63);
    boolean var72 = var27.addAll((java.util.Collection)var40);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    java.lang.Object[] var90 = new java.lang.Object[] { var89};
    java.lang.Object[] var91 = var87.toArray(var90);
    var87.clear();
    boolean var93 = var74.contains((java.lang.Object)var87);
    boolean var94 = var40.addAll((java.util.Collection)var87);
    boolean var95 = var1.add((java.lang.Object)var40);
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test124() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    var4.clearMarks();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    boolean var32 = var11.retainAll((java.util.Collection)var20);
    boolean var34 = var11.contains((java.lang.Object)100);
    lpf.model.core.Location var36 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Value var37 = new lpf.model.core.Value('a');
    var4.removeMark(var37);
    boolean var39 = var4.isOccupied();
    lpf.model.core.Value var40 = var4.getDigit();
    java.util.Set var41 = var4.getMarks();
    var4.clearDigit();
    java.util.Set var43 = var4.getMarks();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var45.addAll((java.util.Collection)var68);
    int var71 = var45.size();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var88 = var83.contains((java.lang.Object)'#');
    lpf.model.core.Location var89 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Value var92 = new lpf.model.core.Value('#');
    boolean var93 = var45.remove((java.lang.Object)'#');
    lpf.model.core.Value var94 = new lpf.model.core.Value('#');
    var4.removeMark(var94);
    boolean var96 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test125() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.util.Iterator var1 = var0.iterator();
    var0.clear();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var34 = var13.retainAll((java.util.Collection)var22);
    boolean var36 = var13.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var41 = new lpf.model.kenken.InvalidKenKenPuzzleException(var40);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var13.toArray(var42);
    java.lang.Object[] var44 = var4.toArray(var42);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var46.toArray(var49);
    var46.clear();
    var46.clear();
    java.lang.Object[] var53 = var46.toArray();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.containsAll((java.util.Collection)var54);
    boolean var58 = var4.retainAll((java.util.Collection)var54);
    var4.clear();
    java.util.Iterator var60 = var4.iterator();
    boolean var61 = var0.containsAll((java.util.Collection)var4);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var84 = var63.retainAll((java.util.Collection)var72);
    java.util.Iterator var85 = var72.iterator();
    java.util.Iterator var86 = var72.iterator();
    boolean var87 = var4.retainAll((java.util.Collection)var72);
    java.util.Iterator var88 = var72.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var39.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var40.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test126() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    var1.clear();
    var1.clear();
    int var16 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test127() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var4 = new lpf.model.kenken.InvalidKenKenPuzzleException(var3);
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    java.lang.String var7 = var4.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var8 = new lpf.model.kenken.InvalidKenKenPuzzleException(var7);
    lpf.model.kenken.InvalidKenKenPuzzleException var9 = new lpf.model.kenken.InvalidKenKenPuzzleException(var7);
    java.lang.String var10 = var9.toString();
    java.lang.String var11 = var9.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var12 = new lpf.model.kenken.InvalidKenKenPuzzleException(var11);
    java.lang.String var13 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var5.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var6.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var7.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var10.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var11.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var13.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test128() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    int var22 = var0.size();
    int var23 = var0.size();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    boolean var56 = var25.addAll((java.util.Collection)var48);
    boolean var57 = var48.isEmpty();
    boolean var58 = var0.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    java.lang.Object[] var77 = new java.lang.Object[] { var75};
    java.lang.Object[] var78 = var71.toArray(var77);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var71.retainAll((java.util.Collection)var79);
    boolean var83 = var62.retainAll((java.util.Collection)var71);
    java.lang.Object[] var84 = var62.toArray();
    java.util.Iterator var85 = var62.iterator();
    lpf.model.kenken.Cage var86 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var62);
    boolean var87 = var0.addAll((java.util.Collection)var62);
    boolean var88 = var62.isEmpty();
    int var89 = var62.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test129() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    var4.clearMarks();
    var4.clearMarks();
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    lpf.model.core.Cell var16 = new lpf.model.core.Cell(var14);
    var16.clearMarks();
    java.util.Set var18 = var16.getMarks();
    lpf.model.core.Value var19 = var16.getDigit();
    boolean var20 = var16.isOccupied();
    boolean var21 = var16.isOccupied();
    var16.clearMarks();
    java.util.Set var23 = var16.getMarks();
    var16.clearDigit();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    var26.clear();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    java.lang.Object[] var52 = var48.toArray();
    int var53 = var48.size();
    boolean var54 = var26.add((java.lang.Object)var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var69 = var64.contains((java.lang.Object)'#');
    lpf.model.core.Location var70 = new lpf.model.core.Location(var53, '#');
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    var16.setDigit(var71);
    var4.addMark(var71);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test130() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    java.util.Iterator var50 = var24.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var51 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var54 = new lpf.model.kenken.InvalidKenKenPuzzleException(var53);
    boolean var55 = var24.contains((java.lang.Object)var54);
    boolean var56 = var24.isEmpty();
    var24.clear();
    boolean var58 = var24.isEmpty();
    java.lang.Object[] var59 = var24.toArray();
    java.lang.Object[] var60 = var24.toArray();
    java.lang.Object[] var61 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var52.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var53.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test131() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var17 = new lpf.model.core.Cell(var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    lpf.model.core.Cell var22 = new lpf.model.core.Cell(var20);
    lpf.model.core.Value var24 = new lpf.model.core.Value('#');
    var22.setDigit(var24);
    var22.clearDigit();
    var22.clearDigit();
    var22.clearDigit();
    var22.clearMarks();
    java.util.Set var30 = var22.getMarks();
    boolean var31 = var17.equals((java.lang.Object)var22);
    lpf.model.core.Value var32 = var17.getDigit();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var34.addAll((java.util.Collection)var57);
    int var60 = var57.size();
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var64 = new lpf.model.core.Location(var60, '4');
    lpf.model.core.Value var65 = new lpf.model.core.Value('4');
    lpf.model.core.Value var66 = new lpf.model.core.Value('4');
    lpf.model.core.Value var67 = new lpf.model.core.Value('4');
    lpf.model.core.Value var68 = new lpf.model.core.Value('4');
    lpf.model.core.Value var69 = new lpf.model.core.Value('4');
    lpf.model.core.Value var70 = new lpf.model.core.Value('4');
    boolean var71 = var17.equals((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test132() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var46 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    java.lang.Object[] var72 = var50.toArray();
    java.util.Iterator var73 = var50.iterator();
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var50);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var76);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    lpf.model.core.Value var88 = new lpf.model.core.Value('#');
    lpf.model.core.Value var89 = new lpf.model.core.Value('#');
    lpf.model.core.Value var90 = new lpf.model.core.Value('#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Location var94 = new lpf.model.core.Location((-1), 'a');
    boolean var95 = var91.equals((java.lang.Object)var94);
    lpf.model.core.Cell var96 = new lpf.model.core.Cell(var94);
    lpf.model.core.Value var97 = var96.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test133() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var10.toArray(var39);
    java.lang.Object[] var41 = var1.toArray(var39);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var43.toArray(var46);
    var43.clear();
    var43.clear();
    java.lang.Object[] var50 = var43.toArray();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.containsAll((java.util.Collection)var51);
    boolean var55 = var1.retainAll((java.util.Collection)var51);
    boolean var57 = var51.contains((java.lang.Object)1.0f);
    int var58 = var51.size();
    boolean var59 = var51.isEmpty();
    java.lang.Object[] var60 = var51.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var36.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test134() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var6.toArray(var22);
    lpf.model.kenken.Cage var24 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var6);
    int var25 = var6.size();
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var29 = new lpf.model.core.CellsIterator(var3, var25, 1);
    lpf.model.core.Cell[][] var31 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    boolean var56 = var45.retainAll((java.util.Collection)var53);
    boolean var57 = var36.retainAll((java.util.Collection)var45);
    boolean var59 = var36.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var60 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var36);
    lpf.model.core.CellsIterator var61 = new lpf.model.core.CellsIterator(var31, 100, 0);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var66 = new lpf.model.core.CellsIterator(var31, 1, (-1));
    lpf.model.core.CellsIterator var67 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var68 = var67.next();
    boolean var69 = var67.hasNext();
    boolean var70 = var67.hasNext();
    boolean var71 = var67.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test135() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.lang.Object[] var49 = var32.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    java.lang.Object[] var59 = var32.toArray(var58);
    java.lang.Object[] var60 = var19.toArray(var58);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var77 = var72.contains((java.lang.Object)'#');
    lpf.model.core.Location var78 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var79 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var80 = new lpf.model.core.Value('#');
    boolean var81 = var19.contains((java.lang.Object)var80);
    var4.setDigit(var80);
    boolean var83 = var4.isOccupied();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test136() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    boolean var12 = var4.isOccupied();
    boolean var13 = var4.isOccupied();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    boolean var49 = var28.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    boolean var59 = var28.addAll((java.util.Collection)var51);
    boolean var60 = var15.addAll((java.util.Collection)var28);
    int var61 = var28.size();
    int var62 = var28.size();
    int var63 = var28.size();
    boolean var64 = var4.equals((java.lang.Object)var63);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    boolean var82 = var77.contains((java.lang.Object)'#');
    lpf.model.core.Location var83 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    lpf.model.core.Location var88 = new lpf.model.core.Location(var63, '#');
    java.lang.String var89 = var88.toString();
    java.lang.String var90 = var88.toString();
    lpf.model.core.Cell var91 = new lpf.model.core.Cell(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(#,0)"+ "'", var89.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(#,0)"+ "'", var90.equals("(#,0)"));

  }

  public void test137() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    boolean var20 = var1.contains((java.lang.Object)var14);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.lang.Object[] var48 = var21.toArray(var47);
    java.lang.Object[] var49 = var14.toArray(var47);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    boolean var82 = var51.addAll((java.util.Collection)var74);
    boolean var83 = var14.contains((java.lang.Object)var51);
    lpf.model.core.Location var86 = new lpf.model.core.Location(1, '4');
    java.lang.String var87 = var86.toString();
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var86);
    lpf.model.core.Value var90 = new lpf.model.core.Value('#');
    var88.setDigit(var90);
    var88.clearDigit();
    var88.clearDigit();
    java.util.Set var94 = var88.getMarks();
    boolean var95 = var51.contains((java.lang.Object)var88);
    java.util.Iterator var96 = var51.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(4,1)"+ "'", var87.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test138() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    java.util.Iterator var4 = var0.iterator();
    lpf.model.core.Location var7 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    boolean var53 = var42.retainAll((java.util.Collection)var50);
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var38.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var38);
    boolean var57 = var33.remove((java.lang.Object)var38);
    boolean var58 = var33.isEmpty();
    int var59 = var33.size();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    boolean var76 = var71.contains((java.lang.Object)'#');
    lpf.model.core.Location var77 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var78 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(var59, '#');
    lpf.model.core.Location var80 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var81 = new lpf.model.core.Location((-1), '#');
    boolean var82 = var0.remove((java.lang.Object)(-1));
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    int var86 = var83.size();
    boolean var87 = var0.addAll((java.util.Collection)var83);
    int var88 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test139() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Cell var32 = var31.next();
    lpf.model.core.Cell var33 = var31.next();
    lpf.model.core.Cell var34 = var31.next();
    lpf.model.core.Cell var35 = var31.next();
    lpf.model.core.Cell var36 = var31.next();
    lpf.model.core.Cell var37 = var31.next();
    boolean var38 = var31.hasNext();
    lpf.model.core.Cell var39 = var31.next();
    lpf.model.core.Cell var40 = var31.next();
    boolean var41 = var31.hasNext();
    boolean var42 = var31.hasNext();
    lpf.model.core.Cell var43 = var31.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test140() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    var14.clear();
    java.util.Iterator var48 = var14.iterator();
    int var49 = var14.size();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.lang.Object[] var67 = var50.toArray(var66);
    java.lang.Object[] var68 = var14.toArray(var66);
    var14.clear();
    java.lang.Object[] var70 = var14.toArray();
    boolean var71 = var14.isEmpty();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    boolean var87 = var82.contains((java.lang.Object)'#');
    lpf.model.core.Location var88 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var88);
    boolean var90 = var89.isOccupied();
    var89.clearMarks();
    lpf.model.core.Value var92 = var89.getDigit();
    java.util.Set var93 = var89.getMarks();
    lpf.model.core.Value var94 = var89.getDigit();
    java.util.Set var95 = var89.getMarks();
    java.util.Set var96 = var89.getMarks();
    boolean var97 = var14.addAll((java.util.Collection)var96);
    boolean var98 = var14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test141() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Value var9 = var4.getDigit();
    lpf.model.core.Value var10 = var4.getDigit();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var38 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var14);
    lpf.model.core.Value var39 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var40 = new lpf.model.core.Value(' ');
    var4.removeMark(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test142() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    lpf.model.core.Cell var51 = new lpf.model.core.Cell(var49);
    var51.clearMarks();
    boolean var54 = var51.equals((java.lang.Object)(short)0);
    boolean var55 = var51.isOccupied();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var57.addAll((java.util.Collection)var80);
    int var83 = var80.size();
    boolean var84 = var51.equals((java.lang.Object)var80);
    boolean var85 = var1.removeAll((java.util.Collection)var80);
    int var86 = var1.size();
    boolean var87 = var1.isEmpty();
    boolean var88 = var1.isEmpty();
    java.util.Iterator var89 = var1.iterator();
    java.util.Iterator var90 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test143() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var43 = var22.retainAll((java.util.Collection)var31);
    java.lang.Object[] var44 = var22.toArray();
    java.util.Iterator var45 = var22.iterator();
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var22);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var48);
    lpf.model.core.Location var59 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, 'a');
    java.lang.String var61 = var60.toString();
    lpf.model.core.Cell var62 = new lpf.model.core.Cell(var60);
    boolean var63 = var62.isOccupied();
    var62.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(a,0)"+ "'", var61.equals("(a,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test144() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    java.lang.Object[] var32 = var8.toArray();
    java.lang.Object[] var33 = var8.toArray();
    boolean var34 = var1.retainAll((java.util.Collection)var8);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    boolean var49 = var44.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    boolean var59 = var44.remove((java.lang.Object)var51);
    java.lang.Object[] var60 = var51.toArray();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    java.util.Iterator var74 = var70.iterator();
    boolean var75 = var70.isEmpty();
    boolean var76 = var51.addAll((java.util.Collection)var70);
    boolean var77 = var8.add((java.lang.Object)var76);
    java.lang.Object[] var78 = var8.toArray();
    java.util.Iterator var79 = var8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test145() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.Location var31 = new lpf.model.core.Location(var29, ' ');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    boolean var77 = var46.addAll((java.util.Collection)var69);
    boolean var78 = var33.addAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var33.removeAll((java.util.Collection)var80);
    boolean var83 = var31.equals((java.lang.Object)var33);
    lpf.model.kenken.InvalidKenKenPuzzleException var84 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var85 = var84.toString();
    java.lang.String var86 = var84.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var87 = new lpf.model.kenken.InvalidKenKenPuzzleException(var86);
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var86);
    boolean var89 = var31.equals((java.lang.Object)var86);
    lpf.model.core.Cell var90 = new lpf.model.core.Cell(var31);
    var90.clearDigit();
    java.util.Set var92 = var90.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var85.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var86.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test146() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var39 = var18.retainAll((java.util.Collection)var27);
    boolean var41 = var18.contains((java.lang.Object)100);
    java.lang.Object[] var42 = var18.toArray();
    java.lang.Object[] var43 = var18.toArray();
    boolean var44 = var16.equals((java.lang.Object)var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    java.lang.Object[] var84 = new java.lang.Object[] { var82};
    java.lang.Object[] var85 = var78.toArray(var84);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var78.retainAll((java.util.Collection)var86);
    java.lang.Object[] var90 = new java.lang.Object[] { var89};
    java.lang.Object[] var91 = var74.toArray(var90);
    lpf.model.kenken.Cage var92 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var74);
    boolean var93 = var69.remove((java.lang.Object)var74);
    boolean var94 = var69.isEmpty();
    boolean var95 = var16.equals((java.lang.Object)var94);
    java.lang.String var96 = var16.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var97 = new lpf.model.kenken.InvalidKenKenPuzzleException(var96);
    java.lang.String var98 = var97.toString();
    java.lang.String var99 = var97.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "(#,100)"+ "'", var96.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var98.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var99.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));

  }

  public void test147() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var31 = var28.remove((java.lang.Object)(short)100);
    boolean var32 = var24.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var34.addAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.lang.Object[] var79 = var62.toArray(var78);
    lpf.model.kenken.Cage var80 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var62);
    boolean var81 = var57.remove((java.lang.Object)var62);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var86 = var83.remove((java.lang.Object)(short)100);
    boolean var87 = var57.containsAll((java.util.Collection)var83);
    boolean var88 = var24.removeAll((java.util.Collection)var57);
    int var89 = var57.size();
    var57.clear();
    java.lang.Object[] var91 = var57.toArray();
    var57.clear();
    java.util.Iterator var93 = var57.iterator();
    java.lang.Object[] var94 = var57.toArray();
    var57.clear();
    java.util.Iterator var96 = var57.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test148() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test149() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    java.lang.Object[] var88 = var84.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var84);
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.CellsIterator var91 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var92 = var91.next();
    boolean var93 = var91.hasNext();
    lpf.model.core.Cell var94 = var91.next();
    lpf.model.core.Cell var95 = var91.next();
    boolean var96 = var91.hasNext();
    boolean var97 = var91.hasNext();
    lpf.model.core.Cell var98 = var91.next();
    lpf.model.core.Cell var99 = var91.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test150() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    var7.clearMarks();
    java.util.Set var9 = var7.getMarks();
    var7.clearMarks();
    var7.clearDigit();
    var7.clearMarks();
    boolean var13 = var1.add((java.lang.Object)var7);
    boolean var14 = var7.isOccupied();
    lpf.model.core.Value var15 = var7.getDigit();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    java.lang.Object[] var29 = var25.toArray();
    java.lang.Object[] var30 = var25.toArray();
    boolean var31 = var7.equals((java.lang.Object)var25);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var56 = var35.retainAll((java.util.Collection)var44);
    java.lang.Object[] var57 = var35.toArray();
    java.util.Iterator var58 = var35.iterator();
    lpf.model.kenken.Cage var59 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var35);
    lpf.model.core.Location var61 = new lpf.model.core.Location(0, '#');
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.lang.Object[] var67 = var63.toArray(var66);
    var63.clear();
    var63.clear();
    java.lang.Object[] var70 = var63.toArray();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.containsAll((java.util.Collection)var71);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.lang.Object[] var80 = var76.toArray(var79);
    var76.clear();
    var76.clear();
    java.lang.Object[] var83 = var76.toArray();
    boolean var84 = var71.add((java.lang.Object)var76);
    boolean var85 = var76.isEmpty();
    boolean var86 = var61.equals((java.lang.Object)var76);
    lpf.model.core.Cell var87 = new lpf.model.core.Cell(var61);
    boolean var88 = var25.add((java.lang.Object)var61);
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var61);
    
    // Checks the contract:  equals-hashcode on var87 and var89
    assertTrue("Contract failed: equals-hashcode on var87 and var89", var87.equals(var89) ? var87.hashCode() == var89.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var89 and var87
    assertTrue("Contract failed: equals-hashcode on var89 and var87", var89.equals(var87) ? var89.hashCode() == var87.hashCode() : true);

  }

  public void test151() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    var1.clear();
    java.util.Iterator var25 = var1.iterator();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    java.lang.Object[] var51 = var29.toArray();
    java.util.Iterator var52 = var29.iterator();
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var29);
    boolean var54 = var1.containsAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    lpf.model.core.Cell var62 = new lpf.model.core.Cell(var60);
    var62.clearMarks();
    java.util.Set var64 = var62.getMarks();
    var62.clearMarks();
    var62.clearDigit();
    var62.clearMarks();
    boolean var68 = var56.add((java.lang.Object)var62);
    boolean var69 = var62.isOccupied();
    java.util.Set var70 = var62.getMarks();
    var62.clearMarks();
    boolean var72 = var29.remove((java.lang.Object)var62);
    var62.clearDigit();
    var62.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test152() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    boolean var12 = var4.isOccupied();
    var4.clearDigit();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var15.addAll((java.util.Collection)var38);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.lang.Object[] var60 = var43.toArray(var59);
    lpf.model.kenken.Cage var61 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var43);
    boolean var62 = var38.remove((java.lang.Object)var43);
    boolean var63 = var38.isEmpty();
    int var64 = var38.size();
    int var65 = var38.size();
    boolean var66 = var38.isEmpty();
    boolean var67 = var4.equals((java.lang.Object)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test153() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    var7.clearMarks();
    java.util.Set var9 = var7.getMarks();
    var7.clearMarks();
    var7.clearDigit();
    var7.clearMarks();
    boolean var13 = var1.add((java.lang.Object)var7);
    boolean var14 = var7.isOccupied();
    java.util.Set var15 = var7.getMarks();
    var7.clearDigit();
    var7.clearDigit();
    lpf.model.core.Value var18 = var7.getDigit();
    boolean var19 = var7.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test154() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var29.isEmpty();
    int var50 = var29.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test155() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.util.Iterator var1 = var0.iterator();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    boolean var18 = var3.remove((java.lang.Object)var15);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    boolean var33 = var28.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    boolean var43 = var28.remove((java.lang.Object)var35);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    lpf.model.core.Cell var48 = new lpf.model.core.Cell(var46);
    lpf.model.core.Value var50 = new lpf.model.core.Value('#');
    var48.setDigit(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var53.remove((java.lang.Object)var65);
    boolean var69 = var50.equals((java.lang.Object)var53);
    boolean var70 = var28.addAll((java.util.Collection)var53);
    boolean var71 = var3.removeAll((java.util.Collection)var28);
    boolean var72 = var3.isEmpty();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    int var76 = var73.size();
    int var77 = var73.size();
    boolean var78 = var3.containsAll((java.util.Collection)var73);
    boolean var79 = var0.containsAll((java.util.Collection)var3);
    boolean var80 = var3.isEmpty();
    java.lang.Object[] var81 = var3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test156() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    boolean var9 = var4.isOccupied();
    lpf.model.core.Value var10 = var4.getDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var51 = var46.contains((java.lang.Object)'#');
    lpf.model.core.Location var52 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var53 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var78 = var55.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    boolean var90 = var88.retainAll((java.util.Collection)var89);
    boolean var91 = var80.retainAll((java.util.Collection)var88);
    java.lang.Object[] var92 = var88.toArray();
    lpf.model.kenken.Cage var93 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var88);
    lpf.model.core.Value var94 = new lpf.model.core.Value('#');
    lpf.model.core.Value var95 = new lpf.model.core.Value('#');
    lpf.model.core.Value var96 = new lpf.model.core.Value('#');
    var4.removeMark(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test157() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    int var60 = var56.size();
    boolean var61 = var1.retainAll((java.util.Collection)var56);
    boolean var62 = var1.isEmpty();
    java.lang.Object[] var63 = var1.toArray();
    int var64 = var1.size();
    java.lang.Object[] var65 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test158() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    int var60 = var56.size();
    boolean var61 = var1.retainAll((java.util.Collection)var56);
    boolean var62 = var1.isEmpty();
    java.lang.Object[] var63 = var1.toArray();
    int var64 = var1.size();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    int var68 = var65.size();
    var65.clear();
    boolean var70 = var1.addAll((java.util.Collection)var65);
    java.util.Iterator var71 = var65.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test159() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    boolean var12 = var1.isEmpty();
    int var13 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test160() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    java.util.Iterator var14 = var1.iterator();
    java.util.Iterator var15 = var1.iterator();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    boolean var38 = var17.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var17.addAll((java.util.Collection)var40);
    int var43 = var40.size();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.lang.Object[] var61 = var44.toArray(var60);
    boolean var62 = var40.add((java.lang.Object)var60);
    int var63 = var40.size();
    boolean var64 = var40.isEmpty();
    int var65 = var40.size();
    boolean var66 = var40.isEmpty();
    boolean var67 = var1.add((java.lang.Object)var40);
    java.util.Iterator var68 = var40.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test161() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    boolean var7 = var4.remove((java.lang.Object)(short)100);
    boolean var8 = var2.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var9 = new lpf.model.core.Cell(var2);
    boolean var10 = var9.isOccupied();
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    lpf.model.core.Cell var16 = new lpf.model.core.Cell(var13);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.lang.Object[] var36 = var19.toArray(var35);
    lpf.model.kenken.Cage var37 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var19);
    lpf.model.core.Value var38 = new lpf.model.core.Value('a');
    var16.removeMark(var38);
    var9.removeMark(var38);
    java.util.Set var41 = var9.getMarks();
    lpf.model.core.Value var42 = var9.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test162() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var41.toArray(var44);
    var41.clear();
    boolean var47 = var28.contains((java.lang.Object)var41);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var41);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.util.Iterator var50 = var49.iterator();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    java.lang.Object[] var67 = var63.toArray();
    java.lang.Object[] var68 = var52.toArray(var67);
    boolean var69 = var49.removeAll((java.util.Collection)var52);
    int var70 = var49.size();
    boolean var71 = var41.contains((java.lang.Object)var49);
    java.util.Iterator var72 = var49.iterator();
    boolean var73 = var49.isEmpty();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.lang.Object[] var79 = var75.toArray(var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    lpf.model.core.Cell var84 = new lpf.model.core.Cell(var82);
    boolean var85 = var84.isOccupied();
    java.util.Set var86 = var84.getMarks();
    lpf.model.core.Value var87 = var84.getDigit();
    boolean var88 = var84.isOccupied();
    boolean var89 = var84.isOccupied();
    boolean var90 = var75.remove((java.lang.Object)var84);
    boolean var91 = var49.removeAll((java.util.Collection)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test163() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    boolean var9 = var7.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var11 = new lpf.model.core.Value('#');
    var7.addMark(var11);
    lpf.model.core.Value var13 = var7.getDigit();
    java.util.Set var14 = var7.getMarks();
    boolean var15 = var2.equals((java.lang.Object)var14);
    java.lang.String var16 = var2.toString();
    java.lang.String var17 = var2.toString();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var35 = var30.contains((java.lang.Object)'#');
    lpf.model.core.Location var36 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var37 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var39 = new lpf.model.core.Cell(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    int var43 = var40.size();
    int var44 = var40.size();
    var40.clear();
    boolean var46 = var40.isEmpty();
    boolean var47 = var38.equals((java.lang.Object)var40);
    boolean var48 = var40.isEmpty();
    boolean var49 = var2.equals((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(a,-1)"+ "'", var16.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(a,-1)"+ "'", var17.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test164() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var31 = var28.remove((java.lang.Object)(short)100);
    boolean var32 = var24.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    boolean var42 = var28.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var56 = var28.addAll((java.util.Collection)var44);
    boolean var57 = var44.isEmpty();
    boolean var58 = var44.isEmpty();
    java.lang.Object[] var59 = var44.toArray();
    var44.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test165() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    boolean var14 = var9.isEmpty();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    boolean var37 = var16.retainAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var16.addAll((java.util.Collection)var39);
    int var42 = var39.size();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.lang.Object[] var60 = var43.toArray(var59);
    boolean var61 = var39.add((java.lang.Object)var59);
    int var62 = var39.size();
    java.lang.Object[] var63 = var39.toArray();
    var39.clear();
    java.util.Iterator var65 = var39.iterator();
    boolean var66 = var9.add((java.lang.Object)var39);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    java.lang.Object[] var77 = new java.lang.Object[] { var75};
    java.lang.Object[] var78 = var71.toArray(var77);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var71.retainAll((java.util.Collection)var79);
    java.lang.Object[] var83 = new java.lang.Object[] { var82};
    java.lang.Object[] var84 = var67.toArray(var83);
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    boolean var87 = var85.retainAll((java.util.Collection)var86);
    boolean var88 = var67.containsAll((java.util.Collection)var85);
    int var89 = var67.size();
    int var90 = var67.size();
    int var91 = var67.size();
    var67.clear();
    boolean var93 = var9.contains((java.lang.Object)var67);
    java.lang.Object[] var94 = var67.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test166() throws Throwable {

    lpf.model.core.Location var3 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    java.lang.Object[] var11 = new java.lang.Object[] { var9};
    java.lang.Object[] var12 = var5.toArray(var11);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var5.retainAll((java.util.Collection)var13);
    boolean var18 = var13.contains((java.lang.Object)'#');
    boolean var19 = var13.isEmpty();
    boolean var20 = var13.isEmpty();
    boolean var21 = var13.isEmpty();
    java.lang.Object[] var22 = var13.toArray();
    int var23 = var13.size();
    java.lang.Object[] var24 = var13.toArray();
    lpf.model.kenken.Cage var25 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var13);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var28);
    lpf.model.core.Value var48 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var50 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var78 = var55.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var79 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var55);
    lpf.model.core.CellsIterator var80 = new lpf.model.core.CellsIterator(var50, 100, 0);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var83);
    var85.clearMarks();
    java.util.Set var87 = var85.getMarks();
    lpf.model.kenken.Cage var88 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var87);
    lpf.model.core.Location var90 = new lpf.model.core.Location(0, '#');
    boolean var91 = var46.contains(var90);
    lpf.model.core.Cell var92 = new lpf.model.core.Cell(var90);
    java.lang.String var93 = var90.toString();
    boolean var94 = var25.contains(var90);
    java.util.Iterator var95 = var25.iterator();
    java.util.Iterator var96 = var25.iterator();
    java.util.Iterator var97 = var25.iterator();
    java.util.Iterator var98 = var25.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var99 = var25.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "(#,0)"+ "'", var93.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test167() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    int var47 = var14.size();
    int var48 = var14.size();
    int var49 = var14.size();
    var14.clear();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    boolean var73 = var52.retainAll((java.util.Collection)var61);
    java.util.Iterator var74 = var52.iterator();
    boolean var75 = var52.isEmpty();
    java.lang.Object[] var76 = var52.toArray();
    boolean var77 = var52.isEmpty();
    boolean var78 = var14.removeAll((java.util.Collection)var52);
    boolean var79 = var52.isEmpty();
    java.lang.Object[] var80 = var52.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test168() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    boolean var20 = var1.contains((java.lang.Object)var14);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.lang.Object[] var48 = var21.toArray(var47);
    java.lang.Object[] var49 = var14.toArray(var47);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var51.toArray(var54);
    var51.clear();
    boolean var57 = var14.removeAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    boolean var80 = var59.retainAll((java.util.Collection)var68);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var59.addAll((java.util.Collection)var82);
    int var85 = var82.size();
    boolean var86 = var14.retainAll((java.util.Collection)var82);
    boolean var87 = var14.isEmpty();
    java.util.Iterator var88 = var14.iterator();
    var14.clear();
    var14.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test169() throws Throwable {

    lpf.model.core.Location var3 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    java.lang.Object[] var11 = new java.lang.Object[] { var9};
    java.lang.Object[] var12 = var5.toArray(var11);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var5.retainAll((java.util.Collection)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    boolean var20 = var5.remove((java.lang.Object)var17);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var21.containsAll((java.util.Collection)var39);
    boolean var43 = var5.add((java.lang.Object)var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var45.addAll((java.util.Collection)var68);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var75 = var72.remove((java.lang.Object)(short)100);
    boolean var76 = var68.retainAll((java.util.Collection)var72);
    boolean var77 = var5.removeAll((java.util.Collection)var72);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 1, (java.util.Collection)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var79 = var78.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test170() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var59 = var54.contains((java.lang.Object)'#');
    lpf.model.core.Location var60 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Value var61 = new lpf.model.core.Value('#');
    lpf.model.core.Location var62 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var63 = new lpf.model.core.Cell(var62);
    lpf.model.core.Value var64 = var63.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test171() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    boolean var38 = var4.isOccupied();
    boolean var39 = var4.isOccupied();
    java.util.Set var40 = var4.getMarks();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    boolean var53 = var42.retainAll((java.util.Collection)var50);
    java.util.Iterator var54 = var50.iterator();
    var50.clear();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    java.lang.Object[] var69 = var65.toArray();
    boolean var70 = var50.removeAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.lang.Object[] var76 = var72.toArray(var75);
    var72.clear();
    var72.clear();
    java.lang.Object[] var79 = var72.toArray();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.containsAll((java.util.Collection)var80);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    java.lang.Object[] var88 = new java.lang.Object[] { var87};
    java.lang.Object[] var89 = var85.toArray(var88);
    var85.clear();
    var85.clear();
    java.lang.Object[] var92 = var85.toArray();
    boolean var93 = var80.add((java.lang.Object)var85);
    boolean var94 = var85.isEmpty();
    boolean var95 = var50.add((java.lang.Object)var85);
    java.lang.Object[] var96 = var50.toArray();
    boolean var97 = var4.equals((java.lang.Object)var96);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test172() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var2.addAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var30.toArray(var46);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var30);
    boolean var49 = var25.remove((java.lang.Object)var30);
    boolean var50 = var25.isEmpty();
    java.util.Iterator var51 = var25.iterator();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var53.addAll((java.util.Collection)var76);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    java.lang.Object[] var88 = var76.toArray(var87);
    boolean var89 = var25.add((java.lang.Object)var76);
    boolean var90 = var76.isEmpty();
    java.util.Iterator var91 = var76.iterator();
    var76.clear();
    boolean var93 = var0.removeAll((java.util.Collection)var76);
    java.lang.Object[] var94 = var0.toArray();
    java.util.Iterator var95 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test173() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Value var10 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var12 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    boolean var38 = var17.retainAll((java.util.Collection)var26);
    boolean var40 = var17.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var17);
    lpf.model.core.CellsIterator var42 = new lpf.model.core.CellsIterator(var12, 100, 0);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    lpf.model.core.Cell var47 = new lpf.model.core.Cell(var45);
    var47.clearMarks();
    java.util.Set var49 = var47.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var49);
    lpf.model.core.Value var51 = new lpf.model.core.Value('#');
    var4.setDigit(var51);
    java.util.Set var53 = var4.getMarks();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var73 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var75 = new lpf.model.core.Value('#');
    lpf.model.core.Value var76 = new lpf.model.core.Value('#');
    var4.addMark(var76);
    var4.clearMarks();
    boolean var79 = var4.isOccupied();
    java.util.Set var80 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test174() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.lang.Object[] var65 = var61.toArray(var64);
    var61.clear();
    boolean var67 = var48.contains((java.lang.Object)var61);
    boolean var68 = var14.addAll((java.util.Collection)var61);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    lpf.model.core.Cell var73 = new lpf.model.core.Cell(var71);
    var73.clearMarks();
    var73.clearMarks();
    boolean var76 = var14.add((java.lang.Object)var73);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.kenken.InvalidKenKenPuzzleException var80 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var81 = var80.toString();
    java.lang.String var82 = var80.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var83 = new lpf.model.kenken.InvalidKenKenPuzzleException(var82);
    boolean var84 = var77.add((java.lang.Object)var83);
    java.lang.String var85 = var83.toString();
    java.lang.String var86 = var83.toString();
    boolean var87 = var14.remove((java.lang.Object)var83);
    java.lang.String var88 = var83.toString();
    java.lang.String var89 = var83.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var81.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var85.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var86.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var88.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var89.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));

  }

  public void test175() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    java.util.Iterator var50 = var24.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var51 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var54 = new lpf.model.kenken.InvalidKenKenPuzzleException(var53);
    boolean var55 = var24.contains((java.lang.Object)var54);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    lpf.model.core.Cell var77 = new lpf.model.core.Cell(var75);
    lpf.model.core.Value var79 = new lpf.model.core.Value('#');
    var77.setDigit(var79);
    var77.clearMarks();
    lpf.model.core.Value var83 = new lpf.model.core.Value('#');
    var77.removeMark(var83);
    boolean var85 = var77.isOccupied();
    var77.clearDigit();
    boolean var87 = var77.isOccupied();
    boolean var88 = var72.equals((java.lang.Object)var77);
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var72);
    java.lang.String var90 = var72.toString();
    java.lang.String var91 = var72.toString();
    boolean var92 = var24.remove((java.lang.Object)var72);
    int var93 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var52.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var53.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(#,100)"+ "'", var90.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(#,100)"+ "'", var91.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test176() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    java.lang.Object[] var27 = var23.toArray();
    int var28 = var23.size();
    boolean var29 = var1.add((java.lang.Object)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.kenken.InvalidKenKenPuzzleException var33 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var36 = new lpf.model.kenken.InvalidKenKenPuzzleException(var35);
    boolean var37 = var30.add((java.lang.Object)var36);
    boolean var38 = var1.retainAll((java.util.Collection)var30);
    java.util.Iterator var39 = var30.iterator();
    java.lang.Object[] var40 = var30.toArray();
    boolean var41 = var30.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var34.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var35.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test177() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var39 = var18.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var18.addAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    java.lang.Object[] var53 = var41.toArray(var52);
    boolean var54 = var1.addAll((java.util.Collection)var41);
    boolean var55 = var41.isEmpty();
    java.util.Iterator var56 = var41.iterator();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.lang.Object[] var76 = var59.toArray(var75);
    lpf.model.kenken.Cage var77 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var59);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    lpf.model.core.Cell var82 = new lpf.model.core.Cell(var80);
    boolean var83 = var77.contains(var80);
    boolean var84 = var41.remove((java.lang.Object)var80);
    java.lang.Object[] var85 = var41.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test178() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    int var21 = var2.size();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var36 = var31.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    boolean var46 = var31.remove((java.lang.Object)var38);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.lang.Object[] var66 = var49.toArray(var65);
    lpf.model.kenken.Cage var67 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var49);
    int var68 = var49.size();
    boolean var69 = var31.retainAll((java.util.Collection)var49);
    int var70 = var31.size();
    boolean var71 = var2.containsAll((java.util.Collection)var31);
    int var72 = var2.size();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    boolean var87 = var82.contains((java.lang.Object)'#');
    lpf.model.core.Location var88 = new lpf.model.core.Location(var72, '#');
    java.lang.String var89 = var88.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var90 = new lpf.model.kenken.InvalidKenKenPuzzleException(var89);
    lpf.model.kenken.InvalidKenKenPuzzleException var91 = new lpf.model.kenken.InvalidKenKenPuzzleException(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(#,0)"+ "'", var89.equals("(#,0)"));

  }

  public void test179() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    boolean var20 = var1.contains((java.lang.Object)var14);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.lang.Object[] var38 = var21.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.lang.Object[] var48 = var21.toArray(var47);
    java.lang.Object[] var49 = var14.toArray(var47);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var51.toArray(var54);
    var51.clear();
    boolean var57 = var14.removeAll((java.util.Collection)var51);
    var51.clear();
    var51.clear();
    java.util.Iterator var60 = var51.iterator();
    var51.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test180() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var25);
    java.lang.String var28 = var25.toString();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    boolean var43 = var38.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    boolean var53 = var38.remove((java.lang.Object)var45);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var56.toArray(var72);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var56);
    int var75 = var56.size();
    boolean var76 = var38.retainAll((java.util.Collection)var56);
    java.util.Iterator var77 = var38.iterator();
    java.lang.Object[] var78 = var38.toArray();
    boolean var79 = var25.equals((java.lang.Object)var78);
    java.lang.Object[] var80 = var9.toArray(var78);
    java.util.Iterator var81 = var9.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test181() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var53 = var50.remove((java.lang.Object)(short)100);
    boolean var54 = var24.containsAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var77 = var56.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    java.lang.Object[] var85 = new java.lang.Object[] { var83};
    java.lang.Object[] var86 = var79.toArray(var85);
    boolean var87 = var56.addAll((java.util.Collection)var79);
    var56.clear();
    var56.clear();
    java.util.Iterator var90 = var56.iterator();
    java.lang.Object[] var91 = var56.toArray();
    var56.clear();
    java.util.Iterator var93 = var56.iterator();
    boolean var94 = var50.removeAll((java.util.Collection)var56);
    int var95 = var56.size();
    java.lang.Object[] var96 = var56.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test182() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var56 = var35.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    boolean var66 = var35.addAll((java.util.Collection)var58);
    boolean var67 = var22.addAll((java.util.Collection)var35);
    int var68 = var35.size();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    boolean var78 = var70.isEmpty();
    boolean var79 = var70.isEmpty();
    lpf.model.kenken.InvalidKenKenPuzzleException var81 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var82 = var81.toString();
    java.lang.String var83 = var81.toString();
    boolean var84 = var70.contains((java.lang.Object)var83);
    lpf.model.kenken.Cage var85 = new lpf.model.kenken.Cage('a', var68, (java.util.Collection)var70);
    lpf.model.core.Value var86 = new lpf.model.core.Value('a');
    lpf.model.core.Value var87 = new lpf.model.core.Value('a');
    lpf.model.core.Value var88 = new lpf.model.core.Value('a');
    lpf.model.core.Value var89 = new lpf.model.core.Value('a');
    lpf.model.core.Value var90 = new lpf.model.core.Value('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var83.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test183() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    lpf.model.core.Value var56 = new lpf.model.core.Value('#');
    var54.setDigit(var56);
    boolean var58 = var54.isOccupied();
    boolean var59 = var54.isOccupied();
    lpf.model.kenken.InvalidKenKenPuzzleException var61 = new lpf.model.kenken.InvalidKenKenPuzzleException("hi!");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    boolean var64 = var54.equals((java.lang.Object)var61);
    var54.clearMarks();
    boolean var66 = var54.isOccupied();
    boolean var67 = var24.remove((java.lang.Object)var54);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { var85};
    java.lang.Object[] var87 = var70.toArray(var86);
    lpf.model.kenken.Cage var88 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var70);
    int var89 = var70.size();
    lpf.model.core.Location var91 = new lpf.model.core.Location(var89, '#');
    lpf.model.core.Value var92 = new lpf.model.core.Value('#');
    var54.removeMark(var92);
    boolean var94 = var54.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var62.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var63.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test184() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    lpf.model.core.Cell var12 = new lpf.model.core.Cell(var10);
    lpf.model.core.Value var14 = new lpf.model.core.Value('#');
    var12.setDigit(var14);
    var4.removeMark(var14);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.lang.Object[] var36 = var19.toArray(var35);
    lpf.model.kenken.Cage var37 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var19);
    lpf.model.core.Value var38 = new lpf.model.core.Value('a');
    lpf.model.core.Value var39 = new lpf.model.core.Value('a');
    lpf.model.core.Value var40 = new lpf.model.core.Value('a');
    lpf.model.core.Cell[][] var42 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var49.retainAll((java.util.Collection)var57);
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.lang.Object[] var62 = var45.toArray(var61);
    lpf.model.kenken.Cage var63 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var45);
    int var64 = var45.size();
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var68 = new lpf.model.core.CellsIterator(var42, var64, 1);
    lpf.model.core.Location var70 = new lpf.model.core.Location(var64, ' ');
    boolean var71 = var40.equals((java.lang.Object)var64);
    var4.addMark(var40);
    java.util.Set var73 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test185() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.util.Iterator var1 = var0.iterator();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = var14.toArray();
    java.lang.Object[] var19 = var3.toArray(var18);
    boolean var20 = var0.removeAll((java.util.Collection)var3);
    int var21 = var0.size();
    java.util.Iterator var22 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test186() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    java.lang.Object[] var39 = var14.toArray();
    boolean var40 = var14.isEmpty();
    boolean var41 = var1.removeAll((java.util.Collection)var14);
    int var42 = var1.size();
    java.util.Iterator var43 = var1.iterator();
    java.lang.Object[] var44 = var1.toArray();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    java.lang.Object[] var58 = var54.toArray();
    boolean var59 = var54.isEmpty();
    int var60 = var54.size();
    boolean var61 = var1.removeAll((java.util.Collection)var54);
    var54.clear();
    java.lang.Object[] var63 = var54.toArray();
    java.lang.Object[] var64 = var54.toArray();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var87 = var66.retainAll((java.util.Collection)var75);
    java.lang.Object[] var88 = var66.toArray();
    int var89 = var66.size();
    var66.clear();
    boolean var91 = var54.removeAll((java.util.Collection)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test187() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    java.util.Iterator var11 = var1.iterator();
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    lpf.model.core.Cell var16 = new lpf.model.core.Cell(var14);
    var16.clearMarks();
    java.util.Set var18 = var16.getMarks();
    lpf.model.core.Value var19 = var16.getDigit();
    boolean var20 = var16.isOccupied();
    boolean var21 = var16.isOccupied();
    boolean var22 = var1.add((java.lang.Object)var16);
    java.util.Iterator var23 = var1.iterator();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    boolean var56 = var25.addAll((java.util.Collection)var48);
    var25.clear();
    var25.clear();
    java.util.Iterator var59 = var25.iterator();
    boolean var60 = var25.isEmpty();
    java.lang.Object[] var61 = var25.toArray();
    java.lang.Object[] var62 = var1.toArray(var61);
    boolean var63 = var1.isEmpty();
    java.util.Iterator var64 = var1.iterator();
    int var65 = var1.size();
    boolean var66 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test188() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var75 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var51);
    java.lang.Object[] var76 = var51.toArray();
    int var77 = var51.size();
    lpf.model.core.Location var79 = new lpf.model.core.Location(var77, ' ');
    boolean var80 = var20.contains(var79);
    java.util.Iterator var81 = var20.iterator();
    java.util.Iterator var82 = var20.iterator();
    java.util.Iterator var83 = var20.iterator();
    java.util.Iterator var84 = var20.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test189() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    java.util.Iterator var24 = var23.iterator();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = var37.toArray();
    java.lang.Object[] var42 = var26.toArray(var41);
    boolean var43 = var23.removeAll((java.util.Collection)var26);
    boolean var44 = var9.contains((java.lang.Object)var23);
    lpf.model.core.Cell[][] var46 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var75 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var51);
    lpf.model.core.CellsIterator var76 = new lpf.model.core.CellsIterator(var46, 100, 0);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var81 = new lpf.model.core.CellsIterator(var46, 1, (-1));
    boolean var82 = var81.hasNext();
    boolean var83 = var81.hasNext();
    boolean var84 = var81.hasNext();
    boolean var85 = var9.remove((java.lang.Object)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var81.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test190() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.util.Iterator var28 = var27.iterator();
    java.util.Iterator var29 = var27.iterator();
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    java.util.Iterator var32 = var27.iterator();
    java.util.Iterator var33 = var27.iterator();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    boolean var50 = var45.contains((java.lang.Object)'#');
    lpf.model.core.Location var51 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var52 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var77 = var56.retainAll((java.util.Collection)var65);
    java.lang.Object[] var78 = var56.toArray();
    java.util.Iterator var79 = var56.iterator();
    lpf.model.kenken.Cage var80 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var56);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    lpf.model.core.Location var86 = new lpf.model.core.Location(1, '4');
    java.lang.String var87 = var86.toString();
    java.lang.Object[] var88 = new java.lang.Object[] { var86};
    java.lang.Object[] var89 = var82.toArray(var88);
    lpf.model.kenken.Cage var90 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var82);
    lpf.model.core.Location var93 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Location var94 = new lpf.model.core.Location(0, 'a');
    boolean var95 = var27.contains(var94);
    java.util.Iterator var96 = var27.iterator();
    java.util.Iterator var97 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(4,1)"+ "'", var87.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test191() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    boolean var39 = var1.removeAll((java.util.Collection)var14);
    java.util.Iterator var40 = var1.iterator();
    java.util.Iterator var41 = var1.iterator();
    int var42 = var1.size();
    boolean var43 = var1.isEmpty();
    boolean var44 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test192() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    int var54 = var39.size();
    int var55 = var39.size();
    boolean var56 = var39.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test193() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var16);
    java.lang.String var22 = var16.toString();
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var25);
    var27.clearMarks();
    boolean var30 = var27.equals((java.lang.Object)(short)0);
    java.util.Set var31 = var27.getMarks();
    var27.clearMarks();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    boolean var57 = var34.contains((java.lang.Object)100);
    lpf.model.core.Location var59 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Value var60 = new lpf.model.core.Value('a');
    var27.removeMark(var60);
    var27.clearDigit();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var87 = var66.retainAll((java.util.Collection)var75);
    boolean var89 = var66.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var90 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var66);
    java.util.Iterator var91 = var90.iterator();
    java.util.Iterator var92 = var90.iterator();
    boolean var93 = var27.equals((java.lang.Object)var90);
    java.util.Set var94 = var27.getMarks();
    boolean var95 = var16.equals((java.lang.Object)var94);
    lpf.model.core.Cell var96 = new lpf.model.core.Cell(var16);
    
    // Checks the contract:  equals-hashcode on var21 and var96
    assertTrue("Contract failed: equals-hashcode on var21 and var96", var21.equals(var96) ? var21.hashCode() == var96.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var96 and var21
    assertTrue("Contract failed: equals-hashcode on var96 and var21", var96.equals(var21) ? var96.hashCode() == var21.hashCode() : true);

  }

  public void test194() throws Throwable {

    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    boolean var17 = var12.contains((java.lang.Object)'#');
    lpf.model.core.Location var18 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var19 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    int var25 = var22.size();
    int var26 = var22.size();
    var22.clear();
    boolean var28 = var22.isEmpty();
    boolean var29 = var20.equals((java.lang.Object)var22);
    boolean var30 = var22.isEmpty();
    boolean var31 = var22.isEmpty();
    java.util.Iterator var32 = var22.iterator();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var33.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var33.containsAll((java.util.Collection)var51);
    java.lang.Object[] var55 = var33.toArray();
    var33.clear();
    java.lang.Object[] var57 = var33.toArray();
    int var58 = var33.size();
    java.lang.Object[] var59 = var33.toArray();
    boolean var60 = var33.isEmpty();
    boolean var61 = var22.remove((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test195() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var4 = var3.getDigit();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var6.addAll((java.util.Collection)var29);
    int var32 = var29.size();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var33.toArray(var49);
    boolean var51 = var29.add((java.lang.Object)var49);
    int var52 = var29.size();
    int var53 = var29.size();
    lpf.model.core.Value var55 = new lpf.model.core.Value('a');
    lpf.model.core.Location var56 = new lpf.model.core.Location(var53, 'a');
    lpf.model.core.Value var57 = new lpf.model.core.Value('a');
    var3.removeMark(var57);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var77 = var72.contains((java.lang.Object)'#');
    boolean var78 = var72.isEmpty();
    boolean var79 = var72.isEmpty();
    boolean var80 = var72.isEmpty();
    java.lang.Object[] var81 = var72.toArray();
    int var82 = var72.size();
    java.lang.Object[] var83 = var72.toArray();
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var72);
    boolean var85 = var3.equals((java.lang.Object)'4');
    var3.clearDigit();
    java.util.Set var87 = var3.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test196() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    java.lang.Object[] var25 = var3.toArray();
    java.util.Iterator var26 = var3.iterator();
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    java.util.Iterator var29 = var3.iterator();
    boolean var30 = var3.isEmpty();
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    lpf.model.core.Cell var35 = new lpf.model.core.Cell(var33);
    var35.clearMarks();
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    lpf.model.core.Cell var41 = new lpf.model.core.Cell(var39);
    lpf.model.core.Value var43 = new lpf.model.core.Value('#');
    var41.setDigit(var43);
    var35.addMark(var43);
    lpf.model.core.Value var46 = var35.getDigit();
    var35.clearDigit();
    java.util.Set var48 = var35.getMarks();
    lpf.model.core.Value var49 = var35.getDigit();
    java.util.Set var50 = var35.getMarks();
    var35.clearDigit();
    lpf.model.core.Value var52 = var35.getDigit();
    boolean var53 = var3.remove((java.lang.Object)var35);
    lpf.model.core.Value var54 = var35.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test197() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    var33.clear();
    int var38 = var33.size();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.util.Iterator var48 = var40.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.lang.Object[] var50 = var49.toArray();
    boolean var51 = var40.add((java.lang.Object)var49);
    boolean var52 = var40.isEmpty();
    boolean var53 = var40.isEmpty();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('#', var38, (java.util.Collection)var40);
    java.lang.Object[] var55 = var40.toArray();
    int var56 = var40.size();
    java.util.Iterator var57 = var40.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test198() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.util.Iterator var28 = var27.iterator();
    java.util.Iterator var29 = var27.iterator();
    java.util.Iterator var30 = var27.iterator();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location((-1), '#');
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    boolean var52 = var27.contains(var49);
    java.util.Iterator var53 = var27.iterator();
    java.util.Iterator var54 = var27.iterator();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var73 = new lpf.model.core.Location((-1), '#');
    java.lang.String var74 = var73.toString();
    java.lang.String var75 = var73.toString();
    lpf.model.core.Cell var76 = new lpf.model.core.Cell(var73);
    boolean var77 = var27.contains(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var78 = var27.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(#,-1)"+ "'", var50.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(#,-1)"+ "'", var51.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(#,-1)"+ "'", var74.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(#,-1)"+ "'", var75.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test199() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    boolean var15 = var9.isEmpty();
    boolean var16 = var9.isEmpty();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.lang.Object[] var22 = var18.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.lang.Object[] var41 = var37.toArray(var40);
    var37.clear();
    boolean var43 = var24.contains((java.lang.Object)var37);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.lang.Object[] var61 = var44.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    java.lang.Object[] var71 = var44.toArray(var70);
    java.lang.Object[] var72 = var37.toArray(var70);
    java.lang.Object[] var73 = var18.toArray(var72);
    java.lang.Object[] var74 = var18.toArray();
    boolean var75 = var9.removeAll((java.util.Collection)var18);
    var18.clear();
    boolean var77 = var18.isEmpty();
    boolean var79 = var18.add((java.lang.Object)1.0d);
    var18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test200() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Value var13 = var4.getDigit();
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    lpf.model.core.Cell var18 = new lpf.model.core.Cell(var16);
    var18.clearMarks();
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    lpf.model.core.Cell var24 = new lpf.model.core.Cell(var22);
    lpf.model.core.Value var26 = new lpf.model.core.Value('#');
    var24.setDigit(var26);
    var18.addMark(var26);
    lpf.model.core.Value var29 = var18.getDigit();
    var18.clearDigit();
    java.util.Set var31 = var18.getMarks();
    lpf.model.core.Value var32 = var18.getDigit();
    java.util.Set var33 = var18.getMarks();
    var18.clearDigit();
    lpf.model.core.Value var35 = var18.getDigit();
    java.util.Set var36 = var18.getMarks();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    boolean var53 = var48.contains((java.lang.Object)'#');
    lpf.model.core.Location var54 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var55 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    boolean var80 = var59.retainAll((java.util.Collection)var68);
    java.lang.Object[] var81 = var59.toArray();
    java.util.Iterator var82 = var59.iterator();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var59);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    lpf.model.core.Location var89 = new lpf.model.core.Location(1, '4');
    java.lang.String var90 = var89.toString();
    java.lang.Object[] var91 = new java.lang.Object[] { var89};
    java.lang.Object[] var92 = var85.toArray(var91);
    lpf.model.kenken.Cage var93 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var85);
    lpf.model.core.Value var94 = new lpf.model.core.Value('#');
    var18.removeMark(var94);
    var4.addMark(var94);
    
    // Checks the contract:  equals-hashcode on var4 and var18
    assertTrue("Contract failed: equals-hashcode on var4 and var18", var4.equals(var18) ? var4.hashCode() == var18.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var18 and var4
    assertTrue("Contract failed: equals-hashcode on var18 and var4", var18.equals(var4) ? var18.hashCode() == var4.hashCode() : true);

  }

  public void test201() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    java.util.Iterator var48 = var24.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.lang.Object[] var66 = var49.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    java.lang.Object[] var76 = var49.toArray(var75);
    java.lang.Object[] var77 = var24.toArray(var76);
    java.lang.Object[] var78 = var24.toArray();
    var24.clear();
    java.lang.Object[] var80 = var24.toArray();
    java.util.Iterator var81 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test202() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var10.toArray(var39);
    java.lang.Object[] var41 = var1.toArray(var39);
    java.util.Iterator var42 = var1.iterator();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    boolean var88 = var57.addAll((java.util.Collection)var80);
    boolean var89 = var44.addAll((java.util.Collection)var57);
    java.lang.Object[] var90 = var57.toArray();
    int var91 = var57.size();
    java.util.Iterator var92 = var57.iterator();
    boolean var93 = var1.add((java.lang.Object)var57);
    var1.clear();
    var1.clear();
    java.lang.Object[] var96 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var36.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test203() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    java.util.Set var10 = var4.getMarks();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    int var24 = var20.size();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    boolean var60 = var39.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    boolean var70 = var39.addAll((java.util.Collection)var62);
    boolean var71 = var26.addAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    int var85 = var81.size();
    boolean var86 = var26.retainAll((java.util.Collection)var81);
    boolean var87 = var20.removeAll((java.util.Collection)var26);
    boolean var88 = var4.equals((java.lang.Object)var20);
    var4.clearMarks();
    var4.clearMarks();
    boolean var91 = var4.isOccupied();
    java.util.Set var92 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test204() throws Throwable {

    lpf.model.core.Location var3 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    java.lang.Object[] var11 = new java.lang.Object[] { var9};
    java.lang.Object[] var12 = var5.toArray(var11);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var5.retainAll((java.util.Collection)var13);
    boolean var18 = var13.contains((java.lang.Object)'#');
    boolean var19 = var13.isEmpty();
    boolean var20 = var13.isEmpty();
    boolean var21 = var13.isEmpty();
    java.lang.Object[] var22 = var13.toArray();
    int var23 = var13.size();
    java.lang.Object[] var24 = var13.toArray();
    lpf.model.kenken.Cage var25 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var13);
    boolean var26 = var13.isEmpty();
    boolean var27 = var13.isEmpty();
    var13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test205() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var14 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    lpf.model.kenken.InvalidKenKenPuzzleException var15 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    lpf.model.kenken.InvalidKenKenPuzzleException var16 = new lpf.model.kenken.InvalidKenKenPuzzleException(var13);
    boolean var17 = var4.equals((java.lang.Object)var16);
    java.lang.String var18 = var16.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var19 = new lpf.model.kenken.InvalidKenKenPuzzleException(var18);
    java.lang.String var20 = var19.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var21 = new lpf.model.kenken.InvalidKenKenPuzzleException(var20);
    java.lang.String var22 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var18.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var20.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var22.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test206() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.lang.String var48 = var44.toString();
    lpf.model.core.Cell var49 = new lpf.model.core.Cell(var44);
    java.util.Set var50 = var49.getMarks();
    var49.clearMarks();
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    lpf.model.core.Cell var56 = new lpf.model.core.Cell(var54);
    lpf.model.core.Value var58 = new lpf.model.core.Value('#');
    var56.setDigit(var58);
    var56.clearMarks();
    lpf.model.core.Value var62 = new lpf.model.core.Value('#');
    var56.removeMark(var62);
    boolean var64 = var56.isOccupied();
    java.util.Set var65 = var56.getMarks();
    lpf.model.core.Value var66 = var56.getDigit();
    var49.addMark(var66);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    boolean var83 = var78.contains((java.lang.Object)'#');
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, '#');
    java.lang.String var85 = var84.toString();
    boolean var86 = var49.equals((java.lang.Object)var85);
    lpf.model.kenken.InvalidKenKenPuzzleException var87 = new lpf.model.kenken.InvalidKenKenPuzzleException(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(#,100)"+ "'", var85.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test207() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.Value var51 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var52 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var53 = new lpf.model.core.Location(var29, ' ');
    lpf.model.core.Location var56 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var61 = var58.remove((java.lang.Object)(short)100);
    boolean var62 = var56.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var63 = new lpf.model.core.Cell(var56);
    var63.clearMarks();
    var63.clearMarks();
    java.util.Set var66 = var63.getMarks();
    java.util.Set var67 = var63.getMarks();
    boolean var68 = var63.isOccupied();
    boolean var69 = var63.isOccupied();
    boolean var70 = var53.equals((java.lang.Object)var63);
    var63.clearMarks();
    boolean var72 = var63.isOccupied();
    boolean var73 = var63.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test208() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var31 = var28.remove((java.lang.Object)(short)100);
    boolean var32 = var24.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    boolean var42 = var28.retainAll((java.util.Collection)var34);
    java.util.Iterator var43 = var34.iterator();
    var34.clear();
    boolean var45 = var34.isEmpty();
    lpf.model.kenken.InvalidKenKenPuzzleException var47 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var48 = var47.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var49 = new lpf.model.kenken.InvalidKenKenPuzzleException(var48);
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var52 = new lpf.model.kenken.InvalidKenKenPuzzleException(var51);
    java.lang.String var53 = var52.toString();
    boolean var54 = var34.contains((java.lang.Object)var53);
    lpf.model.kenken.InvalidKenKenPuzzleException var55 = new lpf.model.kenken.InvalidKenKenPuzzleException(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var48.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var50.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var51.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var53.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test209() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.lang.Object[] var54 = var50.toArray(var53);
    java.lang.Object[] var55 = var24.toArray(var54);
    java.lang.Object[] var56 = var24.toArray();
    var24.clear();
    boolean var59 = var24.contains((java.lang.Object)"hi!");
    int var60 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test210() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    int var13 = var9.size();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var15.remove((java.lang.Object)var27);
    boolean var31 = var9.containsAll((java.util.Collection)var15);
    int var32 = var15.size();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    boolean var57 = var34.contains((java.lang.Object)100);
    java.util.Iterator var58 = var34.iterator();
    boolean var59 = var15.containsAll((java.util.Collection)var34);
    var15.clear();
    java.util.Iterator var61 = var15.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test211() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    boolean var27 = var20.contains(var23);
    java.lang.String var28 = var23.toString();
    lpf.model.core.Cell var29 = new lpf.model.core.Cell(var23);
    var29.clearDigit();
    var29.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));

  }

  public void test212() throws Throwable {

    lpf.model.kenken.InvalidKenKenPuzzleException var1 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var2 = var1.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var3 = new lpf.model.kenken.InvalidKenKenPuzzleException(var2);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    java.lang.String var6 = var3.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var7 = new lpf.model.kenken.InvalidKenKenPuzzleException(var6);
    java.lang.String var8 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var2.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var4.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var5.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var6.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var8.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));

  }

  public void test213() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    java.lang.Object[] var39 = var14.toArray();
    boolean var40 = var14.isEmpty();
    boolean var41 = var1.removeAll((java.util.Collection)var14);
    int var42 = var1.size();
    java.util.Iterator var43 = var1.iterator();
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    java.lang.String var50 = var46.toString();
    boolean var51 = var1.remove((java.lang.Object)var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.lang.Object[] var57 = var53.toArray(var56);
    var53.clear();
    java.util.Iterator var59 = var53.iterator();
    java.util.Iterator var60 = var53.iterator();
    boolean var61 = var1.containsAll((java.util.Collection)var53);
    java.lang.Object[] var62 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test214() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    var9.clear();
    int var15 = var9.size();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var40 = var19.retainAll((java.util.Collection)var28);
    boolean var42 = var19.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var43 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var19);
    lpf.model.core.Location var44 = new lpf.model.core.Location(var15, ' ');
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    int var48 = var45.size();
    int var49 = var45.size();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var66 = var61.contains((java.lang.Object)'#');
    lpf.model.core.Location var67 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var68 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var69 = new lpf.model.core.Value('#');
    lpf.model.core.Value var70 = new lpf.model.core.Value('#');
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    lpf.model.core.Value var72 = new lpf.model.core.Value('#');
    lpf.model.core.Location var73 = new lpf.model.core.Location(var49, '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(var15, '#');
    lpf.model.core.Cell var75 = new lpf.model.core.Cell(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test215() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var5 = new lpf.model.kenken.InvalidKenKenPuzzleException(var4);
    lpf.model.kenken.InvalidKenKenPuzzleException var6 = new lpf.model.kenken.InvalidKenKenPuzzleException(var4);
    lpf.model.kenken.InvalidKenKenPuzzleException var7 = new lpf.model.kenken.InvalidKenKenPuzzleException(var4);
    lpf.model.kenken.InvalidKenKenPuzzleException var8 = new lpf.model.kenken.InvalidKenKenPuzzleException(var4);
    java.lang.String var9 = var8.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var10 = new lpf.model.kenken.InvalidKenKenPuzzleException(var9);
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(4,1)"+ "'", var4.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var9.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var11.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test216() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    boolean var37 = var6.addAll((java.util.Collection)var29);
    var6.clear();
    boolean var39 = var4.equals((java.lang.Object)var6);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var54 = var49.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    boolean var64 = var49.remove((java.lang.Object)var56);
    boolean var65 = var6.retainAll((java.util.Collection)var49);
    var6.clear();
    int var67 = var6.size();
    java.lang.Object[] var68 = var6.toArray();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    java.lang.Object[] var85 = new java.lang.Object[] { var83};
    java.lang.Object[] var86 = var79.toArray(var85);
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    boolean var89 = var87.retainAll((java.util.Collection)var88);
    boolean var90 = var79.retainAll((java.util.Collection)var87);
    boolean var91 = var70.retainAll((java.util.Collection)var79);
    boolean var93 = var70.contains((java.lang.Object)100);
    boolean var94 = var6.containsAll((java.util.Collection)var70);
    int var95 = var70.size();
    boolean var97 = var70.contains((java.lang.Object)0.0f);
    boolean var98 = var70.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test217() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var41.toArray(var44);
    var41.clear();
    boolean var47 = var28.contains((java.lang.Object)var41);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var41);
    java.util.Iterator var49 = var48.iterator();
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    boolean var55 = var48.contains(var52);
    java.lang.String var56 = var52.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var57 = new lpf.model.kenken.InvalidKenKenPuzzleException(var56);
    java.lang.String var58 = var57.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var58.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test218() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    boolean var27 = var20.contains(var23);
    java.util.Iterator var28 = var20.iterator();
    java.util.Iterator var29 = var20.iterator();
    java.util.Iterator var30 = var20.iterator();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    java.lang.Object[] var54 = var32.toArray();
    int var55 = var32.size();
    var32.clear();
    int var57 = var32.size();
    int var58 = var32.size();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    boolean var76 = var71.contains((java.lang.Object)'#');
    lpf.model.core.Location var77 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var78 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Location var80 = new lpf.model.core.Location(var58, '#');
    boolean var81 = var20.contains(var80);
    java.util.Iterator var82 = var20.iterator();
    java.util.Iterator var83 = var20.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test219() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Value var6 = var4.getDigit();
    java.util.Set var7 = var4.getMarks();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.lang.Object[] var25 = var8.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var8.toArray(var34);
    lpf.model.core.Value var37 = new lpf.model.core.Value('a');
    boolean var38 = var8.contains((java.lang.Object)var37);
    boolean var39 = var4.equals((java.lang.Object)var37);
    lpf.model.core.Value var41 = new lpf.model.core.Value('#');
    var4.setDigit(var41);
    java.util.Set var43 = var4.getMarks();
    lpf.model.core.Value var44 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test220() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    boolean var15 = var9.isEmpty();
    java.lang.Object[] var16 = var9.toArray();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    boolean var26 = var18.isEmpty();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var46 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var48 = new lpf.model.core.Cell(var47);
    boolean var49 = var18.remove((java.lang.Object)var47);
    boolean var50 = var9.contains((java.lang.Object)var18);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var52.remove((java.lang.Object)var64);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    java.util.Iterator var77 = var69.iterator();
    java.util.Iterator var78 = var69.iterator();
    boolean var79 = var64.containsAll((java.util.Collection)var69);
    boolean var80 = var9.removeAll((java.util.Collection)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test221() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var59 = var54.contains((java.lang.Object)'#');
    lpf.model.core.Location var60 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Value var61 = new lpf.model.core.Value('#');
    lpf.model.core.Location var62 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var63 = new lpf.model.core.Cell(var62);
    lpf.model.core.Cell var64 = new lpf.model.core.Cell(var62);
    
    // Checks the contract:  equals-hashcode on var63 and var64
    assertTrue("Contract failed: equals-hashcode on var63 and var64", var63.equals(var64) ? var63.hashCode() == var64.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var64 and var63
    assertTrue("Contract failed: equals-hashcode on var64 and var63", var64.equals(var63) ? var64.hashCode() == var63.hashCode() : true);

  }

  public void test222() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var6 = var4.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearMarks();
    lpf.model.core.Value var9 = var4.getDigit();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    lpf.model.core.Cell var14 = new lpf.model.core.Cell(var12);
    var14.clearMarks();
    var14.clearMarks();
    boolean var17 = var14.isOccupied();
    lpf.model.core.Location var20 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var25 = var22.remove((java.lang.Object)(short)100);
    boolean var26 = var20.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var20);
    boolean var28 = var27.isOccupied();
    boolean var29 = var27.isOccupied();
    lpf.model.core.Value var30 = var27.getDigit();
    var27.clearDigit();
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    lpf.model.core.Cell var36 = new lpf.model.core.Cell(var34);
    var36.clearMarks();
    boolean var39 = var36.equals((java.lang.Object)(short)0);
    boolean var40 = var36.isOccupied();
    var36.clearMarks();
    lpf.model.core.Value var43 = new lpf.model.core.Value(' ');
    var36.addMark(var43);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    boolean var61 = var56.contains((java.lang.Object)'#');
    lpf.model.core.Location var62 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var63 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var64 = new lpf.model.core.Value('#');
    var36.setDigit(var64);
    var27.removeMark(var64);
    var14.removeMark(var64);
    var4.addMark(var64);
    
    // Checks the contract:  equals-hashcode on var4 and var14
    assertTrue("Contract failed: equals-hashcode on var4 and var14", var4.equals(var14) ? var4.hashCode() == var14.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var14 and var4
    assertTrue("Contract failed: equals-hashcode on var14 and var4", var14.equals(var4) ? var14.hashCode() == var4.hashCode() : true);

  }

  public void test223() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    java.lang.Object[] var14 = var9.toArray();
    var9.clear();
    boolean var16 = var9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test224() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    lpf.model.core.Location var34 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var39 = var36.remove((java.lang.Object)(short)100);
    boolean var40 = var34.equals((java.lang.Object)(short)100);
    boolean var41 = var20.contains(var34);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    java.lang.Object[] var67 = var45.toArray();
    java.util.Iterator var68 = var45.iterator();
    lpf.model.kenken.Cage var69 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var45);
    lpf.model.core.Location var71 = new lpf.model.core.Location(0, '#');
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.lang.Object[] var77 = var73.toArray(var76);
    var73.clear();
    var73.clear();
    java.lang.Object[] var80 = var73.toArray();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.containsAll((java.util.Collection)var81);
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    boolean var87 = var85.retainAll((java.util.Collection)var86);
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    java.lang.Object[] var89 = new java.lang.Object[] { var88};
    java.lang.Object[] var90 = var86.toArray(var89);
    var86.clear();
    var86.clear();
    java.lang.Object[] var93 = var86.toArray();
    boolean var94 = var81.add((java.lang.Object)var86);
    boolean var95 = var86.isEmpty();
    boolean var96 = var71.equals((java.lang.Object)var86);
    java.lang.String var97 = var71.toString();
    lpf.model.core.Cell var98 = new lpf.model.core.Cell(var71);
    boolean var99 = var20.contains(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "(#,0)"+ "'", var97.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test225() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.Value var13 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test226() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    lpf.model.core.Cell var28 = new lpf.model.core.Cell(var26);
    var28.clearMarks();
    java.util.Set var30 = var28.getMarks();
    var28.clearMarks();
    var28.clearDigit();
    var28.clearMarks();
    boolean var34 = var22.add((java.lang.Object)var28);
    boolean var35 = var28.isOccupied();
    java.util.Set var36 = var28.getMarks();
    var28.clearDigit();
    var28.clearMarks();
    boolean var39 = var18.equals((java.lang.Object)var28);
    java.lang.String var40 = var18.toString();
    lpf.model.core.Cell var41 = new lpf.model.core.Cell(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(#,-1)"+ "'", var19.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(#,-1)"+ "'", var20.equals("(#,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(#,-1)"+ "'", var40.equals("(#,-1)"));

  }

  public void test227() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    lpf.model.core.Cell var15 = new lpf.model.core.Cell(var13);
    lpf.model.core.Value var17 = new lpf.model.core.Value('#');
    var15.setDigit(var17);
    var15.clearMarks();
    lpf.model.core.Value var21 = new lpf.model.core.Value('#');
    var15.removeMark(var21);
    var4.addMark(var21);
    java.util.Set var24 = var4.getMarks();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    boolean var46 = var35.retainAll((java.util.Collection)var43);
    boolean var47 = var26.retainAll((java.util.Collection)var35);
    java.lang.Object[] var48 = var26.toArray();
    boolean var49 = var4.equals((java.lang.Object)var48);
    boolean var50 = var4.isOccupied();
    var4.clearMarks();
    java.util.Set var52 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test228() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    boolean var39 = var1.removeAll((java.util.Collection)var14);
    java.util.Iterator var40 = var1.iterator();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    boolean var53 = var42.retainAll((java.util.Collection)var50);
    int var54 = var50.size();
    lpf.model.core.Cell[][] var56 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.lang.Object[] var76 = var59.toArray(var75);
    lpf.model.kenken.Cage var77 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var59);
    int var78 = var59.size();
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var82 = new lpf.model.core.CellsIterator(var56, var78, 1);
    java.lang.Object[] var83 = var50.toArray((java.lang.Object[])var56);
    java.util.Iterator var84 = var50.iterator();
    boolean var85 = var1.addAll((java.util.Collection)var50);
    int var86 = var1.size();
    java.lang.Object[] var87 = var1.toArray();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test229() throws Throwable {

    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    boolean var17 = var12.contains((java.lang.Object)'#');
    lpf.model.core.Location var18 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var19 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var20);
    java.lang.String var22 = var20.toString();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    boolean var68 = var37.addAll((java.util.Collection)var60);
    boolean var69 = var24.addAll((java.util.Collection)var37);
    java.util.Iterator var70 = var37.iterator();
    boolean var71 = var20.equals((java.lang.Object)var70);
    java.lang.String var72 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(#,1)"+ "'", var22.equals("(#,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(#,1)"+ "'", var72.equals("(#,1)"));

  }

  public void test230() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    var0.clear();
    boolean var6 = var0.isEmpty();
    var0.clear();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    java.lang.Object[] var9 = var8.toArray();
    boolean var10 = var8.isEmpty();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    java.lang.Object[] var34 = var12.toArray();
    java.util.Iterator var35 = var12.iterator();
    int var36 = var12.size();
    boolean var37 = var8.addAll((java.util.Collection)var12);
    boolean var38 = var0.addAll((java.util.Collection)var8);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    lpf.model.core.Cell var43 = new lpf.model.core.Cell(var41);
    lpf.model.core.Value var45 = new lpf.model.core.Value('#');
    var43.setDigit(var45);
    var43.clearDigit();
    var43.clearDigit();
    var43.clearDigit();
    var43.clearDigit();
    java.util.Set var51 = var43.getMarks();
    var43.clearDigit();
    boolean var53 = var43.isOccupied();
    java.util.Set var54 = var43.getMarks();
    boolean var55 = var0.retainAll((java.util.Collection)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test231() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    boolean var29 = var18.retainAll((java.util.Collection)var26);
    boolean var31 = var26.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    boolean var41 = var26.remove((java.lang.Object)var33);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    lpf.model.core.Cell var46 = new lpf.model.core.Cell(var44);
    lpf.model.core.Value var48 = new lpf.model.core.Value('#');
    var46.setDigit(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var51.remove((java.lang.Object)var63);
    boolean var67 = var48.equals((java.lang.Object)var51);
    boolean var68 = var26.addAll((java.util.Collection)var51);
    boolean var69 = var1.removeAll((java.util.Collection)var26);
    boolean var70 = var1.isEmpty();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    int var74 = var71.size();
    int var75 = var71.size();
    boolean var76 = var1.containsAll((java.util.Collection)var71);
    java.util.Iterator var77 = var1.iterator();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    boolean var90 = var88.retainAll((java.util.Collection)var89);
    boolean var91 = var80.retainAll((java.util.Collection)var88);
    boolean var93 = var88.contains((java.lang.Object)'#');
    lpf.model.core.Location var94 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var95 = new lpf.model.core.Cell(var94);
    boolean var96 = var95.isOccupied();
    java.util.Set var97 = var95.getMarks();
    boolean var98 = var1.retainAll((java.util.Collection)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test232() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    lpf.model.core.Cell var15 = new lpf.model.core.Cell(var13);
    lpf.model.core.Value var17 = new lpf.model.core.Value('#');
    var15.setDigit(var17);
    var15.clearMarks();
    lpf.model.core.Value var21 = new lpf.model.core.Value('#');
    var15.removeMark(var21);
    var4.addMark(var21);
    java.util.Set var24 = var4.getMarks();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    boolean var46 = var35.retainAll((java.util.Collection)var43);
    boolean var47 = var26.retainAll((java.util.Collection)var35);
    java.lang.Object[] var48 = var26.toArray();
    boolean var49 = var4.equals((java.lang.Object)var48);
    boolean var50 = var4.isOccupied();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test233() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    var33.clear();
    int var38 = var33.size();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    java.util.Iterator var48 = var40.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    java.lang.Object[] var50 = var49.toArray();
    boolean var51 = var40.add((java.lang.Object)var49);
    boolean var52 = var40.isEmpty();
    boolean var53 = var40.isEmpty();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('#', var38, (java.util.Collection)var40);
    boolean var55 = var54.isAdjacent();
    boolean var56 = var54.isAdjacent();
    boolean var57 = var54.isAdjacent();
    boolean var58 = var54.isAdjacent();
    java.util.Iterator var59 = var54.iterator();
    java.util.Iterator var60 = var54.iterator();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var80 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var82 = new lpf.model.core.Cell(var81);
    java.lang.String var83 = var81.toString();
    java.lang.String var84 = var81.toString();
    lpf.model.core.Location var87 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var87);
    boolean var89 = var88.isOccupied();
    var88.clearMarks();
    boolean var91 = var88.isOccupied();
    lpf.model.core.Value var92 = var88.getDigit();
    var88.clearDigit();
    java.util.Set var94 = var88.getMarks();
    java.util.Set var95 = var88.getMarks();
    boolean var96 = var81.equals((java.lang.Object)var88);
    boolean var97 = var54.contains(var81);
    lpf.model.core.Cell var98 = new lpf.model.core.Cell(var81);
    
    // Checks the contract:  equals-hashcode on var82 and var98
    assertTrue("Contract failed: equals-hashcode on var82 and var98", var82.equals(var98) ? var82.hashCode() == var98.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var98 and var82
    assertTrue("Contract failed: equals-hashcode on var98 and var82", var98.equals(var82) ? var98.hashCode() == var82.hashCode() : true);

  }

  public void test234() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.kenken.InvalidKenKenPuzzleException var51 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var54 = new lpf.model.kenken.InvalidKenKenPuzzleException(var53);
    boolean var55 = var48.add((java.lang.Object)var54);
    boolean var56 = var44.equals((java.lang.Object)var55);
    lpf.model.core.Cell var57 = new lpf.model.core.Cell(var44);
    java.lang.String var58 = var44.toString();
    java.lang.String var59 = var44.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var60 = new lpf.model.kenken.InvalidKenKenPuzzleException(var59);
    java.lang.String var61 = var60.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var52.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var53.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var61.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test235() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.util.Iterator var28 = var27.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    java.util.Iterator var42 = var38.iterator();
    var38.clear();
    int var44 = var38.size();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    boolean var69 = var48.retainAll((java.util.Collection)var57);
    boolean var71 = var48.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var72 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var48);
    lpf.model.core.Location var73 = new lpf.model.core.Location(var44, ' ');
    boolean var74 = var27.contains(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var75 = var27.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test236() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.lang.Object[] var52 = var30.toArray();
    java.util.Iterator var53 = var30.iterator();
    boolean var54 = var0.containsAll((java.util.Collection)var30);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    lpf.model.core.Cell var65 = new lpf.model.core.Cell(var63);
    lpf.model.core.Value var67 = new lpf.model.core.Value('#');
    var65.setDigit(var67);
    var59.addMark(var67);
    lpf.model.core.Value var70 = var59.getDigit();
    boolean var71 = var30.remove((java.lang.Object)var59);
    java.lang.Object[] var72 = var30.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test237() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.lang.Object[] var44 = var27.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    java.lang.Object[] var54 = var27.toArray(var53);
    java.util.Iterator var55 = var27.iterator();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    java.lang.Object[] var79 = var57.toArray();
    java.util.Iterator var80 = var57.iterator();
    boolean var81 = var27.containsAll((java.util.Collection)var57);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    lpf.model.core.Cell var86 = new lpf.model.core.Cell(var84);
    var86.clearMarks();
    boolean var89 = var86.equals((java.lang.Object)(short)0);
    java.util.Set var90 = var86.getMarks();
    boolean var91 = var57.containsAll((java.util.Collection)var90);
    boolean var92 = var1.removeAll((java.util.Collection)var90);
    java.lang.Object[] var93 = var1.toArray();
    java.util.Iterator var94 = var1.iterator();
    java.lang.Object[] var95 = var1.toArray();
    var1.clear();
    boolean var97 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test238() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var27 = var22.contains((java.lang.Object)'#');
    lpf.model.core.Location var28 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var31 = new lpf.model.core.Cell(var30);
    boolean var32 = var1.remove((java.lang.Object)var30);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var34.addAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.lang.Object[] var79 = var62.toArray(var78);
    lpf.model.kenken.Cage var80 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var62);
    boolean var81 = var57.remove((java.lang.Object)var62);
    boolean var82 = var57.isEmpty();
    boolean var83 = var1.remove((java.lang.Object)var82);
    var1.clear();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test239() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var6 = new lpf.model.core.CellsIterator(var3, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = var16.toArray();
    int var21 = var16.size();
    lpf.model.core.CellsIterator var22 = new lpf.model.core.CellsIterator(var1, 10, var21);
    lpf.model.core.Location var24 = new lpf.model.core.Location(10, '#');
    lpf.model.core.Cell var25 = new lpf.model.core.Cell(var24);
    java.lang.String var26 = var24.toString();
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    lpf.model.core.Cell var31 = new lpf.model.core.Cell(var29);
    var31.clearMarks();
    lpf.model.core.Value var33 = var31.getDigit();
    java.util.Set var34 = var31.getMarks();
    boolean var35 = var31.isOccupied();
    var31.clearMarks();
    boolean var37 = var24.equals((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(#,10)"+ "'", var26.equals("(#,10)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test240() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearDigit();
    lpf.model.core.Value var7 = new lpf.model.core.Value('#');
    var4.addMark(var7);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.lang.Object[] var28 = var11.toArray(var27);
    lpf.model.kenken.Cage var29 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var11);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    boolean var34 = var29.contains(var32);
    java.util.Iterator var35 = var29.iterator();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    boolean var60 = var37.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    boolean var76 = var71.contains((java.lang.Object)'#');
    lpf.model.core.Location var77 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var78 = new lpf.model.core.Location(100, '#');
    boolean var79 = var29.contains(var78);
    boolean var80 = var4.equals((java.lang.Object)var29);
    var4.clearMarks();
    boolean var82 = var4.isOccupied();
    boolean var83 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test241() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    var4.clearMarks();
    java.util.Set var10 = var4.getMarks();
    java.util.Set var11 = var4.getMarks();
    var4.clearDigit();
    lpf.model.core.Value var13 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    lpf.model.core.Cell var19 = new lpf.model.core.Cell(var17);
    var19.clearMarks();
    boolean var22 = var19.equals((java.lang.Object)(short)0);
    boolean var23 = var19.isOccupied();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var25.addAll((java.util.Collection)var48);
    int var51 = var48.size();
    boolean var52 = var19.equals((java.lang.Object)var48);
    boolean var53 = var19.isOccupied();
    java.util.Set var54 = var19.getMarks();
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    lpf.model.core.Value var61 = new lpf.model.core.Value('#');
    var59.setDigit(var61);
    var19.removeMark(var61);
    var4.removeMark(var61);
    
    // Checks the contract:  equals-hashcode on var4 and var19
    assertTrue("Contract failed: equals-hashcode on var4 and var19", var4.equals(var19) ? var4.hashCode() == var19.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var19 and var4
    assertTrue("Contract failed: equals-hashcode on var19 and var4", var19.equals(var4) ? var19.hashCode() == var4.hashCode() : true);

  }

  public void test242() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.util.Iterator var48 = var20.iterator();
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    java.lang.String var54 = var51.toString();
    boolean var55 = var20.contains(var51);
    lpf.model.core.Cell var56 = new lpf.model.core.Cell(var51);
    lpf.model.core.Cell[][] var58 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var84 = var63.retainAll((java.util.Collection)var72);
    boolean var86 = var63.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var63);
    lpf.model.core.CellsIterator var88 = new lpf.model.core.CellsIterator(var58, 100, 0);
    lpf.model.core.Location var91 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var93 = new lpf.model.core.CellsIterator(var58, 1, (-1));
    boolean var94 = var93.hasNext();
    boolean var95 = var93.hasNext();
    boolean var96 = var93.hasNext();
    lpf.model.core.Cell var97 = var93.next();
    boolean var98 = var51.equals((java.lang.Object)var93);
    java.lang.String var99 = var51.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "(4,1)"+ "'", var99.equals("(4,1)"));

  }

  public void test243() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.util.Iterator var1 = var0.iterator();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    boolean var18 = var3.remove((java.lang.Object)var15);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    boolean var33 = var28.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    boolean var43 = var28.remove((java.lang.Object)var35);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    lpf.model.core.Cell var48 = new lpf.model.core.Cell(var46);
    lpf.model.core.Value var50 = new lpf.model.core.Value('#');
    var48.setDigit(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var53.remove((java.lang.Object)var65);
    boolean var69 = var50.equals((java.lang.Object)var53);
    boolean var70 = var28.addAll((java.util.Collection)var53);
    boolean var71 = var3.removeAll((java.util.Collection)var28);
    boolean var72 = var3.isEmpty();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    int var76 = var73.size();
    int var77 = var73.size();
    boolean var78 = var3.containsAll((java.util.Collection)var73);
    boolean var79 = var0.containsAll((java.util.Collection)var3);
    java.lang.Object[] var80 = var3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test244() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var31 = new lpf.model.core.Location(var27, '4');
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    boolean var49 = var44.contains((java.lang.Object)'#');
    lpf.model.core.Location var50 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var51 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Location var53 = new lpf.model.core.Location(var27, '#');
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var59 = new lpf.model.kenken.InvalidKenKenPuzzleException(var58);
    java.lang.String var60 = var59.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var61 = new lpf.model.kenken.InvalidKenKenPuzzleException(var60);
    boolean var62 = var53.equals((java.lang.Object)var60);
    java.lang.String var63 = var53.toString();
    lpf.model.core.Cell var64 = new lpf.model.core.Cell(var53);
    var64.clearMarks();
    java.util.Set var66 = var64.getMarks();
    lpf.model.core.Value var67 = var64.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var60.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(#,0)"+ "'", var63.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test245() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var1.removeAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    java.lang.Object[] var64 = var60.toArray();
    boolean var65 = var48.containsAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var80 = var75.contains((java.lang.Object)'#');
    boolean var81 = var75.isEmpty();
    boolean var82 = var75.isEmpty();
    boolean var83 = var75.isEmpty();
    java.lang.Object[] var84 = var75.toArray();
    int var85 = var75.size();
    boolean var86 = var48.addAll((java.util.Collection)var75);
    boolean var87 = var75.isEmpty();
    int var88 = var75.size();
    java.util.Iterator var89 = var75.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test246() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    boolean var48 = var24.isEmpty();
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    lpf.model.core.Cell var53 = new lpf.model.core.Cell(var51);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    java.lang.Object[] var84 = new java.lang.Object[] { var82};
    java.lang.Object[] var85 = var78.toArray(var84);
    boolean var86 = var55.addAll((java.util.Collection)var78);
    var55.clear();
    boolean var88 = var53.equals((java.lang.Object)var55);
    java.util.Set var89 = var53.getMarks();
    boolean var90 = var24.remove((java.lang.Object)var53);
    java.util.Set var91 = var53.getMarks();
    lpf.model.core.Value var92 = var53.getDigit();
    lpf.model.core.Value var93 = var53.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test247() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    var0.clear();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    boolean var45 = var39.isEmpty();
    boolean var46 = var39.isEmpty();
    boolean var47 = var39.isEmpty();
    java.lang.Object[] var48 = var39.toArray();
    boolean var49 = var0.removeAll((java.util.Collection)var39);
    boolean var50 = var39.isEmpty();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    boolean var73 = var52.retainAll((java.util.Collection)var61);
    java.util.Iterator var74 = var52.iterator();
    boolean var75 = var52.isEmpty();
    boolean var76 = var39.retainAll((java.util.Collection)var52);
    var39.clear();
    java.util.Iterator var78 = var39.iterator();
    java.util.Iterator var79 = var39.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test248() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var49);
    lpf.model.core.Value var51 = var50.getDigit();
    lpf.model.core.Value var52 = var50.getDigit();
    var50.clearDigit();
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    lpf.model.core.Cell var58 = new lpf.model.core.Cell(var56);
    lpf.model.core.Value var60 = new lpf.model.core.Value('#');
    var58.setDigit(var60);
    java.util.Set var62 = var58.getMarks();
    lpf.model.core.Value var63 = var58.getDigit();
    boolean var64 = var58.isOccupied();
    java.util.Set var65 = var58.getMarks();
    lpf.model.core.Cell[][] var67 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var69 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var72 = new lpf.model.core.CellsIterator(var69, 10, 0);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = var82.toArray();
    int var87 = var82.size();
    lpf.model.core.CellsIterator var88 = new lpf.model.core.CellsIterator(var67, 10, var87);
    lpf.model.core.Location var90 = new lpf.model.core.Location(10, '#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Value var92 = new lpf.model.core.Value('#');
    lpf.model.core.Value var93 = new lpf.model.core.Value('#');
    var58.setDigit(var93);
    var50.setDigit(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test249() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var25.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    java.lang.Object[] var52 = var25.toArray(var51);
    boolean var53 = var9.removeAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var58 = var55.remove((java.lang.Object)(short)100);
    boolean var59 = var9.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var61.remove((java.lang.Object)var73);
    boolean var77 = var55.addAll((java.util.Collection)var61);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    java.lang.Object[] var85 = new java.lang.Object[] { var83};
    java.lang.Object[] var86 = var79.toArray(var85);
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    boolean var89 = var87.retainAll((java.util.Collection)var88);
    boolean var90 = var79.retainAll((java.util.Collection)var87);
    java.lang.Object[] var91 = var87.toArray();
    java.lang.Object[] var92 = var87.toArray();
    var87.clear();
    boolean var94 = var55.containsAll((java.util.Collection)var87);
    boolean var95 = var55.isEmpty();
    java.util.Iterator var96 = var55.iterator();
    boolean var97 = var55.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test250() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    int var7 = var1.size();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.lang.Object[] var13 = var9.toArray(var12);
    var9.clear();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var25.retainAll((java.util.Collection)var33);
    boolean var37 = var16.retainAll((java.util.Collection)var25);
    boolean var39 = var16.contains((java.lang.Object)100);
    java.lang.Object[] var40 = var16.toArray();
    java.lang.Object[] var41 = var16.toArray();
    boolean var42 = var9.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var57 = var52.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    boolean var67 = var52.remove((java.lang.Object)var59);
    java.lang.Object[] var68 = var59.toArray();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.util.Iterator var82 = var78.iterator();
    boolean var83 = var78.isEmpty();
    boolean var84 = var59.addAll((java.util.Collection)var78);
    boolean var85 = var16.add((java.lang.Object)var84);
    boolean var86 = var16.isEmpty();
    boolean var87 = var1.removeAll((java.util.Collection)var16);
    java.util.Iterator var88 = var16.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test251() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    lpf.model.core.Location var41 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var43 = new lpf.model.core.Cell(var42);
    java.lang.String var44 = var42.toString();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    boolean var69 = var48.retainAll((java.util.Collection)var57);
    java.lang.Object[] var70 = var48.toArray();
    java.util.Iterator var71 = var48.iterator();
    lpf.model.kenken.Cage var72 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var48);
    lpf.model.core.Location var74 = new lpf.model.core.Location(0, '#');
    boolean var75 = var42.equals((java.lang.Object)'#');
    lpf.model.core.Value var76 = new lpf.model.core.Value('#');
    lpf.model.core.Value var77 = new lpf.model.core.Value('#');
    lpf.model.core.Value var78 = new lpf.model.core.Value('#');
    lpf.model.core.Value var79 = new lpf.model.core.Value('#');
    lpf.model.core.Value var80 = new lpf.model.core.Value('#');
    lpf.model.core.Value var81 = new lpf.model.core.Value('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(#,100)"+ "'", var44.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test252() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    int var7 = var1.size();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    java.lang.Object[] var15 = new java.lang.Object[] { var13};
    java.lang.Object[] var16 = var9.toArray(var15);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    boolean var29 = var18.retainAll((java.util.Collection)var26);
    boolean var30 = var9.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    boolean var76 = var45.addAll((java.util.Collection)var68);
    boolean var77 = var32.addAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    java.lang.Object[] var85 = new java.lang.Object[] { var83};
    java.lang.Object[] var86 = var79.toArray(var85);
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    boolean var89 = var87.retainAll((java.util.Collection)var88);
    boolean var90 = var79.retainAll((java.util.Collection)var87);
    int var91 = var87.size();
    boolean var92 = var32.retainAll((java.util.Collection)var87);
    boolean var93 = var9.retainAll((java.util.Collection)var87);
    java.util.Iterator var94 = var9.iterator();
    boolean var95 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test253() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    lpf.model.core.Cell var7 = new lpf.model.core.Cell(var5);
    var7.clearMarks();
    java.util.Set var9 = var7.getMarks();
    var7.clearMarks();
    var7.clearDigit();
    var7.clearMarks();
    boolean var13 = var1.add((java.lang.Object)var7);
    boolean var14 = var7.isOccupied();
    java.util.Set var15 = var7.getMarks();
    var7.clearDigit();
    var7.clearMarks();
    lpf.model.core.Value var18 = var7.getDigit();
    java.util.Set var19 = var7.getMarks();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    boolean var44 = var23.retainAll((java.util.Collection)var32);
    boolean var46 = var23.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var23);
    java.lang.Object[] var48 = var23.toArray();
    int var49 = var23.size();
    lpf.model.core.Location var51 = new lpf.model.core.Location(var49, ' ');
    lpf.model.core.Value var52 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var53 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var54 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var55 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var56 = new lpf.model.core.Value(' ');
    var7.setDigit(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test254() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    java.util.Set var5 = var4.getMarks();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    lpf.model.core.Value var12 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.lang.Object[] var56 = var52.toArray(var55);
    var52.clear();
    boolean var58 = var39.contains((java.lang.Object)var52);
    lpf.model.kenken.Cage var59 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var52);
    lpf.model.core.Value var60 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var61 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var62 = new lpf.model.core.Location(10, ' ');
    lpf.model.core.Value var63 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var64 = new lpf.model.core.Value(' ');
    var4.addMark(var64);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test255() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.lang.String var48 = var44.toString();
    lpf.model.core.Cell var49 = new lpf.model.core.Cell(var44);
    var49.clearDigit();
    java.util.Set var51 = var49.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test256() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    java.lang.Object[] var48 = var24.toArray();
    var24.clear();
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    lpf.model.core.Value var56 = new lpf.model.core.Value('#');
    var54.setDigit(var56);
    var54.clearDigit();
    var54.clearDigit();
    var54.clearDigit();
    var54.clearMarks();
    var54.clearMarks();
    var54.clearDigit();
    var54.clearMarks();
    java.util.Set var65 = var54.getMarks();
    boolean var66 = var24.add((java.lang.Object)var54);
    java.util.Set var67 = var54.getMarks();
    lpf.model.core.Value var68 = var54.getDigit();
    boolean var69 = var54.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test257() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    var1.clear();
    java.util.Iterator var25 = var1.iterator();
    lpf.model.core.Cell[][] var27 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    boolean var55 = var32.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var32);
    lpf.model.core.CellsIterator var57 = new lpf.model.core.CellsIterator(var27, 100, 0);
    boolean var58 = var57.hasNext();
    lpf.model.core.Cell var59 = var57.next();
    boolean var60 = var57.hasNext();
    boolean var61 = var57.hasNext();
    boolean var62 = var1.contains((java.lang.Object)var57);
    boolean var63 = var57.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var57.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test258() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Value var10 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var12 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    boolean var38 = var17.retainAll((java.util.Collection)var26);
    boolean var40 = var17.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var17);
    lpf.model.core.CellsIterator var42 = new lpf.model.core.CellsIterator(var12, 100, 0);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    lpf.model.core.Cell var47 = new lpf.model.core.Cell(var45);
    var47.clearMarks();
    java.util.Set var49 = var47.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var49);
    lpf.model.core.Value var51 = new lpf.model.core.Value('#');
    var4.setDigit(var51);
    java.util.Set var53 = var4.getMarks();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var73 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var75 = new lpf.model.core.Value('#');
    lpf.model.core.Value var76 = new lpf.model.core.Value('#');
    var4.addMark(var76);
    java.util.Set var78 = var4.getMarks();
    var4.clearDigit();
    
    // Checks the contract:  equals-hashcode on var4 and var47
    assertTrue("Contract failed: equals-hashcode on var4 and var47", var4.equals(var47) ? var4.hashCode() == var47.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var47 and var4
    assertTrue("Contract failed: equals-hashcode on var47 and var4", var47.equals(var4) ? var47.hashCode() == var4.hashCode() : true);

  }

  public void test259() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var43 = var22.retainAll((java.util.Collection)var31);
    java.lang.Object[] var44 = var22.toArray();
    java.util.Iterator var45 = var22.iterator();
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var22);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var48);
    lpf.model.core.Location var59 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, 'a');
    java.lang.String var61 = var60.toString();
    lpf.model.core.Cell var62 = new lpf.model.core.Cell(var60);
    boolean var63 = var62.isOccupied();
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var66);
    var68.clearMarks();
    java.util.Set var70 = var68.getMarks();
    var68.clearMarks();
    boolean var72 = var68.isOccupied();
    boolean var73 = var62.equals((java.lang.Object)var68);
    var62.clearMarks();
    boolean var75 = var62.isOccupied();
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    lpf.model.core.Cell var80 = new lpf.model.core.Cell(var78);
    var80.clearDigit();
    lpf.model.core.Value var82 = var80.getDigit();
    boolean var83 = var80.isOccupied();
    lpf.model.core.Location var86 = new lpf.model.core.Location(1, '4');
    java.lang.String var87 = var86.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var87);
    java.lang.String var89 = var88.toString();
    boolean var90 = var80.equals((java.lang.Object)var89);
    boolean var91 = var80.isOccupied();
    var80.clearDigit();
    lpf.model.core.Value var94 = new lpf.model.core.Value('4');
    var80.setDigit(var94);
    var62.addMark(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(a,0)"+ "'", var61.equals("(a,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(4,1)"+ "'", var87.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var89.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test260() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    java.lang.Object[] var32 = var8.toArray();
    java.lang.Object[] var33 = var8.toArray();
    boolean var34 = var1.retainAll((java.util.Collection)var8);
    int var35 = var8.size();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    boolean var73 = var50.contains((java.lang.Object)100);
    java.lang.Object[] var74 = var50.toArray();
    boolean var75 = var37.removeAll((java.util.Collection)var50);
    java.lang.Object[] var76 = var50.toArray();
    boolean var77 = var8.containsAll((java.util.Collection)var50);
    java.util.Iterator var78 = var50.iterator();
    var50.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test261() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    boolean var15 = var9.isEmpty();
    boolean var16 = var9.isEmpty();
    boolean var17 = var9.isEmpty();
    boolean var18 = var9.isEmpty();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    boolean var53 = var42.retainAll((java.util.Collection)var50);
    boolean var54 = var33.retainAll((java.util.Collection)var42);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    boolean var64 = var33.addAll((java.util.Collection)var56);
    boolean var65 = var20.addAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var20.removeAll((java.util.Collection)var67);
    int var70 = var67.size();
    java.lang.Object[] var71 = var67.toArray();
    boolean var72 = var9.addAll((java.util.Collection)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test262() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    var1.clear();
    java.util.Iterator var24 = var1.iterator();
    int var25 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test263() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearDigit();
    lpf.model.core.Value var6 = var4.getDigit();
    boolean var7 = var4.isOccupied();
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var12 = new lpf.model.kenken.InvalidKenKenPuzzleException(var11);
    java.lang.String var13 = var12.toString();
    boolean var14 = var4.equals((java.lang.Object)var13);
    var4.clearMarks();
    java.util.Set var16 = var4.getMarks();
    lpf.model.core.Value var17 = var4.getDigit();
    java.util.Set var18 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var13.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test264() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearMarks();
    boolean var10 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test265() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Cell var32 = var31.next();
    lpf.model.core.Cell var33 = var31.next();
    boolean var34 = var31.hasNext();
    lpf.model.core.Cell var35 = var31.next();
    boolean var36 = var31.hasNext();
    lpf.model.core.Cell var37 = var31.next();
    lpf.model.core.Cell var38 = var31.next();
    boolean var39 = var31.hasNext();
    boolean var40 = var31.hasNext();
    boolean var41 = var31.hasNext();
    boolean var42 = var31.hasNext();
    boolean var43 = var31.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test266() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var6 = var4.isOccupied();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearMarks();
    var4.clearMarks();
    lpf.model.core.Value var10 = var4.getDigit();
    lpf.model.core.Value var11 = var4.getDigit();
    lpf.model.core.Value var12 = var4.getDigit();
    boolean var13 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test267() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    var4.clearDigit();
    boolean var11 = var4.isOccupied();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var13.toArray(var16);
    var13.clear();
    var13.clear();
    java.lang.Object[] var20 = var13.toArray();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.containsAll((java.util.Collection)var21);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.lang.Object[] var30 = var26.toArray(var29);
    var26.clear();
    var26.clear();
    java.lang.Object[] var33 = var26.toArray();
    boolean var34 = var21.add((java.lang.Object)var26);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    boolean var56 = var45.retainAll((java.util.Collection)var53);
    boolean var57 = var36.retainAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var36.addAll((java.util.Collection)var59);
    int var62 = var59.size();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.lang.Object[] var80 = var63.toArray(var79);
    boolean var81 = var59.add((java.lang.Object)var79);
    boolean var82 = var21.retainAll((java.util.Collection)var59);
    boolean var83 = var4.equals((java.lang.Object)var21);
    boolean var84 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test268() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    boolean var37 = var6.addAll((java.util.Collection)var29);
    var6.clear();
    boolean var39 = var4.equals((java.lang.Object)var6);
    var4.clearMarks();
    lpf.model.core.Value var41 = var4.getDigit();
    java.util.Set var42 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test269() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.kenken.Cage var52 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var34);
    lpf.model.core.Value var53 = new lpf.model.core.Value('a');
    lpf.model.core.Value var54 = new lpf.model.core.Value('a');
    lpf.model.core.Value var55 = new lpf.model.core.Value('a');
    lpf.model.core.Location var56 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Cell var57 = new lpf.model.core.Cell(var56);
    java.lang.String var58 = var56.toString();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    java.util.Iterator var60 = var59.iterator();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    java.lang.Object[] var77 = var73.toArray();
    java.lang.Object[] var78 = var62.toArray(var77);
    boolean var79 = var59.removeAll((java.util.Collection)var62);
    boolean var80 = var59.isEmpty();
    int var81 = var59.size();
    boolean var82 = var56.equals((java.lang.Object)var59);
    var59.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(a,100)"+ "'", var58.equals("(a,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test270() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var10.toArray(var39);
    java.lang.Object[] var41 = var1.toArray(var39);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var43.toArray(var46);
    var43.clear();
    var43.clear();
    java.lang.Object[] var50 = var43.toArray();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.containsAll((java.util.Collection)var51);
    boolean var55 = var1.retainAll((java.util.Collection)var51);
    java.util.Iterator var56 = var51.iterator();
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    lpf.model.core.Cell var61 = new lpf.model.core.Cell(var59);
    var61.clearMarks();
    java.util.Set var63 = var61.getMarks();
    lpf.model.core.Value var64 = var61.getDigit();
    boolean var65 = var61.isOccupied();
    boolean var66 = var61.isOccupied();
    var61.clearMarks();
    java.util.Set var68 = var61.getMarks();
    boolean var69 = var61.isOccupied();
    boolean var70 = var51.contains((java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var36.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test271() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Value var6 = var4.getDigit();
    boolean var7 = var4.isOccupied();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var25 = var20.contains((java.lang.Object)'#');
    lpf.model.core.Location var26 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var26);
    boolean var28 = var27.isOccupied();
    var27.clearMarks();
    lpf.model.core.Value var30 = var27.getDigit();
    java.util.Set var31 = var27.getMarks();
    lpf.model.core.Value var32 = var27.getDigit();
    java.util.Set var33 = var27.getMarks();
    var27.clearDigit();
    var27.clearMarks();
    java.util.Set var36 = var27.getMarks();
    var27.clearDigit();
    lpf.model.core.Value var39 = new lpf.model.core.Value('4');
    lpf.model.core.Cell[][] var41 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    boolean var69 = var46.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var70 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var46);
    lpf.model.core.CellsIterator var71 = new lpf.model.core.CellsIterator(var41, 100, 0);
    lpf.model.core.Cell var72 = var71.next();
    lpf.model.core.Cell var73 = var71.next();
    boolean var74 = var71.hasNext();
    lpf.model.core.Cell var75 = var71.next();
    boolean var76 = var71.hasNext();
    lpf.model.core.Cell var77 = var71.next();
    lpf.model.core.Cell var78 = var71.next();
    lpf.model.core.Cell var79 = var71.next();
    boolean var80 = var71.hasNext();
    boolean var81 = var39.equals((java.lang.Object)var80);
    var27.addMark(var39);
    var4.addMark(var39);
    lpf.model.core.Value var84 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test272() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var24.remove((java.lang.Object)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var54 = var49.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    boolean var64 = var49.remove((java.lang.Object)var56);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    lpf.model.core.Cell var69 = new lpf.model.core.Cell(var67);
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    var69.setDigit(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var74.remove((java.lang.Object)var86);
    boolean var90 = var71.equals((java.lang.Object)var74);
    boolean var91 = var49.addAll((java.util.Collection)var74);
    boolean var92 = var24.removeAll((java.util.Collection)var49);
    boolean var93 = var24.isEmpty();
    var24.clear();
    boolean var95 = var14.containsAll((java.util.Collection)var24);
    java.util.Iterator var96 = var24.iterator();
    int var97 = var24.size();
    int var98 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test273() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var4 = var3.getDigit();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var6.addAll((java.util.Collection)var29);
    int var32 = var29.size();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var33.toArray(var49);
    boolean var51 = var29.add((java.lang.Object)var49);
    int var52 = var29.size();
    int var53 = var29.size();
    lpf.model.core.Value var55 = new lpf.model.core.Value('a');
    lpf.model.core.Location var56 = new lpf.model.core.Location(var53, 'a');
    lpf.model.core.Value var57 = new lpf.model.core.Value('a');
    var3.removeMark(var57);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var77 = var72.contains((java.lang.Object)'#');
    boolean var78 = var72.isEmpty();
    boolean var79 = var72.isEmpty();
    boolean var80 = var72.isEmpty();
    java.lang.Object[] var81 = var72.toArray();
    int var82 = var72.size();
    java.lang.Object[] var83 = var72.toArray();
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var72);
    boolean var85 = var3.equals((java.lang.Object)'4');
    var3.clearDigit();
    lpf.model.core.Location var89 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Value var90 = new lpf.model.core.Value('4');
    var3.setDigit(var90);
    lpf.model.core.Value var92 = var3.getDigit();
    lpf.model.core.Value var93 = var3.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test274() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var19.toArray(var22);
    var19.clear();
    boolean var25 = var6.contains((java.lang.Object)var19);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var26.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    java.lang.Object[] var53 = var26.toArray(var52);
    java.lang.Object[] var54 = var19.toArray(var52);
    java.util.Iterator var55 = var19.iterator();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.lang.Object[] var74 = var70.toArray(var73);
    var70.clear();
    boolean var76 = var57.contains((java.lang.Object)var70);
    boolean var77 = var19.removeAll((java.util.Collection)var57);
    boolean var78 = var2.equals((java.lang.Object)var77);
    java.lang.String var79 = var2.toString();
    java.lang.String var80 = var2.toString();
    java.lang.String var81 = var2.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var82 = new lpf.model.kenken.InvalidKenKenPuzzleException(var81);
    lpf.model.kenken.InvalidKenKenPuzzleException var83 = new lpf.model.kenken.InvalidKenKenPuzzleException(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(4,1)"+ "'", var4.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));

  }

  public void test275() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    var4.clearMarks();
    java.util.Set var39 = var4.getMarks();
    var4.clearDigit();
    boolean var41 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test276() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.lang.Object[] var52 = var30.toArray();
    java.util.Iterator var53 = var30.iterator();
    boolean var54 = var0.containsAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var79 = var58.retainAll((java.util.Collection)var67);
    boolean var81 = var58.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var58);
    java.lang.Object[] var83 = var58.toArray();
    boolean var84 = var0.containsAll((java.util.Collection)var58);
    java.util.Iterator var85 = var0.iterator();
    lpf.model.core.Location var88 = new lpf.model.core.Location(1, '4');
    java.lang.String var89 = var88.toString();
    java.lang.String var90 = var88.toString();
    java.lang.String var91 = var88.toString();
    java.lang.String var92 = var88.toString();
    boolean var93 = var0.remove((java.lang.Object)var88);
    lpf.model.core.Cell var94 = new lpf.model.core.Cell(var88);
    boolean var95 = var94.isOccupied();
    var94.clearMarks();
    var94.clearMarks();
    var94.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(4,1)"+ "'", var89.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(4,1)"+ "'", var90.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(4,1)"+ "'", var91.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(4,1)"+ "'", var92.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test277() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var9.iterator();
    var9.clear();
    int var15 = var9.size();
    java.lang.Object[] var16 = var9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test278() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Value var13 = var4.getDigit();
    java.util.Set var14 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test279() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    java.lang.Object[] var36 = var24.toArray(var35);
    int var37 = var24.size();
    java.util.Iterator var38 = var24.iterator();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    boolean var53 = var48.contains((java.lang.Object)'#');
    boolean var54 = var48.isEmpty();
    java.util.Iterator var55 = var48.iterator();
    java.lang.Object[] var56 = var48.toArray();
    java.lang.Object[] var57 = var24.toArray(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test280() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    int var50 = var24.size();
    int var51 = var24.size();
    boolean var52 = var24.isEmpty();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    boolean var75 = var54.retainAll((java.util.Collection)var63);
    boolean var77 = var54.contains((java.lang.Object)100);
    java.lang.Object[] var78 = var54.toArray();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    boolean var90 = var88.retainAll((java.util.Collection)var89);
    boolean var91 = var80.retainAll((java.util.Collection)var88);
    var80.clear();
    java.lang.Object[] var93 = var80.toArray();
    java.lang.Object[] var94 = var54.toArray(var93);
    boolean var95 = var24.add((java.lang.Object)var54);
    java.lang.Object[] var96 = var54.toArray();
    int var97 = var54.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);

  }

  public void test281() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, '#');
    java.lang.String var85 = var84.toString();
    lpf.model.core.Cell var86 = new lpf.model.core.Cell(var84);
    boolean var87 = var86.isOccupied();
    lpf.model.core.Value var88 = var86.getDigit();
    var86.clearMarks();
    var86.clearMarks();
    lpf.model.core.Value var91 = var86.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(#,100)"+ "'", var85.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test282() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    java.lang.Object[] var14 = var9.toArray();
    var9.clear();
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    lpf.model.core.Cell var20 = new lpf.model.core.Cell(var18);
    var20.clearMarks();
    java.util.Set var22 = var20.getMarks();
    boolean var23 = var9.remove((java.lang.Object)var22);
    int var24 = var9.size();
    int var25 = var9.size();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    boolean var48 = var27.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var27.addAll((java.util.Collection)var50);
    int var53 = var50.size();
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var57 = new lpf.model.core.Location(var53, '4');
    lpf.model.core.Value var58 = new lpf.model.core.Value('4');
    lpf.model.core.Value var59 = new lpf.model.core.Value('4');
    lpf.model.core.Value var60 = new lpf.model.core.Value('4');
    lpf.model.core.Value var61 = new lpf.model.core.Value('4');
    lpf.model.core.Value var62 = new lpf.model.core.Value('4');
    lpf.model.core.Location var63 = new lpf.model.core.Location(var25, '4');
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var66);
    var68.clearMarks();
    java.util.Set var70 = var68.getMarks();
    lpf.model.core.Value var71 = var68.getDigit();
    boolean var72 = var68.isOccupied();
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    lpf.model.core.Cell var77 = new lpf.model.core.Cell(var75);
    boolean var79 = var77.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var81 = new lpf.model.core.Value('#');
    var77.addMark(var81);
    var68.setDigit(var81);
    var68.clearMarks();
    lpf.model.core.Value var85 = var68.getDigit();
    boolean var86 = var68.isOccupied();
    boolean var87 = var63.equals((java.lang.Object)var68);
    
    // Checks the contract:  equals-hashcode on var20 and var77
    assertTrue("Contract failed: equals-hashcode on var20 and var77", var20.equals(var77) ? var20.hashCode() == var77.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var77 and var20
    assertTrue("Contract failed: equals-hashcode on var77 and var20", var77.equals(var20) ? var77.hashCode() == var20.hashCode() : true);

  }

  public void test283() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Value var18 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    java.util.Set var57 = var55.getMarks();
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    boolean var81 = var60.retainAll((java.util.Collection)var69);
    java.util.Iterator var82 = var60.iterator();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var60);
    java.util.Iterator var84 = var83.iterator();
    java.util.Iterator var85 = var83.iterator();
    java.util.Iterator var86 = var83.iterator();
    java.util.Iterator var87 = var83.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test284() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    java.lang.Object[] var32 = var8.toArray();
    java.lang.Object[] var33 = var8.toArray();
    boolean var34 = var1.retainAll((java.util.Collection)var8);
    int var35 = var8.size();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    boolean var73 = var50.contains((java.lang.Object)100);
    java.lang.Object[] var74 = var50.toArray();
    boolean var75 = var37.removeAll((java.util.Collection)var50);
    java.lang.Object[] var76 = var50.toArray();
    boolean var77 = var8.containsAll((java.util.Collection)var50);
    boolean var78 = var8.isEmpty();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var83 = var80.remove((java.lang.Object)(short)100);
    boolean var84 = var80.isEmpty();
    boolean var85 = var80.isEmpty();
    boolean var86 = var8.retainAll((java.util.Collection)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test285() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var6 = var4.isOccupied();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearMarks();
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var29 = var24.contains((java.lang.Object)'#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var31 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var33 = new lpf.model.core.Value('#');
    boolean var34 = var11.equals((java.lang.Object)var33);
    var4.addMark(var33);
    lpf.model.core.Value var36 = var4.getDigit();
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    lpf.model.core.Cell var41 = new lpf.model.core.Cell(var39);
    boolean var42 = var41.isOccupied();
    lpf.model.core.Cell[][] var44 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var70 = var49.retainAll((java.util.Collection)var58);
    boolean var72 = var49.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var73 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var49);
    lpf.model.core.CellsIterator var74 = new lpf.model.core.CellsIterator(var44, 100, 0);
    lpf.model.core.Cell var75 = var74.next();
    lpf.model.core.Cell var76 = var74.next();
    boolean var77 = var74.hasNext();
    lpf.model.core.Cell var78 = var74.next();
    boolean var79 = var41.equals((java.lang.Object)var74);
    boolean var80 = var74.hasNext();
    boolean var81 = var74.hasNext();
    lpf.model.core.Cell var82 = var74.next();
    boolean var83 = var74.hasNext();
    boolean var84 = var74.hasNext();
    lpf.model.core.Cell var85 = var74.next();
    boolean var86 = var74.hasNext();
    boolean var87 = var4.equals((java.lang.Object)var86);
    
    // Checks the contract:  equals-hashcode on var4 and var41
    assertTrue("Contract failed: equals-hashcode on var4 and var41", var4.equals(var41) ? var4.hashCode() == var41.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var41 and var4
    assertTrue("Contract failed: equals-hashcode on var41 and var4", var41.equals(var4) ? var41.hashCode() == var4.hashCode() : true);

  }

  public void test286() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    boolean var14 = var9.isEmpty();
    int var15 = var9.size();
    lpf.model.core.Value var17 = new lpf.model.core.Value('4');
    lpf.model.core.Location var18 = new lpf.model.core.Location(var15, '4');
    java.lang.String var19 = var18.toString();
    lpf.model.core.Cell var20 = new lpf.model.core.Cell(var18);
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var18);
    
    // Checks the contract:  equals-hashcode on var20 and var21
    assertTrue("Contract failed: equals-hashcode on var20 and var21", var20.equals(var21) ? var20.hashCode() == var21.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var21 and var20
    assertTrue("Contract failed: equals-hashcode on var21 and var20", var21.equals(var20) ? var21.hashCode() == var20.hashCode() : true);

  }

  public void test287() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var1.removeAll((java.util.Collection)var48);
    int var51 = var48.size();
    boolean var52 = var48.isEmpty();
    java.util.Iterator var53 = var48.iterator();
    int var54 = var48.size();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var79 = var58.retainAll((java.util.Collection)var67);
    boolean var81 = var58.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var58);
    java.lang.Object[] var83 = var58.toArray();
    int var84 = var58.size();
    lpf.model.core.Location var86 = new lpf.model.core.Location(var84, ' ');
    lpf.model.core.Value var87 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var88 = new lpf.model.core.Location(var54, ' ');
    java.lang.String var89 = var88.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var90 = new lpf.model.kenken.InvalidKenKenPuzzleException(var89);
    java.lang.String var91 = var90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "( ,0)"+ "'", var89.equals("( ,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: ( ,0)"+ "'", var91.equals("lpf.model.kenken.InvalidKenKenPuzzleException: ( ,0)"));

  }

  public void test288() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var46 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    java.lang.Object[] var72 = var50.toArray();
    java.util.Iterator var73 = var50.iterator();
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var50);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var76);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    lpf.model.core.Value var88 = new lpf.model.core.Value('#');
    lpf.model.core.Value var89 = new lpf.model.core.Value('#');
    lpf.model.core.Value var90 = new lpf.model.core.Value('#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Location var94 = new lpf.model.core.Location((-1), 'a');
    boolean var95 = var91.equals((java.lang.Object)var94);
    java.lang.String var96 = var94.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var97 = new lpf.model.kenken.InvalidKenKenPuzzleException(var96);
    lpf.model.kenken.InvalidKenKenPuzzleException var98 = new lpf.model.kenken.InvalidKenKenPuzzleException(var96);
    java.lang.String var99 = var98.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "(a,-1)"+ "'", var96.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (a,-1)"+ "'", var99.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (a,-1)"));

  }

  public void test289() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var77 = var39.addAll((java.util.Collection)var64);
    java.util.Iterator var78 = var64.iterator();
    java.lang.Object[] var79 = var64.toArray();
    boolean var80 = var64.isEmpty();
    int var81 = var64.size();
    int var82 = var64.size();
    var64.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test290() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    int var17 = var13.size();
    java.lang.Object[] var18 = var13.toArray();
    java.util.Iterator var19 = var13.iterator();
    boolean var20 = var13.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test291() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    boolean var56 = var25.addAll((java.util.Collection)var48);
    boolean var57 = var12.addAll((java.util.Collection)var25);
    java.lang.Object[] var58 = var25.toArray();
    int var59 = var25.size();
    boolean var60 = var4.equals((java.lang.Object)var25);
    java.util.Iterator var61 = var25.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test292() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.lang.String var48 = var44.toString();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    boolean var81 = var50.addAll((java.util.Collection)var73);
    boolean var82 = var73.isEmpty();
    boolean var83 = var44.equals((java.lang.Object)var82);
    java.lang.String var84 = var44.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var85 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    java.lang.String var86 = var85.toString();
    java.lang.String var87 = var85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var86.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test293() throws Throwable {

    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    boolean var17 = var12.contains((java.lang.Object)'#');
    lpf.model.core.Location var18 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var19 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var20);
    java.lang.String var22 = var20.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var23 = new lpf.model.kenken.InvalidKenKenPuzzleException(var22);
    lpf.model.kenken.InvalidKenKenPuzzleException var24 = new lpf.model.kenken.InvalidKenKenPuzzleException(var22);
    java.lang.String var25 = var24.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var26 = new lpf.model.kenken.InvalidKenKenPuzzleException(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(#,1)"+ "'", var22.equals("(#,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,1)"+ "'", var25.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,1)"));

  }

  public void test294() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.util.Iterator var48 = var20.iterator();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    boolean var64 = var59.contains((java.lang.Object)'#');
    lpf.model.core.Location var65 = new lpf.model.core.Location(100, '#');
    boolean var66 = var20.contains(var65);
    java.util.Iterator var67 = var20.iterator();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    boolean var83 = var78.contains((java.lang.Object)'#');
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var86 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var87 = var86.toString();
    boolean var88 = var84.equals((java.lang.Object)var86);
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var84);
    boolean var90 = var20.contains(var84);
    java.util.Iterator var91 = var20.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test295() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.lang.Object[] var52 = var30.toArray();
    java.util.Iterator var53 = var30.iterator();
    boolean var54 = var0.containsAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var79 = var58.retainAll((java.util.Collection)var67);
    boolean var81 = var58.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var58);
    java.lang.Object[] var83 = var58.toArray();
    boolean var84 = var0.containsAll((java.util.Collection)var58);
    lpf.model.core.Location var87 = new lpf.model.core.Location((-1), 'a');
    boolean var88 = var0.contains((java.lang.Object)'a');
    var0.clear();
    java.lang.Object[] var90 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test296() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearMarks();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    boolean var43 = var20.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var20);
    boolean var45 = var20.isEmpty();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var68 = var47.retainAll((java.util.Collection)var56);
    java.util.Iterator var69 = var56.iterator();
    boolean var70 = var20.remove((java.lang.Object)var56);
    boolean var71 = var4.equals((java.lang.Object)var70);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var88 = var83.contains((java.lang.Object)'#');
    lpf.model.core.Location var89 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Value var92 = new lpf.model.core.Value('#');
    var4.addMark(var92);
    lpf.model.core.Value var94 = var4.getDigit();
    var4.clearMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test297() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    int var13 = var9.size();
    java.lang.Object[] var14 = var9.toArray();
    java.lang.Object[] var15 = var9.toArray();
    java.util.Iterator var16 = var9.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test298() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.kenken.Cage var52 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var34);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.String var57 = var55.toString();
    java.lang.String var58 = var55.toString();
    boolean var59 = var52.contains(var55);
    java.lang.String var60 = var55.toString();
    boolean var61 = var20.contains(var55);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    boolean var65 = var20.contains(var64);
    java.util.Iterator var66 = var20.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var67 = var20.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test299() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    lpf.model.core.Value var57 = var55.getDigit();
    java.util.Set var58 = var55.getMarks();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.lang.Object[] var76 = var59.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    java.lang.Object[] var84 = new java.lang.Object[] { var82};
    java.lang.Object[] var85 = var78.toArray(var84);
    java.lang.Object[] var86 = var59.toArray(var85);
    lpf.model.core.Value var88 = new lpf.model.core.Value('a');
    boolean var89 = var59.contains((java.lang.Object)var88);
    boolean var90 = var55.equals((java.lang.Object)var88);
    lpf.model.core.Value var91 = var55.getDigit();
    var55.clearDigit();
    var55.clearMarks();
    var55.clearMarks();
    boolean var95 = var49.equals((java.lang.Object)var55);
    lpf.model.core.Value var96 = var55.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test300() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Cell var26 = new lpf.model.core.Cell(var23);
    lpf.model.core.Value var27 = var26.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test301() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Value var6 = var4.getDigit();
    java.util.Set var7 = var4.getMarks();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    boolean var10 = var8.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.lang.Object[] var25 = var8.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var8.toArray(var34);
    lpf.model.core.Value var37 = new lpf.model.core.Value('a');
    boolean var38 = var8.contains((java.lang.Object)var37);
    boolean var39 = var4.equals((java.lang.Object)var37);
    boolean var40 = var4.isOccupied();
    boolean var41 = var4.isOccupied();
    java.util.Set var42 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test302() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var25.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    java.lang.Object[] var52 = var25.toArray(var51);
    boolean var53 = var9.removeAll((java.util.Collection)var25);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    lpf.model.core.Cell var58 = new lpf.model.core.Cell(var56);
    var58.clearMarks();
    boolean var61 = var58.equals((java.lang.Object)(short)0);
    boolean var62 = var58.isOccupied();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    boolean var85 = var64.retainAll((java.util.Collection)var73);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var64.addAll((java.util.Collection)var87);
    int var90 = var87.size();
    boolean var91 = var58.equals((java.lang.Object)var87);
    boolean var92 = var9.removeAll((java.util.Collection)var87);
    java.util.Iterator var93 = var87.iterator();
    java.util.Iterator var94 = var87.iterator();
    java.util.Iterator var95 = var87.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test303() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var25.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    java.lang.Object[] var52 = var25.toArray(var51);
    boolean var53 = var9.removeAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var58 = var55.remove((java.lang.Object)(short)100);
    boolean var59 = var9.retainAll((java.util.Collection)var55);
    int var60 = var55.size();
    lpf.model.core.Location var63 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Value var64 = new lpf.model.core.Value('a');
    lpf.model.core.Value var65 = new lpf.model.core.Value('a');
    lpf.model.core.Value var66 = new lpf.model.core.Value('a');
    lpf.model.core.Location var67 = new lpf.model.core.Location(var60, 'a');
    lpf.model.core.Value var68 = new lpf.model.core.Value('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test304() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Value var9 = var4.getDigit();
    lpf.model.core.Value var10 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var12 = var4.getMarks();
    boolean var13 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test305() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var5 = var4.isOccupied();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var36 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var12);
    lpf.model.core.CellsIterator var37 = new lpf.model.core.CellsIterator(var7, 100, 0);
    lpf.model.core.Cell var38 = var37.next();
    lpf.model.core.Cell var39 = var37.next();
    boolean var40 = var37.hasNext();
    lpf.model.core.Cell var41 = var37.next();
    boolean var42 = var4.equals((java.lang.Object)var37);
    lpf.model.core.Cell var43 = var37.next();
    lpf.model.core.Cell var44 = var37.next();
    lpf.model.core.Cell var45 = var37.next();
    lpf.model.core.Cell var46 = var37.next();
    lpf.model.core.Cell var47 = var37.next();
    boolean var48 = var37.hasNext();
    lpf.model.core.Cell var49 = var37.next();
    lpf.model.core.Cell var50 = var37.next();
    lpf.model.core.Cell var51 = var37.next();
    boolean var52 = var37.hasNext();
    boolean var53 = var37.hasNext();
    lpf.model.core.Cell var54 = var37.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test306() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    lpf.model.core.Value var30 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var32 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    boolean var60 = var37.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var61 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var37);
    lpf.model.core.CellsIterator var62 = new lpf.model.core.CellsIterator(var32, 100, 0);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    lpf.model.core.Cell var67 = new lpf.model.core.Cell(var65);
    var67.clearMarks();
    java.util.Set var69 = var67.getMarks();
    lpf.model.kenken.Cage var70 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var69);
    lpf.model.core.Location var72 = new lpf.model.core.Location(0, '#');
    java.lang.String var73 = var72.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var74 = new lpf.model.kenken.InvalidKenKenPuzzleException(var73);
    boolean var75 = var3.add((java.lang.Object)var74);
    java.lang.String var76 = var74.toString();
    java.lang.String var77 = var74.toString();
    java.lang.String var78 = var74.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var79 = new lpf.model.kenken.InvalidKenKenPuzzleException(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(#,0)"+ "'", var73.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"+ "'", var76.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"+ "'", var77.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"+ "'", var78.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,0)"));

  }

  public void test307() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    java.lang.Object[] var48 = var24.toArray();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var65 = var60.contains((java.lang.Object)'#');
    lpf.model.core.Location var66 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var67 = new lpf.model.core.Location((-1), '#');
    boolean var68 = var24.remove((java.lang.Object)var67);
    var24.clear();
    java.util.Iterator var70 = var24.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var72 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var73 = var72.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var74 = new lpf.model.kenken.InvalidKenKenPuzzleException(var73);
    java.lang.String var75 = var74.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var76 = new lpf.model.kenken.InvalidKenKenPuzzleException(var75);
    boolean var77 = var24.add((java.lang.Object)var75);
    java.lang.Object[] var78 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var73.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var75.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test308() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var6.toArray(var22);
    lpf.model.kenken.Cage var24 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var6);
    int var25 = var6.size();
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var29 = new lpf.model.core.CellsIterator(var3, var25, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    boolean var52 = var31.retainAll((java.util.Collection)var40);
    boolean var54 = var31.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    boolean var70 = var65.contains((java.lang.Object)'#');
    lpf.model.core.Location var71 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.CellsIterator var74 = new lpf.model.core.CellsIterator(var3, 100, (-1));
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    int var88 = var84.size();
    lpf.model.core.CellsIterator var89 = new lpf.model.core.CellsIterator(var1, 100, var88);
    boolean var90 = var89.hasNext();
    boolean var91 = var89.hasNext();
    lpf.model.core.Cell var92 = var89.next();
    lpf.model.core.Cell var93 = var89.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test309() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    boolean var44 = var23.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    boolean var54 = var23.addAll((java.util.Collection)var46);
    boolean var55 = var10.addAll((java.util.Collection)var23);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    lpf.model.core.Cell var60 = new lpf.model.core.Cell(var58);
    var60.clearMarks();
    boolean var63 = var60.equals((java.lang.Object)(short)0);
    boolean var64 = var60.isOccupied();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var87 = var66.retainAll((java.util.Collection)var75);
    lpf.model.core.ArraySet var88 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var89 = new lpf.model.core.ArraySet();
    boolean var90 = var88.retainAll((java.util.Collection)var89);
    boolean var91 = var66.addAll((java.util.Collection)var89);
    int var92 = var89.size();
    boolean var93 = var60.equals((java.lang.Object)var89);
    boolean var94 = var10.removeAll((java.util.Collection)var89);
    int var95 = var10.size();
    boolean var96 = var1.retainAll((java.util.Collection)var10);
    boolean var97 = var10.isEmpty();
    int var98 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test310() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    java.lang.Object[] var11 = new java.lang.Object[] { var9};
    java.lang.Object[] var12 = var5.toArray(var11);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var26 = var5.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var5.addAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var33.toArray(var49);
    lpf.model.kenken.Cage var51 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var33);
    boolean var52 = var28.remove((java.lang.Object)var33);
    boolean var53 = var28.isEmpty();
    int var54 = var28.size();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var73 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var74 = new lpf.model.core.Location(var54, '#');
    lpf.model.core.Location var75 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var76 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Cell var77 = new lpf.model.core.Cell(var76);
    boolean var78 = var77.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test311() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.lang.Object[] var34 = var17.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var17.containsAll((java.util.Collection)var35);
    boolean var39 = var1.add((java.lang.Object)var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var1.addAll((java.util.Collection)var49);
    int var54 = var1.size();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.lang.Object[] var74 = var57.toArray(var73);
    lpf.model.kenken.Cage var75 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var57);
    lpf.model.core.Value var76 = new lpf.model.core.Value('a');
    lpf.model.core.Location var77 = new lpf.model.core.Location(var54, 'a');
    lpf.model.core.Cell var78 = new lpf.model.core.Cell(var77);
    var78.clearMarks();
    var78.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test312() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var85 = new lpf.model.core.Value('#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    lpf.model.core.Value var88 = new lpf.model.core.Value('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test313() throws Throwable {

    lpf.model.core.Location var3 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    java.lang.Object[] var11 = new java.lang.Object[] { var9};
    java.lang.Object[] var12 = var5.toArray(var11);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var5.retainAll((java.util.Collection)var13);
    boolean var18 = var13.contains((java.lang.Object)'#');
    boolean var19 = var13.isEmpty();
    boolean var20 = var13.isEmpty();
    boolean var21 = var13.isEmpty();
    java.lang.Object[] var22 = var13.toArray();
    int var23 = var13.size();
    java.lang.Object[] var24 = var13.toArray();
    lpf.model.kenken.Cage var25 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var13);
    boolean var26 = var13.isEmpty();
    boolean var27 = var13.isEmpty();
    int var28 = var13.size();
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    lpf.model.core.Cell var33 = new lpf.model.core.Cell(var31);
    lpf.model.core.Value var35 = new lpf.model.core.Value('#');
    var33.setDigit(var35);
    var33.clearMarks();
    lpf.model.core.Value var39 = new lpf.model.core.Value('#');
    var33.removeMark(var39);
    boolean var41 = var33.isOccupied();
    var33.clearMarks();
    var33.clearDigit();
    boolean var44 = var13.remove((java.lang.Object)var33);
    java.util.Iterator var45 = var13.iterator();
    var13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test314() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    int var13 = var9.size();
    boolean var14 = var9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test315() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    int var60 = var56.size();
    boolean var61 = var1.retainAll((java.util.Collection)var56);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    java.util.Iterator var63 = var62.iterator();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    java.lang.Object[] var80 = var76.toArray();
    java.lang.Object[] var81 = var65.toArray(var80);
    boolean var82 = var62.removeAll((java.util.Collection)var65);
    java.lang.Object[] var83 = var62.toArray();
    java.lang.Object[] var84 = var56.toArray(var83);
    java.lang.Object[] var85 = var56.toArray();
    java.util.Iterator var86 = var56.iterator();
    var56.clear();
    var56.clear();
    int var89 = var56.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test316() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var77 = var39.addAll((java.util.Collection)var64);
    int var78 = var64.size();
    java.util.Iterator var79 = var64.iterator();
    java.util.Iterator var80 = var64.iterator();
    var64.clear();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    lpf.model.core.Location var87 = new lpf.model.core.Location(1, '4');
    java.lang.String var88 = var87.toString();
    java.lang.Object[] var89 = new java.lang.Object[] { var87};
    java.lang.Object[] var90 = var83.toArray(var89);
    lpf.model.core.ArraySet var91 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var92 = new lpf.model.core.ArraySet();
    boolean var93 = var91.retainAll((java.util.Collection)var92);
    boolean var94 = var83.retainAll((java.util.Collection)var91);
    var83.clear();
    java.util.Iterator var96 = var83.iterator();
    boolean var97 = var64.retainAll((java.util.Collection)var83);
    java.util.Iterator var98 = var64.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(4,1)"+ "'", var88.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test317() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    java.util.Iterator var30 = var3.iterator();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    boolean var63 = var32.addAll((java.util.Collection)var55);
    var32.clear();
    var32.clear();
    java.util.Iterator var66 = var32.iterator();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var32.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var72 = new lpf.model.core.Cell(var71);
    boolean var73 = var67.remove((java.lang.Object)var71);
    boolean var74 = var3.containsAll((java.util.Collection)var67);
    boolean var75 = var3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test318() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.lang.Object[] var27 = var23.toArray(var26);
    var23.clear();
    var23.clear();
    java.lang.Object[] var30 = var23.toArray();
    lpf.model.core.Cell[][] var32 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    boolean var60 = var37.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var61 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var37);
    lpf.model.core.CellsIterator var62 = new lpf.model.core.CellsIterator(var32, 100, 0);
    boolean var63 = var23.remove((java.lang.Object)0);
    boolean var64 = var18.containsAll((java.util.Collection)var23);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    lpf.model.core.Cell var69 = new lpf.model.core.Cell(var67);
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    var69.setDigit(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var74.remove((java.lang.Object)var86);
    boolean var90 = var71.equals((java.lang.Object)var74);
    boolean var91 = var18.removeAll((java.util.Collection)var74);
    java.util.Iterator var92 = var74.iterator();
    boolean var93 = var74.isEmpty();
    int var94 = var74.size();
    var74.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test319() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    boolean var29 = var18.retainAll((java.util.Collection)var26);
    boolean var31 = var26.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    boolean var41 = var26.remove((java.lang.Object)var33);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    lpf.model.core.Cell var46 = new lpf.model.core.Cell(var44);
    lpf.model.core.Value var48 = new lpf.model.core.Value('#');
    var46.setDigit(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var51.remove((java.lang.Object)var63);
    boolean var67 = var48.equals((java.lang.Object)var51);
    boolean var68 = var26.addAll((java.util.Collection)var51);
    boolean var69 = var1.removeAll((java.util.Collection)var26);
    var26.clear();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    boolean var86 = var81.contains((java.lang.Object)'#');
    lpf.model.core.Location var87 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var87);
    boolean var89 = var88.isOccupied();
    var88.clearMarks();
    lpf.model.core.Value var91 = var88.getDigit();
    java.util.Set var92 = var88.getMarks();
    lpf.model.core.Value var93 = var88.getDigit();
    java.util.Set var94 = var88.getMarks();
    lpf.model.core.Value var95 = var88.getDigit();
    java.util.Set var96 = var88.getMarks();
    boolean var97 = var26.add((java.lang.Object)var96);
    boolean var98 = var26.isEmpty();
    var26.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test320() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    java.lang.Object[] var11 = var1.toArray();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    boolean var29 = var18.retainAll((java.util.Collection)var26);
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var14.toArray(var30);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var14);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.lang.Object[] var52 = var35.toArray(var51);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var35);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    boolean var58 = var53.contains(var56);
    boolean var59 = var32.contains(var56);
    java.lang.String var60 = var56.toString();
    lpf.model.core.Cell var61 = new lpf.model.core.Cell(var56);
    java.util.Set var62 = var61.getMarks();
    var61.clearMarks();
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var66);
    lpf.model.core.Value var70 = new lpf.model.core.Value('#');
    var68.setDigit(var70);
    var68.clearMarks();
    lpf.model.core.Value var74 = new lpf.model.core.Value('#');
    var68.removeMark(var74);
    boolean var76 = var68.isOccupied();
    java.util.Set var77 = var68.getMarks();
    lpf.model.core.Value var78 = var68.getDigit();
    var61.addMark(var78);
    lpf.model.core.Value var80 = var61.getDigit();
    var61.clearMarks();
    boolean var82 = var1.add((java.lang.Object)var61);
    boolean var83 = var61.isOccupied();
    var61.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test321() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.util.Iterator var1 = var0.iterator();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = var14.toArray();
    java.lang.Object[] var19 = var3.toArray(var18);
    boolean var20 = var0.removeAll((java.util.Collection)var3);
    int var21 = var0.size();
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    boolean var41 = var35.isEmpty();
    boolean var42 = var35.isEmpty();
    boolean var43 = var35.isEmpty();
    java.lang.Object[] var44 = var35.toArray();
    int var45 = var35.size();
    java.lang.Object[] var46 = var35.toArray();
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var35);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    lpf.model.core.Cell var52 = new lpf.model.core.Cell(var50);
    var52.clearMarks();
    java.util.Set var54 = var52.getMarks();
    var52.clearMarks();
    var52.clearMarks();
    boolean var57 = var52.isOccupied();
    boolean var58 = var52.isOccupied();
    boolean var59 = var35.contains((java.lang.Object)var52);
    boolean var60 = var0.contains((java.lang.Object)var35);
    java.util.Iterator var61 = var35.iterator();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    java.lang.Object[] var80 = new java.lang.Object[] { var79};
    java.lang.Object[] var81 = var64.toArray(var80);
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var64);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '4');
    java.lang.String var86 = var85.toString();
    boolean var87 = var82.contains(var85);
    lpf.model.core.Location var90 = new lpf.model.core.Location(1, '4');
    java.lang.String var91 = var90.toString();
    lpf.model.core.Cell var92 = new lpf.model.core.Cell(var90);
    boolean var93 = var82.contains(var90);
    java.lang.String var94 = var90.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var95 = new lpf.model.kenken.InvalidKenKenPuzzleException(var94);
    java.lang.String var96 = var95.toString();
    java.lang.String var97 = var95.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var98 = new lpf.model.kenken.InvalidKenKenPuzzleException(var97);
    boolean var99 = var35.add((java.lang.Object)var98);
    
    // Checks the contract:  equals-hashcode on var52 and var92
    assertTrue("Contract failed: equals-hashcode on var52 and var92", var52.equals(var92) ? var52.hashCode() == var92.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var92 and var52
    assertTrue("Contract failed: equals-hashcode on var92 and var52", var92.equals(var52) ? var92.hashCode() == var52.hashCode() : true);

  }

  public void test322() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    int var5 = var0.size();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    java.lang.Object[] var11 = var0.toArray((java.lang.Object[])var7);
    lpf.model.core.Location var14 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    int var37 = var15.size();
    lpf.model.core.CellsIterator var38 = new lpf.model.core.CellsIterator(var7, (-1), var37);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var43 = new lpf.model.core.CellsIterator(var7, (-1), 1);
    boolean var44 = var43.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test323() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    java.util.Iterator var21 = var20.iterator();
    java.util.Iterator var22 = var20.iterator();
    java.util.Iterator var23 = var20.iterator();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var26.toArray(var42);
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var26);
    lpf.model.core.Value var46 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var48 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    boolean var76 = var53.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var77 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var53);
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var48, 100, 0);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    lpf.model.core.Cell var83 = new lpf.model.core.Cell(var81);
    var83.clearMarks();
    java.util.Set var85 = var83.getMarks();
    lpf.model.kenken.Cage var86 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var85);
    lpf.model.core.Location var88 = new lpf.model.core.Location(0, '#');
    boolean var89 = var44.contains(var88);
    boolean var90 = var20.contains(var88);
    lpf.model.core.Cell var91 = new lpf.model.core.Cell(var88);
    boolean var92 = var91.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test324() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    int var25 = var1.size();
    boolean var26 = var1.isEmpty();
    int var27 = var1.size();
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    boolean var45 = var40.contains((java.lang.Object)'#');
    boolean var46 = var40.isEmpty();
    boolean var47 = var40.isEmpty();
    boolean var48 = var40.isEmpty();
    java.util.Iterator var49 = var40.iterator();
    int var50 = var40.size();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var66 = var61.contains((java.lang.Object)'#');
    lpf.model.core.Location var67 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var67);
    boolean var69 = var68.isOccupied();
    var68.clearMarks();
    lpf.model.core.Value var71 = var68.getDigit();
    java.util.Set var72 = var68.getMarks();
    lpf.model.core.Value var73 = var68.getDigit();
    java.util.Set var74 = var68.getMarks();
    var68.clearDigit();
    var68.clearMarks();
    java.util.Set var77 = var68.getMarks();
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('4', var50, (java.util.Collection)var77);
    lpf.model.core.Value var79 = new lpf.model.core.Value('4');
    lpf.model.core.Location var80 = new lpf.model.core.Location(var27, '4');
    lpf.model.core.Cell[][] var82 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var85 = new lpf.model.core.CellsIterator(var82, 10, 0);
    boolean var86 = var85.hasNext();
    boolean var87 = var85.hasNext();
    lpf.model.core.Cell var88 = var85.next();
    boolean var89 = var85.hasNext();
    boolean var90 = var85.hasNext();
    lpf.model.core.Cell var91 = var85.next();
    lpf.model.core.Cell var92 = var85.next();
    boolean var93 = var85.hasNext();
    lpf.model.core.Cell var94 = var85.next();
    lpf.model.core.Cell var95 = var85.next();
    lpf.model.core.Cell var96 = var85.next();
    boolean var97 = var85.hasNext();
    boolean var98 = var80.equals((java.lang.Object)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test325() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    boolean var27 = var20.contains(var23);
    lpf.model.core.Cell var28 = new lpf.model.core.Cell(var23);
    lpf.model.core.Value var29 = var28.getDigit();
    var28.clearMarks();
    boolean var31 = var28.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test326() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    lpf.model.core.Location var34 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var39 = var36.remove((java.lang.Object)(short)100);
    boolean var40 = var34.equals((java.lang.Object)(short)100);
    boolean var41 = var20.contains(var34);
    lpf.model.core.Cell var42 = new lpf.model.core.Cell(var34);
    var42.clearDigit();
    boolean var44 = var42.isOccupied();
    java.util.Set var45 = var42.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test327() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    boolean var4 = var1.remove((java.lang.Object)(short)100);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var6.addAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.kenken.Cage var52 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var34);
    boolean var53 = var29.remove((java.lang.Object)var34);
    boolean var54 = var1.containsAll((java.util.Collection)var29);
    int var55 = var1.size();
    java.lang.Object[] var56 = var1.toArray();
    lpf.model.core.Location var59 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var64 = var61.remove((java.lang.Object)(short)100);
    boolean var65 = var59.equals((java.lang.Object)(short)100);
    java.lang.String var66 = var59.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var67 = new lpf.model.kenken.InvalidKenKenPuzzleException(var66);
    boolean var68 = var1.remove((java.lang.Object)var67);
    java.lang.Object[] var69 = var1.toArray();
    java.lang.Object[] var70 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(a,-1)"+ "'", var66.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test328() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.Location var29 = new lpf.model.core.Location(var23, ' ');
    java.lang.String var30 = var29.toString();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    java.lang.Object[] var56 = var34.toArray();
    java.util.Iterator var57 = var34.iterator();
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var34);
    boolean var59 = var34.isEmpty();
    java.util.Iterator var60 = var34.iterator();
    boolean var61 = var34.isEmpty();
    lpf.model.core.Cell[][] var63 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = new java.lang.Object[] { var81};
    java.lang.Object[] var83 = var66.toArray(var82);
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var66);
    int var85 = var66.size();
    lpf.model.core.Location var88 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var89 = new lpf.model.core.CellsIterator(var63, var85, 1);
    boolean var90 = var34.add((java.lang.Object)var89);
    boolean var91 = var29.equals((java.lang.Object)var89);
    lpf.model.core.Cell var92 = var89.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "( ,0)"+ "'", var30.equals("( ,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test329() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    lpf.model.core.Value var28 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var33.remove((java.lang.Object)var45);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var50.addAll((java.util.Collection)var73);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    java.lang.Object[] var83 = new java.lang.Object[] { var81};
    java.lang.Object[] var84 = var77.toArray(var83);
    java.lang.Object[] var85 = var73.toArray(var84);
    boolean var86 = var33.addAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage(' ', 1, (java.util.Collection)var33);
    java.util.Iterator var88 = var87.iterator();
    java.util.Iterator var89 = var87.iterator();
    java.util.Iterator var90 = var87.iterator();
    java.util.Iterator var91 = var87.iterator();
    java.util.Iterator var92 = var87.iterator();
    java.util.Iterator var93 = var87.iterator();
    java.util.Iterator var94 = var87.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var95 = var87.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test330() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    int var54 = var39.size();
    int var55 = var39.size();
    lpf.model.core.Value var57 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var58 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var59 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var60 = new lpf.model.core.Location(var55, ' ');
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.lang.Object[] var78 = var61.toArray(var77);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var61.containsAll((java.util.Collection)var79);
    java.lang.Object[] var83 = var61.toArray();
    var61.clear();
    java.lang.Object[] var85 = var61.toArray();
    int var86 = var61.size();
    boolean var87 = var60.equals((java.lang.Object)var61);
    boolean var88 = var61.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test331() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Value var6 = var4.getDigit();
    boolean var7 = var4.isOccupied();
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Value var10 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var12 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    boolean var38 = var17.retainAll((java.util.Collection)var26);
    boolean var40 = var17.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var17);
    lpf.model.core.CellsIterator var42 = new lpf.model.core.CellsIterator(var12, 100, 0);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    lpf.model.core.Cell var47 = new lpf.model.core.Cell(var45);
    var47.clearMarks();
    java.util.Set var49 = var47.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var49);
    lpf.model.core.Location var52 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var53 = new lpf.model.core.Cell(var52);
    java.lang.String var54 = var52.toString();
    boolean var55 = var4.equals((java.lang.Object)var52);
    
    // Checks the contract:  equals-hashcode on var4 and var47
    assertTrue("Contract failed: equals-hashcode on var4 and var47", var4.equals(var47) ? var4.hashCode() == var47.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var47 and var4
    assertTrue("Contract failed: equals-hashcode on var47 and var4", var47.equals(var4) ? var47.hashCode() == var4.hashCode() : true);

  }

  public void test332() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Cell var26 = new lpf.model.core.Cell(var23);
    lpf.model.kenken.InvalidKenKenPuzzleException var27 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var28 = var27.toString();
    boolean var29 = var23.equals((java.lang.Object)var27);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    boolean var52 = var31.retainAll((java.util.Collection)var40);
    boolean var54 = var31.contains((java.lang.Object)100);
    lpf.model.core.Location var56 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Cell var57 = new lpf.model.core.Cell(var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.String var62 = var60.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var63 = new lpf.model.kenken.InvalidKenKenPuzzleException(var62);
    lpf.model.kenken.InvalidKenKenPuzzleException var64 = new lpf.model.kenken.InvalidKenKenPuzzleException(var62);
    lpf.model.kenken.InvalidKenKenPuzzleException var65 = new lpf.model.kenken.InvalidKenKenPuzzleException(var62);
    lpf.model.kenken.InvalidKenKenPuzzleException var66 = new lpf.model.kenken.InvalidKenKenPuzzleException(var62);
    java.lang.String var67 = var66.toString();
    boolean var68 = var56.equals((java.lang.Object)var67);
    java.lang.String var69 = var56.toString();
    boolean var70 = var23.equals((java.lang.Object)var69);
    lpf.model.core.Cell var71 = new lpf.model.core.Cell(var23);
    
    // Checks the contract:  equals-hashcode on var26 and var71
    assertTrue("Contract failed: equals-hashcode on var26 and var71", var26.equals(var71) ? var26.hashCode() == var71.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var71 and var26
    assertTrue("Contract failed: equals-hashcode on var71 and var26", var71.equals(var26) ? var71.hashCode() == var26.hashCode() : true);

  }

  public void test333() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    int var25 = var1.size();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    boolean var48 = var27.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var27.addAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    boolean var57 = var54.remove((java.lang.Object)(short)100);
    boolean var58 = var50.retainAll((java.util.Collection)var54);
    java.lang.Object[] var59 = var50.toArray();
    boolean var60 = var1.add((java.lang.Object)var50);
    int var61 = var50.size();
    java.lang.Object[] var62 = var50.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test334() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var17 = new lpf.model.core.Cell(var16);
    lpf.model.core.Value var18 = var17.getDigit();
    boolean var19 = var17.isOccupied();
    var17.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test335() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    java.lang.Object[] var88 = var84.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var84);
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.CellsIterator var91 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var92 = var91.next();
    lpf.model.core.Cell var93 = var91.next();
    lpf.model.core.Cell var94 = var91.next();
    boolean var95 = var91.hasNext();
    lpf.model.core.Cell var96 = var91.next();
    boolean var97 = var91.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test336() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    boolean var8 = var4.isOccupied();
    lpf.model.core.Value var9 = var4.getDigit();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    lpf.model.core.Cell var14 = new lpf.model.core.Cell(var12);
    var14.clearMarks();
    boolean var17 = var14.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var18 = var14.getDigit();
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Cell var51 = var50.next();
    boolean var52 = var50.hasNext();
    boolean var53 = var14.equals((java.lang.Object)var52);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var69 = var64.contains((java.lang.Object)'#');
    lpf.model.core.Location var70 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var72 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var73 = var72.toString();
    boolean var74 = var70.equals((java.lang.Object)var72);
    boolean var75 = var14.equals((java.lang.Object)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    lpf.model.core.Cell var80 = new lpf.model.core.Cell(var78);
    lpf.model.core.Value var82 = new lpf.model.core.Value('#');
    var80.setDigit(var82);
    var14.addMark(var82);
    var14.clearMarks();
    java.util.Set var86 = var14.getMarks();
    var14.clearDigit();
    var14.clearDigit();
    lpf.model.core.Value var89 = var14.getDigit();
    boolean var90 = var9.equals((java.lang.Object)var14);
    
    // Checks the contract:  equals-hashcode on var4 and var80
    assertTrue("Contract failed: equals-hashcode on var4 and var80", var4.equals(var80) ? var4.hashCode() == var80.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var80 and var4
    assertTrue("Contract failed: equals-hashcode on var80 and var4", var80.equals(var4) ? var80.hashCode() == var4.hashCode() : true);

  }

  public void test337() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var12.remove((java.lang.Object)var24);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    java.util.Iterator var37 = var29.iterator();
    java.util.Iterator var38 = var29.iterator();
    boolean var39 = var24.containsAll((java.util.Collection)var29);
    boolean var40 = var24.isEmpty();
    boolean var41 = var4.equals((java.lang.Object)var24);
    lpf.model.core.Value var42 = var4.getDigit();
    java.util.Set var43 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test338() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    boolean var4 = var3.isOccupied();
    var3.clearMarks();
    boolean var6 = var3.isOccupied();
    lpf.model.core.Value var7 = var3.getDigit();
    boolean var8 = var3.isOccupied();
    var3.clearMarks();
    var3.clearDigit();
    boolean var11 = var3.isOccupied();
    java.util.Set var12 = var3.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test339() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    java.util.Iterator var26 = var20.iterator();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var42 = var37.contains((java.lang.Object)'#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var45 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var46 = var45.toString();
    boolean var47 = var43.equals((java.lang.Object)var45);
    boolean var48 = var20.contains(var43);
    java.lang.String var49 = var43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var46.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(#,100)"+ "'", var49.equals("(#,100)"));

  }

  public void test340() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var51.remove((java.lang.Object)var63);
    boolean var67 = var49.equals((java.lang.Object)var63);
    java.lang.String var68 = var49.toString();
    java.lang.String var69 = var49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(#,0)"+ "'", var68.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(#,0)"+ "'", var69.equals("(#,0)"));

  }

  public void test341() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    java.util.Set var5 = var4.getMarks();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.Object[] var13 = new java.lang.Object[] { var11};
    java.lang.Object[] var14 = var7.toArray(var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var28 = var7.retainAll((java.util.Collection)var16);
    boolean var30 = var7.add((java.lang.Object)0.0d);
    boolean var31 = var4.equals((java.lang.Object)var30);
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Value var34 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    boolean var50 = var45.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.lang.Object[] var68 = var51.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var51.containsAll((java.util.Collection)var69);
    var69.clear();
    int var74 = var69.size();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    java.util.Iterator var84 = var76.iterator();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    java.lang.Object[] var86 = var85.toArray();
    boolean var87 = var76.add((java.lang.Object)var85);
    boolean var88 = var76.isEmpty();
    boolean var89 = var76.isEmpty();
    lpf.model.kenken.Cage var90 = new lpf.model.kenken.Cage('#', var74, (java.util.Collection)var76);
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Value var92 = new lpf.model.core.Value('#');
    lpf.model.core.Value var93 = new lpf.model.core.Value('#');
    lpf.model.core.Value var94 = new lpf.model.core.Value('#');
    lpf.model.core.Value var95 = new lpf.model.core.Value('#');
    var4.addMark(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test342() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Value var22 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var24 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    boolean var52 = var29.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var29);
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var24, 100, 0);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    java.util.Set var61 = var59.getMarks();
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var61);
    lpf.model.core.Location var64 = new lpf.model.core.Location(0, '#');
    boolean var65 = var20.contains(var64);
    lpf.model.core.Cell var66 = new lpf.model.core.Cell(var64);
    java.lang.String var67 = var64.toString();
    java.lang.String var68 = var64.toString();
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    lpf.model.core.Cell var73 = new lpf.model.core.Cell(var71);
    var73.clearDigit();
    lpf.model.core.Value var75 = var73.getDigit();
    boolean var76 = var73.isOccupied();
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var81 = new lpf.model.kenken.InvalidKenKenPuzzleException(var80);
    java.lang.String var82 = var81.toString();
    boolean var83 = var73.equals((java.lang.Object)var82);
    boolean var84 = var73.isOccupied();
    boolean var85 = var64.equals((java.lang.Object)var84);
    
    // Checks the contract:  equals-hashcode on var59 and var73
    assertTrue("Contract failed: equals-hashcode on var59 and var73", var59.equals(var73) ? var59.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var73 and var59
    assertTrue("Contract failed: equals-hashcode on var73 and var59", var73.equals(var59) ? var73.hashCode() == var59.hashCode() : true);

  }

  public void test343() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    int var41 = var37.size();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var43.remove((java.lang.Object)var55);
    boolean var59 = var37.containsAll((java.util.Collection)var43);
    java.lang.Object[] var60 = var37.toArray();
    int var61 = var37.size();
    boolean var62 = var24.removeAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    boolean var87 = var66.retainAll((java.util.Collection)var75);
    java.lang.Object[] var88 = var66.toArray();
    java.util.Iterator var89 = var66.iterator();
    lpf.model.kenken.Cage var90 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var66);
    java.util.Iterator var91 = var90.iterator();
    java.util.Iterator var92 = var90.iterator();
    boolean var93 = var24.add((java.lang.Object)var90);
    int var94 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);

  }

  public void test344() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.lang.Object[] var13 = var9.toArray();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var15.remove((java.lang.Object)var27);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    boolean var46 = var35.retainAll((java.util.Collection)var43);
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.lang.Object[] var48 = var31.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var31.containsAll((java.util.Collection)var49);
    boolean var53 = var15.add((java.lang.Object)var52);
    boolean var54 = var9.removeAll((java.util.Collection)var15);
    var15.clear();
    int var56 = var15.size();
    lpf.model.core.Location var59 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var64 = var61.remove((java.lang.Object)(short)100);
    boolean var65 = var59.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var66 = new lpf.model.core.Cell(var59);
    boolean var67 = var66.isOccupied();
    lpf.model.core.Value var68 = var66.getDigit();
    boolean var69 = var66.isOccupied();
    boolean var70 = var15.contains((java.lang.Object)var66);
    var66.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(4,1)"+ "'", var40.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test345() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var40 = var19.retainAll((java.util.Collection)var28);
    boolean var42 = var19.contains((java.lang.Object)100);
    java.util.Iterator var43 = var19.iterator();
    boolean var44 = var4.equals((java.lang.Object)var43);
    java.util.Set var45 = var4.getMarks();
    lpf.model.kenken.InvalidKenKenPuzzleException var46 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var49 = new lpf.model.kenken.InvalidKenKenPuzzleException(var48);
    lpf.model.kenken.InvalidKenKenPuzzleException var50 = new lpf.model.kenken.InvalidKenKenPuzzleException(var48);
    lpf.model.kenken.InvalidKenKenPuzzleException var51 = new lpf.model.kenken.InvalidKenKenPuzzleException(var48);
    java.lang.String var52 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var53 = new lpf.model.kenken.InvalidKenKenPuzzleException(var52);
    boolean var54 = var4.equals((java.lang.Object)var53);
    java.lang.String var55 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var47.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var48.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var52.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var55.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));

  }

  public void test346() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    java.util.Iterator var21 = var20.iterator();
    java.util.Iterator var22 = var20.iterator();
    java.util.Iterator var23 = var20.iterator();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var26.toArray(var42);
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var26);
    lpf.model.core.Value var46 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var48 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    boolean var76 = var53.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var77 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var53);
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var48, 100, 0);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    lpf.model.core.Cell var83 = new lpf.model.core.Cell(var81);
    var83.clearMarks();
    java.util.Set var85 = var83.getMarks();
    lpf.model.kenken.Cage var86 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var85);
    lpf.model.core.Location var88 = new lpf.model.core.Location(0, '#');
    boolean var89 = var44.contains(var88);
    boolean var90 = var20.contains(var88);
    java.lang.String var91 = var88.toString();
    java.lang.String var92 = var88.toString();
    lpf.model.core.Cell var93 = new lpf.model.core.Cell(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(#,0)"+ "'", var91.equals("(#,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(#,0)"+ "'", var92.equals("(#,0)"));

  }

  public void test347() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    var4.clearMarks();
    lpf.model.core.Value var11 = new lpf.model.core.Value(' ');
    var4.addMark(var11);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var29 = var24.contains((java.lang.Object)'#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var31 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var32 = new lpf.model.core.Value('#');
    var4.setDigit(var32);
    java.util.Set var34 = var4.getMarks();
    lpf.model.core.Value var35 = var4.getDigit();
    java.util.Set var36 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test348() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var16.remove((java.lang.Object)var28);
    lpf.model.core.Value var33 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var35 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var49.retainAll((java.util.Collection)var57);
    boolean var61 = var40.retainAll((java.util.Collection)var49);
    boolean var63 = var40.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var64 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var40);
    lpf.model.core.CellsIterator var65 = new lpf.model.core.CellsIterator(var35, 100, 0);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    lpf.model.core.Cell var70 = new lpf.model.core.Cell(var68);
    var70.clearMarks();
    java.util.Set var72 = var70.getMarks();
    lpf.model.kenken.Cage var73 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var72);
    lpf.model.core.Location var75 = new lpf.model.core.Location(0, '#');
    boolean var76 = var28.add((java.lang.Object)var75);
    boolean var77 = var9.contains((java.lang.Object)var75);
    java.lang.String var78 = var75.toString();
    lpf.model.core.Cell var79 = new lpf.model.core.Cell(var75);
    var79.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(#,0)"+ "'", var78.equals("(#,0)"));

  }

  public void test349() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearMarks();
    boolean var12 = var4.isOccupied();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test350() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    java.lang.String var21 = var18.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var22 = new lpf.model.kenken.InvalidKenKenPuzzleException(var21);
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var25 = new lpf.model.kenken.InvalidKenKenPuzzleException(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var21.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var23.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var24.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));

  }

  public void test351() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var6 = var4.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var8 = new lpf.model.core.Value('#');
    var4.addMark(var8);
    lpf.model.core.Value var11 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var34 = var13.retainAll((java.util.Collection)var22);
    boolean var36 = var13.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.lang.Object[] var55 = var51.toArray(var54);
    var51.clear();
    boolean var57 = var38.contains((java.lang.Object)var51);
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var51);
    lpf.model.core.Value var59 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var60 = new lpf.model.core.Value(' ');
    var4.removeMark(var60);
    boolean var62 = var4.isOccupied();
    java.util.Set var63 = var4.getMarks();
    var4.clearDigit();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test352() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    boolean var54 = var39.isEmpty();
    var39.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test353() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var46 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    java.lang.Object[] var72 = var50.toArray();
    java.util.Iterator var73 = var50.iterator();
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var50);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var76);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var86 = new lpf.model.core.Value('#');
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    lpf.model.core.Value var88 = new lpf.model.core.Value('#');
    lpf.model.core.Value var89 = new lpf.model.core.Value('#');
    lpf.model.core.Value var90 = new lpf.model.core.Value('#');
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    lpf.model.core.Location var94 = new lpf.model.core.Location((-1), 'a');
    boolean var95 = var91.equals((java.lang.Object)var94);
    java.lang.String var96 = var94.toString();
    java.lang.String var97 = var94.toString();
    lpf.model.core.Cell var98 = new lpf.model.core.Cell(var94);
    java.lang.String var99 = var94.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "(a,-1)"+ "'", var96.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "(a,-1)"+ "'", var97.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "(a,-1)"+ "'", var99.equals("(a,-1)"));

  }

  public void test354() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    java.lang.Object[] var36 = var24.toArray(var35);
    int var37 = var24.size();
    java.util.Iterator var38 = var24.iterator();
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    lpf.model.core.Cell var43 = new lpf.model.core.Cell(var41);
    lpf.model.core.Value var45 = new lpf.model.core.Value('#');
    var43.setDigit(var45);
    boolean var47 = var43.isOccupied();
    java.util.Set var48 = var43.getMarks();
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    lpf.model.core.Cell var53 = new lpf.model.core.Cell(var51);
    var53.clearDigit();
    lpf.model.core.Value var56 = new lpf.model.core.Value('#');
    var53.addMark(var56);
    var43.setDigit(var56);
    boolean var59 = var43.isOccupied();
    var43.clearMarks();
    boolean var61 = var24.remove((java.lang.Object)var43);
    boolean var62 = var43.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test355() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Value var5 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var36 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var12);
    lpf.model.core.CellsIterator var37 = new lpf.model.core.CellsIterator(var7, 100, 0);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    lpf.model.core.Cell var42 = new lpf.model.core.Cell(var40);
    var42.clearMarks();
    java.util.Set var44 = var42.getMarks();
    lpf.model.kenken.Cage var45 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var44);
    lpf.model.core.Location var47 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell[][] var49 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.lang.Object[] var69 = var52.toArray(var68);
    lpf.model.kenken.Cage var70 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var52);
    int var71 = var52.size();
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var75 = new lpf.model.core.CellsIterator(var49, var71, 1);
    lpf.model.core.CellsIterator var76 = new lpf.model.core.CellsIterator(var3, 0, 1);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.kenken.InvalidKenKenPuzzleException var80 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var81 = var80.toString();
    java.lang.String var82 = var80.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var83 = new lpf.model.kenken.InvalidKenKenPuzzleException(var82);
    boolean var84 = var77.add((java.lang.Object)var83);
    lpf.model.kenken.Cage var85 = new lpf.model.kenken.Cage('#', 1, (java.util.Collection)var77);
    java.util.Iterator var86 = var85.iterator();
    java.util.Iterator var87 = var85.iterator();
    boolean var88 = var85.isAdjacent();
    boolean var89 = var85.isAdjacent();
    java.util.Iterator var90 = var85.iterator();
    boolean var91 = var85.isAdjacent();
    java.util.Iterator var92 = var85.iterator();
    boolean var93 = var85.isAdjacent();
    java.util.Iterator var94 = var85.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var81.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test356() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.lang.Object[] var52 = var30.toArray();
    java.util.Iterator var53 = var30.iterator();
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var30);
    java.util.Iterator var55 = var54.iterator();
    boolean var56 = var1.contains((java.lang.Object)var54);
    java.lang.Object[] var57 = var1.toArray();
    java.util.Iterator var58 = var1.iterator();
    java.util.Iterator var59 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test357() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    boolean var4 = var0.isEmpty();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test358() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var45 = var24.retainAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var24.addAll((java.util.Collection)var47);
    int var50 = var47.size();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.lang.Object[] var68 = var51.toArray(var67);
    boolean var69 = var47.add((java.lang.Object)var67);
    boolean var70 = var9.retainAll((java.util.Collection)var47);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var85 = var80.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    lpf.model.core.Location var91 = new lpf.model.core.Location(1, '4');
    java.lang.String var92 = var91.toString();
    java.lang.Object[] var93 = new java.lang.Object[] { var91};
    java.lang.Object[] var94 = var87.toArray(var93);
    boolean var95 = var80.remove((java.lang.Object)var87);
    boolean var96 = var47.removeAll((java.util.Collection)var80);
    var80.clear();
    int var98 = var80.size();
    java.lang.Object[] var99 = var80.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(4,1)"+ "'", var92.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test359() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var39.containsAll((java.util.Collection)var54);
    int var56 = var54.size();
    int var57 = var54.size();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    boolean var79 = var68.retainAll((java.util.Collection)var76);
    boolean var80 = var59.retainAll((java.util.Collection)var68);
    boolean var82 = var59.contains((java.lang.Object)100);
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Value var85 = new lpf.model.core.Value('a');
    lpf.model.core.Location var86 = new lpf.model.core.Location(var57, 'a');
    lpf.model.core.Value var87 = new lpf.model.core.Value('a');
    lpf.model.core.Value var88 = new lpf.model.core.Value('a');
    lpf.model.core.Value var89 = new lpf.model.core.Value('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test360() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var31 = var28.remove((java.lang.Object)(short)100);
    boolean var32 = var24.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    boolean var56 = var45.retainAll((java.util.Collection)var53);
    boolean var57 = var36.retainAll((java.util.Collection)var45);
    boolean var59 = var36.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var60 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var36);
    boolean var61 = var36.isEmpty();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var84 = var63.retainAll((java.util.Collection)var72);
    java.util.Iterator var85 = var72.iterator();
    boolean var86 = var36.remove((java.lang.Object)var72);
    boolean var87 = var72.isEmpty();
    boolean var88 = var24.retainAll((java.util.Collection)var72);
    int var89 = var72.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test361() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    boolean var56 = var25.addAll((java.util.Collection)var48);
    boolean var57 = var12.addAll((java.util.Collection)var25);
    java.lang.Object[] var58 = var25.toArray();
    int var59 = var25.size();
    boolean var60 = var4.equals((java.lang.Object)var25);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    boolean var83 = var81.retainAll((java.util.Collection)var82);
    boolean var84 = var73.retainAll((java.util.Collection)var81);
    boolean var85 = var64.retainAll((java.util.Collection)var73);
    boolean var87 = var64.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var88 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var64);
    java.lang.Object[] var89 = var64.toArray();
    int var90 = var64.size();
    lpf.model.core.Location var92 = new lpf.model.core.Location(var90, ' ');
    lpf.model.core.Value var93 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var94 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var95 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var96 = new lpf.model.core.Value(' ');
    lpf.model.core.Value var97 = new lpf.model.core.Value(' ');
    var4.addMark(var97);
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test362() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    java.util.Set var12 = var4.getMarks();
    java.util.Set var13 = var4.getMarks();
    boolean var14 = var4.isOccupied();
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    lpf.model.core.Cell var19 = new lpf.model.core.Cell(var17);
    lpf.model.core.Value var21 = new lpf.model.core.Value('#');
    var19.setDigit(var21);
    boolean var23 = var19.isOccupied();
    boolean var24 = var19.isOccupied();
    lpf.model.kenken.InvalidKenKenPuzzleException var26 = new lpf.model.kenken.InvalidKenKenPuzzleException("hi!");
    java.lang.String var27 = var26.toString();
    java.lang.String var28 = var26.toString();
    boolean var29 = var19.equals((java.lang.Object)var26);
    java.lang.String var30 = var26.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var31 = new lpf.model.kenken.InvalidKenKenPuzzleException(var30);
    java.lang.String var32 = var31.toString();
    java.lang.String var33 = var31.toString();
    boolean var34 = var4.equals((java.lang.Object)var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var70 = var49.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    boolean var80 = var49.addAll((java.util.Collection)var72);
    boolean var81 = var36.addAll((java.util.Collection)var49);
    var49.clear();
    java.util.Iterator var83 = var49.iterator();
    int var84 = var49.size();
    var49.clear();
    boolean var86 = var49.isEmpty();
    int var87 = var49.size();
    boolean var88 = var4.equals((java.lang.Object)var49);
    int var89 = var49.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var27.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var28.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var30.equals("lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var32.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: hi!"+ "'", var33.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test363() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    boolean var12 = var4.isOccupied();
    boolean var13 = var4.isOccupied();
    var4.clearMarks();
    java.util.Set var15 = var4.getMarks();
    lpf.model.core.Value var16 = var4.getDigit();
    java.util.Set var17 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test364() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.lang.String var48 = var44.toString();
    lpf.model.core.Cell var49 = new lpf.model.core.Cell(var44);
    java.util.Set var50 = var49.getMarks();
    lpf.model.core.Value var51 = var49.getDigit();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var66 = var61.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.Object[] var74 = new java.lang.Object[] { var72};
    java.lang.Object[] var75 = var68.toArray(var74);
    boolean var76 = var61.remove((java.lang.Object)var68);
    boolean var77 = var49.equals((java.lang.Object)var76);
    lpf.model.core.Value var78 = var49.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test365() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    int var5 = var0.size();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    java.lang.Object[] var11 = var0.toArray((java.lang.Object[])var7);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var13.toArray(var16);
    var13.clear();
    var13.clear();
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    lpf.model.core.Cell var24 = new lpf.model.core.Cell(var22);
    var24.clearMarks();
    boolean var27 = var24.equals((java.lang.Object)(short)0);
    boolean var29 = var24.equals((java.lang.Object)0.0f);
    boolean var30 = var13.add((java.lang.Object)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    boolean var63 = var32.addAll((java.util.Collection)var55);
    var32.clear();
    var32.clear();
    boolean var66 = var13.containsAll((java.util.Collection)var32);
    int var67 = var32.size();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    lpf.model.core.Location var82 = new lpf.model.core.Location(1, '4');
    java.lang.String var83 = var82.toString();
    java.lang.Object[] var84 = new java.lang.Object[] { var82};
    java.lang.Object[] var85 = var78.toArray(var84);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var78.retainAll((java.util.Collection)var86);
    boolean var90 = var69.retainAll((java.util.Collection)var78);
    boolean var92 = var69.contains((java.lang.Object)100);
    java.lang.Object[] var93 = var69.toArray();
    java.lang.Object[] var94 = var69.toArray();
    boolean var95 = var69.isEmpty();
    int var96 = var69.size();
    lpf.model.core.CellsIterator var97 = new lpf.model.core.CellsIterator(var7, var67, var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(4,1)"+ "'", var83.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test366() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    java.util.Set var8 = var4.getMarks();
    lpf.model.core.Value var9 = var4.getDigit();
    boolean var10 = var4.isOccupied();
    lpf.model.core.Value var11 = var4.getDigit();
    lpf.model.core.Value var12 = var4.getDigit();
    lpf.model.core.Value var13 = var4.getDigit();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var37.retainAll((java.util.Collection)var45);
    boolean var49 = var28.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    boolean var59 = var28.addAll((java.util.Collection)var51);
    boolean var60 = var15.addAll((java.util.Collection)var28);
    java.lang.Object[] var61 = var28.toArray();
    java.util.Iterator var62 = var28.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var64 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var65 = var64.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var66 = new lpf.model.kenken.InvalidKenKenPuzzleException(var65);
    lpf.model.kenken.InvalidKenKenPuzzleException var67 = new lpf.model.kenken.InvalidKenKenPuzzleException(var65);
    lpf.model.kenken.InvalidKenKenPuzzleException var68 = new lpf.model.kenken.InvalidKenKenPuzzleException(var65);
    lpf.model.kenken.InvalidKenKenPuzzleException var69 = new lpf.model.kenken.InvalidKenKenPuzzleException(var65);
    lpf.model.kenken.InvalidKenKenPuzzleException var70 = new lpf.model.kenken.InvalidKenKenPuzzleException(var65);
    boolean var71 = var28.remove((java.lang.Object)var65);
    boolean var72 = var28.isEmpty();
    java.util.Iterator var73 = var28.iterator();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.kenken.InvalidKenKenPuzzleException var77 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var80 = new lpf.model.kenken.InvalidKenKenPuzzleException(var79);
    boolean var81 = var74.add((java.lang.Object)var80);
    java.lang.String var82 = var80.toString();
    java.lang.String var83 = var80.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var84 = new lpf.model.kenken.InvalidKenKenPuzzleException(var83);
    java.lang.String var85 = var84.toString();
    java.lang.String var86 = var84.toString();
    java.lang.String var87 = var84.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var87);
    java.lang.String var89 = var88.toString();
    boolean var90 = var28.add((java.lang.Object)var89);
    boolean var91 = var13.equals((java.lang.Object)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var65.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var78.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var79.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var83.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var85.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var86.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var89.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test367() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var20.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.lang.Object[] var37 = var33.toArray(var36);
    var33.clear();
    boolean var39 = var20.contains((java.lang.Object)var33);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.lang.Object[] var57 = var40.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    java.lang.Object[] var67 = var40.toArray(var66);
    java.lang.Object[] var68 = var33.toArray(var66);
    java.lang.Object[] var69 = var14.toArray(var68);
    boolean var70 = var1.removeAll((java.util.Collection)var14);
    java.lang.Object[] var71 = var1.toArray();
    boolean var72 = var1.isEmpty();
    var1.clear();
    var1.clear();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test368() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var27.toArray(var30);
    var27.clear();
    boolean var33 = var14.contains((java.lang.Object)var27);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    java.lang.Object[] var61 = var34.toArray(var60);
    java.lang.Object[] var62 = var27.toArray(var60);
    java.util.Iterator var63 = var27.iterator();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    java.util.Iterator var65 = var64.iterator();
    var64.clear();
    boolean var67 = var27.retainAll((java.util.Collection)var64);
    boolean var68 = var9.removeAll((java.util.Collection)var64);
    boolean var69 = var9.isEmpty();
    lpf.model.core.Location var72 = new lpf.model.core.Location(1, '4');
    java.lang.String var73 = var72.toString();
    java.lang.String var74 = var72.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var75 = new lpf.model.kenken.InvalidKenKenPuzzleException(var74);
    boolean var76 = var9.contains((java.lang.Object)var75);
    java.lang.String var77 = var75.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var78 = new lpf.model.kenken.InvalidKenKenPuzzleException(var77);
    java.lang.String var79 = var78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(4,1)"+ "'", var73.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var77.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var79.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test369() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    lpf.model.core.Cell var14 = new lpf.model.core.Cell(var12);
    lpf.model.core.Value var16 = new lpf.model.core.Value('#');
    var14.setDigit(var16);
    var4.removeMark(var16);
    var4.clearDigit();
    var4.clearDigit();
    boolean var21 = var4.isOccupied();
    var4.clearMarks();
    java.util.Set var23 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test370() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    lpf.model.core.Cell var51 = new lpf.model.core.Cell(var49);
    var51.clearMarks();
    boolean var54 = var51.equals((java.lang.Object)(short)0);
    boolean var55 = var51.isOccupied();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    boolean var78 = var57.retainAll((java.util.Collection)var66);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var57.addAll((java.util.Collection)var80);
    int var83 = var80.size();
    boolean var84 = var51.equals((java.lang.Object)var80);
    boolean var85 = var1.removeAll((java.util.Collection)var80);
    java.lang.Object[] var86 = var1.toArray();
    var1.clear();
    java.lang.Object[] var88 = var1.toArray();
    java.util.Iterator var89 = var1.iterator();
    java.util.Iterator var90 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test371() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var2.addAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var30.toArray(var46);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var30);
    boolean var49 = var25.remove((java.lang.Object)var30);
    boolean var50 = var25.isEmpty();
    int var51 = var25.size();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var68 = var63.contains((java.lang.Object)'#');
    lpf.model.core.Location var69 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var70 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var71 = new lpf.model.core.Location(var51, '#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var73 = new lpf.model.core.Cell(var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    lpf.model.core.Cell var78 = new lpf.model.core.Cell(var76);
    var78.clearMarks();
    java.util.Set var80 = var78.getMarks();
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '4');
    java.lang.String var84 = var83.toString();
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var83);
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    var85.setDigit(var87);
    var85.clearMarks();
    lpf.model.core.Value var91 = new lpf.model.core.Value('#');
    var85.removeMark(var91);
    var78.removeMark(var91);
    var73.setDigit(var91);
    lpf.model.core.Value var95 = var73.getDigit();
    lpf.model.core.Value var96 = var73.getDigit();
    boolean var97 = var73.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test372() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var40 = var19.retainAll((java.util.Collection)var28);
    boolean var42 = var19.contains((java.lang.Object)100);
    java.util.Iterator var43 = var19.iterator();
    boolean var44 = var4.equals((java.lang.Object)var43);
    java.util.Set var45 = var4.getMarks();
    java.util.Set var46 = var4.getMarks();
    lpf.model.core.Value var47 = var4.getDigit();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test373() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.String var36 = var34.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var37 = new lpf.model.kenken.InvalidKenKenPuzzleException(var36);
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var36);
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var41 = new lpf.model.kenken.InvalidKenKenPuzzleException(var40);
    boolean var42 = var28.equals((java.lang.Object)var40);
    lpf.model.core.Cell var43 = new lpf.model.core.Cell(var28);
    
    // Checks the contract:  equals-hashcode on var30 and var43
    assertTrue("Contract failed: equals-hashcode on var30 and var43", var30.equals(var43) ? var30.hashCode() == var43.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var43 and var30
    assertTrue("Contract failed: equals-hashcode on var43 and var30", var43.equals(var30) ? var43.hashCode() == var30.hashCode() : true);

  }

  public void test374() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var43);
    java.util.Set var45 = var44.getMarks();
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var48);
    lpf.model.core.Value var52 = new lpf.model.core.Value('#');
    var50.setDigit(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var55.remove((java.lang.Object)var67);
    boolean var71 = var52.equals((java.lang.Object)var55);
    var44.removeMark(var52);
    boolean var73 = var44.isOccupied();
    lpf.model.kenken.InvalidKenKenPuzzleException var75 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var76 = var75.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var77 = new lpf.model.kenken.InvalidKenKenPuzzleException(var76);
    boolean var78 = var44.equals((java.lang.Object)var77);
    java.lang.String var79 = var77.toString();
    java.lang.String var80 = var77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var76.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var79.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var80.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));

  }

  public void test375() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    java.lang.Object[] var1 = var0.toArray();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.retainAll((java.util.Collection)var21);
    boolean var25 = var4.retainAll((java.util.Collection)var13);
    boolean var27 = var4.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    boolean var43 = var38.contains((java.lang.Object)'#');
    lpf.model.core.Location var44 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var45 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var68 = var47.retainAll((java.util.Collection)var56);
    boolean var70 = var47.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    java.lang.Object[] var84 = var80.toArray();
    lpf.model.kenken.Cage var85 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var80);
    lpf.model.core.Location var86 = new lpf.model.core.Location(100, '#');
    java.lang.String var87 = var86.toString();
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var86);
    java.util.Set var89 = var88.getMarks();
    boolean var90 = var0.retainAll((java.util.Collection)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(#,100)"+ "'", var87.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test376() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.lang.Object[] var44 = var27.toArray(var43);
    lpf.model.kenken.Cage var45 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var27);
    int var46 = var27.size();
    boolean var47 = var9.retainAll((java.util.Collection)var27);
    java.util.Iterator var48 = var9.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var50.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = var58.toArray();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var81 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var82 = var81.toString();
    boolean var83 = var79.equals((java.lang.Object)var81);
    lpf.model.core.Cell var84 = new lpf.model.core.Cell(var79);
    java.lang.String var85 = var79.toString();
    boolean var86 = var58.contains((java.lang.Object)var85);
    boolean var87 = var9.retainAll((java.util.Collection)var58);
    var9.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(#,100)"+ "'", var85.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test377() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.lang.Object[] var64 = var47.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    java.lang.Object[] var74 = var47.toArray(var73);
    java.lang.Object[] var75 = var34.toArray(var73);
    boolean var76 = var1.retainAll((java.util.Collection)var34);
    boolean var77 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test378() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var2.addAll((java.util.Collection)var25);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var30.toArray(var46);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var30);
    boolean var49 = var25.remove((java.lang.Object)var30);
    boolean var50 = var25.isEmpty();
    int var51 = var25.size();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var68 = var63.contains((java.lang.Object)'#');
    lpf.model.core.Location var69 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var70 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var71 = new lpf.model.core.Location(var51, '#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    java.lang.String var73 = var72.toString();
    lpf.model.core.Cell var74 = new lpf.model.core.Cell(var72);
    java.lang.String var75 = var72.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var76 = new lpf.model.kenken.InvalidKenKenPuzzleException(var75);
    java.lang.String var77 = var76.toString();
    java.lang.String var78 = var76.toString();
    java.lang.String var79 = var76.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(#,100)"+ "'", var73.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(#,100)"+ "'", var75.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var77.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var78.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"+ "'", var79.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (#,100)"));

  }

  public void test379() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var70 = var49.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var49.addAll((java.util.Collection)var72);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    java.lang.Object[] var84 = var72.toArray(var83);
    boolean var85 = var24.retainAll((java.util.Collection)var72);
    java.util.Iterator var86 = var24.iterator();
    int var87 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test380() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var41.toArray(var44);
    var41.clear();
    boolean var47 = var28.contains((java.lang.Object)var41);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var41);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    java.lang.Object[] var65 = var61.toArray();
    java.lang.Object[] var66 = var50.toArray(var65);
    java.lang.Object[] var67 = var41.toArray(var65);
    java.util.Iterator var68 = var41.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test381() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    boolean var17 = var12.contains((java.lang.Object)'#');
    boolean var18 = var12.isEmpty();
    boolean var19 = var12.isEmpty();
    boolean var20 = var12.isEmpty();
    java.util.Iterator var21 = var12.iterator();
    int var22 = var12.size();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var24.remove((java.lang.Object)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var54 = var49.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    boolean var64 = var49.remove((java.lang.Object)var56);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    lpf.model.core.Cell var69 = new lpf.model.core.Cell(var67);
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    var69.setDigit(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var74.remove((java.lang.Object)var86);
    boolean var90 = var71.equals((java.lang.Object)var74);
    boolean var91 = var49.addAll((java.util.Collection)var74);
    boolean var92 = var24.removeAll((java.util.Collection)var49);
    boolean var93 = var24.isEmpty();
    var24.clear();
    lpf.model.kenken.Cage var95 = new lpf.model.kenken.Cage('4', var22, (java.util.Collection)var24);
    java.util.Iterator var96 = var95.iterator();
    java.util.Iterator var97 = var95.iterator();
    java.util.Iterator var98 = var95.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var99 = var95.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test382() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    lpf.model.core.Cell var14 = new lpf.model.core.Cell(var12);
    lpf.model.core.Value var16 = new lpf.model.core.Value('#');
    var14.setDigit(var16);
    var4.removeMark(var16);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Location var24 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Value var25 = new lpf.model.core.Value('a');
    lpf.model.core.Value var26 = new lpf.model.core.Value('a');
    lpf.model.core.Value var27 = new lpf.model.core.Value('a');
    boolean var28 = var4.equals((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test383() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var4 = new lpf.model.kenken.InvalidKenKenPuzzleException(var3);
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    java.lang.String var7 = var4.toString();
    java.lang.String var8 = var4.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var9 = new lpf.model.kenken.InvalidKenKenPuzzleException(var8);
    java.lang.String var10 = var9.toString();
    java.lang.String var11 = var9.toString();
    java.lang.String var12 = var9.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var13 = new lpf.model.kenken.InvalidKenKenPuzzleException(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var5.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var6.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var7.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var8.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var10.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var11.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var12.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test384() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var43 = var22.retainAll((java.util.Collection)var31);
    java.lang.Object[] var44 = var22.toArray();
    java.util.Iterator var45 = var22.iterator();
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var22);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var48);
    java.util.Iterator var57 = var48.iterator();
    var48.clear();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var75 = var70.contains((java.lang.Object)'#');
    lpf.model.core.Location var76 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var77 = new lpf.model.core.Location((-1), '#');
    boolean var78 = var48.add((java.lang.Object)var77);
    lpf.model.core.Cell var79 = new lpf.model.core.Cell(var77);
    var79.clearDigit();
    boolean var81 = var79.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test385() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    java.lang.Object[] var88 = var84.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var84);
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.CellsIterator var91 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var92 = var91.next();
    boolean var93 = var91.hasNext();
    lpf.model.core.Cell var94 = var91.next();
    lpf.model.core.Cell var95 = var91.next();
    boolean var96 = var91.hasNext();
    boolean var97 = var91.hasNext();
    boolean var98 = var91.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var91.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test386() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    lpf.model.core.Value var22 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var24 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    boolean var52 = var29.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var29);
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var24, 100, 0);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    java.util.Set var61 = var59.getMarks();
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var61);
    lpf.model.core.Location var64 = new lpf.model.core.Location(0, '#');
    boolean var65 = var16.equals((java.lang.Object)'#');
    lpf.model.core.Cell var66 = new lpf.model.core.Cell(var16);
    java.util.Set var67 = var66.getMarks();
    lpf.model.core.Value var68 = var66.getDigit();
    var66.clearMarks();
    lpf.model.core.Value var70 = var66.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test387() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.lang.Object[] var52 = var30.toArray();
    java.util.Iterator var53 = var30.iterator();
    boolean var54 = var0.containsAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var69.toArray(var72);
    var69.clear();
    boolean var75 = var56.contains((java.lang.Object)var69);
    boolean var76 = var0.add((java.lang.Object)var56);
    int var77 = var56.size();
    java.lang.Object[] var78 = var56.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test388() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var19 = var18.toString();
    boolean var20 = var16.equals((java.lang.Object)var18);
    lpf.model.core.Value var22 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var24 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    boolean var50 = var29.retainAll((java.util.Collection)var38);
    boolean var52 = var29.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var29);
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var24, 100, 0);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    lpf.model.core.Cell var59 = new lpf.model.core.Cell(var57);
    var59.clearMarks();
    java.util.Set var61 = var59.getMarks();
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var61);
    lpf.model.core.Location var64 = new lpf.model.core.Location(0, '#');
    boolean var65 = var16.equals((java.lang.Object)'#');
    java.lang.String var66 = var16.toString();
    lpf.model.core.Cell var67 = new lpf.model.core.Cell(var16);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { var85};
    java.lang.Object[] var87 = var70.toArray(var86);
    lpf.model.kenken.Cage var88 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var70);
    java.util.Iterator var89 = var88.iterator();
    java.util.Iterator var90 = var88.iterator();
    boolean var91 = var16.equals((java.lang.Object)var88);
    java.util.Iterator var92 = var88.iterator();
    java.util.Iterator var93 = var88.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var94 = var88.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(#,100)"+ "'", var66.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test389() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    boolean var8 = var6.retainAll((java.util.Collection)var7);
    lpf.model.core.Location var11 = new lpf.model.core.Location(1, '4');
    java.lang.String var12 = var11.toString();
    java.lang.Object[] var13 = new java.lang.Object[] { var11};
    java.lang.Object[] var14 = var7.toArray(var13);
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    boolean var18 = var7.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.lang.Object[] var24 = var20.toArray(var23);
    var20.clear();
    boolean var26 = var7.contains((java.lang.Object)var20);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.lang.Object[] var44 = var27.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    java.lang.Object[] var54 = var27.toArray(var53);
    java.lang.Object[] var55 = var20.toArray(var53);
    java.lang.Object[] var56 = var1.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var79 = var58.retainAll((java.util.Collection)var67);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var58.addAll((java.util.Collection)var81);
    boolean var84 = var1.addAll((java.util.Collection)var58);
    java.util.Iterator var85 = var58.iterator();
    java.util.Iterator var86 = var58.iterator();
    var58.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test390() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var76 = var55.retainAll((java.util.Collection)var64);
    boolean var77 = var39.addAll((java.util.Collection)var64);
    int var78 = var64.size();
    java.util.Iterator var79 = var64.iterator();
    java.util.Iterator var80 = var64.iterator();
    var64.clear();
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    lpf.model.core.Location var87 = new lpf.model.core.Location(1, '4');
    java.lang.String var88 = var87.toString();
    java.lang.Object[] var89 = new java.lang.Object[] { var87};
    java.lang.Object[] var90 = var83.toArray(var89);
    lpf.model.core.ArraySet var91 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var92 = new lpf.model.core.ArraySet();
    boolean var93 = var91.retainAll((java.util.Collection)var92);
    boolean var94 = var83.retainAll((java.util.Collection)var91);
    var83.clear();
    java.util.Iterator var96 = var83.iterator();
    boolean var97 = var64.retainAll((java.util.Collection)var83);
    boolean var98 = var83.isEmpty();
    int var99 = var83.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(4,1)"+ "'", var88.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 0);

  }

  public void test391() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Cell[][] var10 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    boolean var38 = var15.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var39 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var15);
    lpf.model.core.CellsIterator var40 = new lpf.model.core.CellsIterator(var10, 100, 0);
    lpf.model.core.Cell var41 = var40.next();
    boolean var42 = var40.hasNext();
    boolean var43 = var4.equals((java.lang.Object)var42);
    boolean var44 = var4.isOccupied();
    java.util.Set var45 = var4.getMarks();
    var4.clearMarks();
    var4.clearMarks();
    boolean var48 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test392() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    java.lang.Object[] var42 = var20.toArray();
    java.util.Iterator var43 = var20.iterator();
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var20);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var76 = var73.remove((java.lang.Object)(short)100);
    boolean var77 = var69.retainAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var73);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    java.util.Iterator var80 = var79.iterator();
    boolean var81 = var73.containsAll((java.util.Collection)var79);
    java.util.Iterator var82 = var79.iterator();
    java.util.Iterator var83 = var79.iterator();
    java.util.Iterator var84 = var79.iterator();
    int var85 = var79.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test393() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    lpf.model.core.Location var13 = new lpf.model.core.Location(1, '4');
    java.lang.String var14 = var13.toString();
    lpf.model.core.Cell var15 = new lpf.model.core.Cell(var13);
    var15.clearMarks();
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    lpf.model.core.Cell var21 = new lpf.model.core.Cell(var19);
    lpf.model.core.Value var23 = new lpf.model.core.Value('#');
    var21.setDigit(var23);
    var15.addMark(var23);
    lpf.model.core.Value var26 = var15.getDigit();
    var15.clearDigit();
    java.util.Set var28 = var15.getMarks();
    lpf.model.core.Value var29 = var15.getDigit();
    boolean var30 = var15.isOccupied();
    lpf.model.core.Value var31 = var15.getDigit();
    boolean var32 = var15.isOccupied();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.lang.Object[] var52 = var35.toArray(var51);
    lpf.model.kenken.Cage var53 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var35);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var56.toArray(var72);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var56);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    boolean var79 = var74.contains(var77);
    boolean var80 = var53.contains(var77);
    java.util.Iterator var81 = var53.iterator();
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.String var86 = var84.toString();
    java.lang.String var87 = var84.toString();
    boolean var88 = var53.contains(var84);
    boolean var89 = var15.equals((java.lang.Object)var84);
    boolean var90 = var1.contains((java.lang.Object)var15);
    lpf.model.core.Value var91 = var15.getDigit();
    java.util.Set var92 = var15.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(4,1)"+ "'", var14.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(4,1)"+ "'", var86.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(4,1)"+ "'", var87.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test394() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    boolean var50 = var18.containsAll((java.util.Collection)var25);
    var18.clear();
    boolean var52 = var18.isEmpty();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    boolean var75 = var54.retainAll((java.util.Collection)var63);
    java.util.Iterator var76 = var54.iterator();
    boolean var77 = var54.isEmpty();
    boolean var78 = var54.isEmpty();
    java.lang.Object[] var79 = var54.toArray();
    boolean var80 = var18.containsAll((java.util.Collection)var54);
    int var81 = var54.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test395() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.lang.Object[] var27 = var23.toArray(var26);
    var23.clear();
    var23.clear();
    java.lang.Object[] var30 = var23.toArray();
    lpf.model.core.Cell[][] var32 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    boolean var60 = var37.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var61 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var37);
    lpf.model.core.CellsIterator var62 = new lpf.model.core.CellsIterator(var32, 100, 0);
    boolean var63 = var23.remove((java.lang.Object)0);
    boolean var64 = var18.containsAll((java.util.Collection)var23);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    lpf.model.core.Cell var69 = new lpf.model.core.Cell(var67);
    lpf.model.core.Value var71 = new lpf.model.core.Value('#');
    var69.setDigit(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '4');
    java.lang.String var79 = var78.toString();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.Object[] var81 = var74.toArray(var80);
    lpf.model.core.ArraySet var82 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    boolean var84 = var82.retainAll((java.util.Collection)var83);
    boolean var85 = var74.retainAll((java.util.Collection)var82);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var87 = new lpf.model.core.ArraySet();
    boolean var88 = var86.retainAll((java.util.Collection)var87);
    boolean var89 = var74.remove((java.lang.Object)var86);
    boolean var90 = var71.equals((java.lang.Object)var74);
    boolean var91 = var18.removeAll((java.util.Collection)var74);
    java.util.Iterator var92 = var74.iterator();
    boolean var93 = var74.isEmpty();
    int var94 = var74.size();
    boolean var95 = var74.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(4,1)"+ "'", var79.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test396() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Cell[][] var10 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    boolean var38 = var15.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var39 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var15);
    lpf.model.core.CellsIterator var40 = new lpf.model.core.CellsIterator(var10, 100, 0);
    lpf.model.core.Cell var41 = var40.next();
    boolean var42 = var40.hasNext();
    boolean var43 = var4.equals((java.lang.Object)var42);
    java.util.Set var44 = var4.getMarks();
    var4.clearDigit();
    var4.clearDigit();
    lpf.model.core.Value var47 = var4.getDigit();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    boolean var64 = var59.contains((java.lang.Object)'#');
    lpf.model.core.Location var65 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var66 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Value var67 = new lpf.model.core.Value('#');
    lpf.model.core.Value var68 = new lpf.model.core.Value('#');
    var4.addMark(var68);
    var4.clearDigit();
    var4.clearMarks();
    java.util.Set var72 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test397() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    boolean var28 = var3.isEmpty();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var39.retainAll((java.util.Collection)var47);
    boolean var51 = var30.retainAll((java.util.Collection)var39);
    java.util.Iterator var52 = var39.iterator();
    boolean var53 = var3.remove((java.lang.Object)var39);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var39.containsAll((java.util.Collection)var54);
    int var56 = var54.size();
    java.lang.Object[] var57 = var54.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test398() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    java.util.Iterator var24 = var1.iterator();
    int var25 = var1.size();
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    java.lang.Object[] var28 = var1.toArray();
    java.util.Iterator var29 = var1.iterator();
    boolean var30 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test399() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.lang.Object[] var34 = var17.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var17.containsAll((java.util.Collection)var35);
    boolean var39 = var1.add((java.lang.Object)var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var1.addAll((java.util.Collection)var49);
    java.lang.Object[] var54 = var1.toArray();
    boolean var55 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test400() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    boolean var84 = var0.addAll((java.util.Collection)var78);
    java.util.Iterator var85 = var78.iterator();
    int var86 = var78.size();
    boolean var87 = var78.isEmpty();
    boolean var88 = var78.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test401() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    lpf.model.core.Location var41 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var65 = var44.retainAll((java.util.Collection)var53);
    boolean var67 = var44.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    java.lang.Object[] var81 = var77.toArray();
    lpf.model.kenken.Cage var82 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var77);
    lpf.model.core.Location var85 = new lpf.model.core.Location(1, '4');
    boolean var86 = var82.contains(var85);
    java.util.Iterator var87 = var82.iterator();
    java.util.Iterator var88 = var82.iterator();
    java.util.Iterator var89 = var82.iterator();
    java.util.Iterator var90 = var82.iterator();
    java.util.Iterator var91 = var82.iterator();
    java.util.Iterator var92 = var82.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var93 = var82.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test402() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.Value var18 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var20 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    boolean var48 = var25.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var49 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var25);
    lpf.model.core.CellsIterator var50 = new lpf.model.core.CellsIterator(var20, 100, 0);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    java.util.Set var57 = var55.getMarks();
    lpf.model.kenken.Cage var58 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var57);
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, '#');
    boolean var61 = var13.add((java.lang.Object)var60);
    java.util.Iterator var62 = var13.iterator();
    var13.clear();
    java.lang.Object[] var64 = var13.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test403() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearDigit();
    lpf.model.core.Value var6 = var4.getDigit();
    boolean var7 = var4.isOccupied();
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var12 = new lpf.model.kenken.InvalidKenKenPuzzleException(var11);
    java.lang.String var13 = var12.toString();
    boolean var14 = var4.equals((java.lang.Object)var13);
    boolean var15 = var4.isOccupied();
    var4.clearDigit();
    lpf.model.core.Value var18 = new lpf.model.core.Value('4');
    var4.setDigit(var18);
    lpf.model.core.Value var20 = var4.getDigit();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var13.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test404() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var1.removeAll((java.util.Collection)var48);
    int var51 = var48.size();
    boolean var52 = var48.isEmpty();
    java.util.Iterator var53 = var48.iterator();
    java.util.Iterator var54 = var48.iterator();
    lpf.model.core.Cell[][] var56 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var59 = new lpf.model.core.CellsIterator(var56, 10, 0);
    boolean var60 = var59.hasNext();
    boolean var61 = var59.hasNext();
    lpf.model.core.Cell var62 = var59.next();
    boolean var63 = var59.hasNext();
    boolean var64 = var59.hasNext();
    lpf.model.core.Cell var65 = var59.next();
    lpf.model.core.Cell var66 = var59.next();
    boolean var67 = var59.hasNext();
    lpf.model.core.Cell var68 = var59.next();
    lpf.model.core.Cell var69 = var59.next();
    lpf.model.core.Cell var70 = var59.next();
    boolean var71 = var59.hasNext();
    boolean var72 = var48.add((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test405() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    boolean var8 = var4.isOccupied();
    boolean var9 = var4.isOccupied();
    java.util.Set var10 = var4.getMarks();
    boolean var11 = var4.isOccupied();
    java.util.Set var12 = var4.getMarks();
    boolean var13 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test406() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Cell[][] var10 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    boolean var38 = var15.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var39 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var15);
    lpf.model.core.CellsIterator var40 = new lpf.model.core.CellsIterator(var10, 100, 0);
    lpf.model.core.Cell var41 = var40.next();
    boolean var42 = var40.hasNext();
    boolean var43 = var4.equals((java.lang.Object)var42);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var59 = var54.contains((java.lang.Object)'#');
    lpf.model.core.Location var60 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var62 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var63 = var62.toString();
    boolean var64 = var60.equals((java.lang.Object)var62);
    boolean var65 = var4.equals((java.lang.Object)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    lpf.model.core.Cell var70 = new lpf.model.core.Cell(var68);
    lpf.model.core.Value var72 = new lpf.model.core.Value('#');
    var70.setDigit(var72);
    var4.addMark(var72);
    var4.clearDigit();
    java.util.Set var76 = var4.getMarks();
    boolean var77 = var4.isOccupied();
    java.util.Set var78 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var63.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test407() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    int var5 = var0.size();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    java.lang.Object[] var11 = var0.toArray((java.lang.Object[])var7);
    lpf.model.core.Location var14 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var15.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    boolean var36 = var15.containsAll((java.util.Collection)var33);
    int var37 = var15.size();
    lpf.model.core.CellsIterator var38 = new lpf.model.core.CellsIterator(var7, (-1), var37);
    lpf.model.core.Cell var39 = var38.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test408() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    lpf.model.core.Value var28 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    lpf.model.core.Cell var33 = new lpf.model.core.Cell(var31);
    var33.clearMarks();
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    lpf.model.core.Cell var39 = new lpf.model.core.Cell(var37);
    lpf.model.core.Value var41 = new lpf.model.core.Value('#');
    var39.setDigit(var41);
    var33.addMark(var41);
    lpf.model.core.Value var44 = var33.getDigit();
    var33.clearDigit();
    java.util.Set var46 = var33.getMarks();
    lpf.model.core.Value var47 = var33.getDigit();
    boolean var48 = var33.isOccupied();
    var33.clearMarks();
    var33.clearDigit();
    lpf.model.core.Value var51 = var33.getDigit();
    var33.clearDigit();
    boolean var53 = var28.equals((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test409() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.lang.Object[] var53 = var36.toArray(var52);
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var36);
    int var55 = var36.size();
    lpf.model.core.CellsIterator var56 = new lpf.model.core.CellsIterator(var1, 0, var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    lpf.model.core.Location var71 = new lpf.model.core.Location(1, '4');
    java.lang.String var72 = var71.toString();
    java.lang.Object[] var73 = new java.lang.Object[] { var71};
    java.lang.Object[] var74 = var67.toArray(var73);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    boolean var78 = var67.retainAll((java.util.Collection)var75);
    boolean var79 = var58.retainAll((java.util.Collection)var67);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var58.addAll((java.util.Collection)var81);
    int var84 = var81.size();
    lpf.model.core.Location var87 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var88 = new lpf.model.core.Location(var84, '4');
    lpf.model.core.Value var89 = new lpf.model.core.Value('4');
    lpf.model.core.Value var90 = new lpf.model.core.Value('4');
    lpf.model.core.Value var91 = new lpf.model.core.Value('4');
    lpf.model.core.Location var92 = new lpf.model.core.Location(0, '4');
    java.lang.String var93 = var92.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var94 = new lpf.model.kenken.InvalidKenKenPuzzleException(var93);
    java.lang.String var95 = var94.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var96 = new lpf.model.kenken.InvalidKenKenPuzzleException(var95);
    java.lang.String var97 = var96.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var98 = new lpf.model.kenken.InvalidKenKenPuzzleException(var97);
    java.lang.String var99 = var98.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(4,1)"+ "'", var72.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "(4,0)"+ "'", var93.equals("(4,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"+ "'", var95.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"+ "'", var97.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"+ "'", var99.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,0)"));

  }

  public void test410() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var6 = new lpf.model.core.CellsIterator(var3, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = var16.toArray();
    int var21 = var16.size();
    lpf.model.core.CellsIterator var22 = new lpf.model.core.CellsIterator(var1, 10, var21);
    lpf.model.core.Cell var23 = var22.next();
    boolean var24 = var22.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test411() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    lpf.model.core.Value var28 = new lpf.model.core.Value(' ');
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    boolean var48 = var33.remove((java.lang.Object)var45);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var50.addAll((java.util.Collection)var73);
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    boolean var78 = var76.retainAll((java.util.Collection)var77);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    java.lang.Object[] var83 = new java.lang.Object[] { var81};
    java.lang.Object[] var84 = var77.toArray(var83);
    java.lang.Object[] var85 = var73.toArray(var84);
    boolean var86 = var33.addAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage(' ', 1, (java.util.Collection)var33);
    java.util.Iterator var88 = var87.iterator();
    java.util.Iterator var89 = var87.iterator();
    java.util.Iterator var90 = var87.iterator();
    java.util.Iterator var91 = var87.iterator();
    java.util.Iterator var92 = var87.iterator();
    java.util.Iterator var93 = var87.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var94 = var87.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test412() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    java.util.Iterator var11 = var1.iterator();
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    lpf.model.core.Cell var16 = new lpf.model.core.Cell(var14);
    var16.clearMarks();
    java.util.Set var18 = var16.getMarks();
    lpf.model.core.Value var19 = var16.getDigit();
    boolean var20 = var16.isOccupied();
    boolean var21 = var16.isOccupied();
    boolean var22 = var1.add((java.lang.Object)var16);
    java.util.Iterator var23 = var1.iterator();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    boolean var56 = var25.addAll((java.util.Collection)var48);
    var25.clear();
    var25.clear();
    java.util.Iterator var59 = var25.iterator();
    boolean var60 = var25.isEmpty();
    java.lang.Object[] var61 = var25.toArray();
    java.lang.Object[] var62 = var1.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var77 = var72.contains((java.lang.Object)'#');
    java.lang.Object[] var78 = var72.toArray();
    java.util.Iterator var79 = var72.iterator();
    boolean var80 = var1.removeAll((java.util.Collection)var72);
    java.lang.Object[] var81 = var72.toArray();
    var72.clear();
    boolean var83 = var72.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test413() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    boolean var4 = var3.isOccupied();
    var3.clearMarks();
    boolean var6 = var3.isOccupied();
    lpf.model.core.Location var9 = new lpf.model.core.Location(1, '4');
    java.lang.String var10 = var9.toString();
    lpf.model.core.Cell var11 = new lpf.model.core.Cell(var9);
    java.util.Set var12 = var11.getMarks();
    lpf.model.core.Value var13 = var11.getDigit();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    boolean var27 = var16.retainAll((java.util.Collection)var24);
    boolean var29 = var24.contains((java.lang.Object)'#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Value var31 = new lpf.model.core.Value('#');
    var11.addMark(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var34.addAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    var61.clear();
    java.lang.Object[] var74 = var61.toArray();
    lpf.model.core.Value var76 = new lpf.model.core.Value('a');
    lpf.model.core.Value var77 = new lpf.model.core.Value('a');
    boolean var78 = var61.remove((java.lang.Object)'a');
    boolean var79 = var34.addAll((java.util.Collection)var61);
    boolean var80 = var31.equals((java.lang.Object)var79);
    var3.setDigit(var31);
    lpf.model.core.Value var82 = var3.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(4,1)"+ "'", var10.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test414() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.lang.Object[] var27 = var23.toArray(var26);
    var23.clear();
    var23.clear();
    java.lang.Object[] var30 = var23.toArray();
    lpf.model.core.Cell[][] var32 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var46.retainAll((java.util.Collection)var54);
    boolean var58 = var37.retainAll((java.util.Collection)var46);
    boolean var60 = var37.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var61 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var37);
    lpf.model.core.CellsIterator var62 = new lpf.model.core.CellsIterator(var32, 100, 0);
    boolean var63 = var23.remove((java.lang.Object)0);
    boolean var64 = var18.containsAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    boolean var77 = var66.retainAll((java.util.Collection)var74);
    java.util.Iterator var78 = var74.iterator();
    boolean var79 = var74.isEmpty();
    boolean var80 = var23.containsAll((java.util.Collection)var74);
    java.util.Iterator var81 = var23.iterator();
    java.util.Iterator var82 = var23.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test415() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var25);
    java.lang.String var28 = var25.toString();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    boolean var43 = var38.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    boolean var53 = var38.remove((java.lang.Object)var45);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var56.toArray(var72);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var56);
    int var75 = var56.size();
    boolean var76 = var38.retainAll((java.util.Collection)var56);
    java.util.Iterator var77 = var38.iterator();
    java.lang.Object[] var78 = var38.toArray();
    boolean var79 = var25.equals((java.lang.Object)var78);
    java.lang.Object[] var80 = var9.toArray(var78);
    int var81 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);

  }

  public void test416() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var25.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    java.lang.Object[] var52 = var25.toArray(var51);
    boolean var53 = var9.removeAll((java.util.Collection)var25);
    int var54 = var25.size();
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Value var58 = new lpf.model.core.Value('4');
    lpf.model.core.Location var59 = new lpf.model.core.Location(var54, '4');
    java.lang.String var60 = var59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,0)"+ "'", var60.equals("(4,0)"));

  }

  public void test417() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    boolean var4 = var1.remove((java.lang.Object)(short)100);
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.String var12 = var10.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var13 = new lpf.model.kenken.InvalidKenKenPuzzleException(var12);
    lpf.model.kenken.InvalidKenKenPuzzleException var14 = new lpf.model.kenken.InvalidKenKenPuzzleException(var12);
    java.lang.String var15 = var14.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var16 = new lpf.model.kenken.InvalidKenKenPuzzleException(var15);
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    java.lang.String var19 = var16.toString();
    java.lang.String var20 = var16.toString();
    java.lang.String var21 = var16.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var22 = new lpf.model.kenken.InvalidKenKenPuzzleException(var21);
    java.lang.String var23 = var22.toString();
    boolean var24 = var1.remove((java.lang.Object)var22);
    java.lang.String var25 = var22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(4,1)"+ "'", var12.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var15.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var17.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var18.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var19.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var20.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var21.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var23.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var25.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test418() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var36 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var37 = var36.next();
    boolean var38 = var36.hasNext();
    lpf.model.core.Cell var39 = var36.next();
    lpf.model.core.Cell var40 = var36.next();
    boolean var41 = var36.hasNext();
    boolean var42 = var36.hasNext();
    lpf.model.core.Cell var43 = var36.next();
    boolean var44 = var36.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test419() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.lang.Object[] var53 = var36.toArray(var52);
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var36);
    int var55 = var36.size();
    lpf.model.core.CellsIterator var56 = new lpf.model.core.CellsIterator(var1, 0, var55);
    boolean var57 = var56.hasNext();
    lpf.model.core.Cell var58 = var56.next();
    boolean var59 = var56.hasNext();
    boolean var60 = var56.hasNext();
    lpf.model.core.Cell var61 = var56.next();
    lpf.model.core.Cell var62 = var56.next();
    lpf.model.core.Cell var63 = var56.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test420() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var43 = var22.retainAll((java.util.Collection)var31);
    java.lang.Object[] var44 = var22.toArray();
    java.util.Iterator var45 = var22.iterator();
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var22);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var48);
    int var57 = var48.size();
    java.util.Iterator var58 = var48.iterator();
    int var59 = var48.size();
    var48.clear();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.lang.Object[] var79 = var75.toArray(var78);
    var75.clear();
    boolean var81 = var62.contains((java.lang.Object)var75);
    boolean var82 = var75.isEmpty();
    boolean var83 = var75.isEmpty();
    boolean var84 = var48.containsAll((java.util.Collection)var75);
    int var85 = var48.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test421() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    boolean var51 = var40.retainAll((java.util.Collection)var48);
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.lang.Object[] var53 = var36.toArray(var52);
    lpf.model.kenken.Cage var54 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var36);
    int var55 = var36.size();
    lpf.model.core.CellsIterator var56 = new lpf.model.core.CellsIterator(var1, 0, var55);
    boolean var57 = var56.hasNext();
    lpf.model.core.Cell var58 = var56.next();
    boolean var59 = var56.hasNext();
    boolean var60 = var56.hasNext();
    boolean var61 = var56.hasNext();
    lpf.model.core.Cell var62 = var56.next();
    boolean var63 = var56.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test422() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearMarks();
    java.util.Set var9 = var4.getMarks();
    var4.clearDigit();
    boolean var11 = var4.isOccupied();
    java.util.Set var12 = var4.getMarks();
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var17 = new lpf.model.kenken.InvalidKenKenPuzzleException(var16);
    lpf.model.kenken.InvalidKenKenPuzzleException var18 = new lpf.model.kenken.InvalidKenKenPuzzleException(var16);
    boolean var19 = var4.equals((java.lang.Object)var16);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    boolean var42 = var21.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    boolean var52 = var21.addAll((java.util.Collection)var44);
    var21.clear();
    var21.clear();
    java.util.Iterator var55 = var21.iterator();
    java.lang.Object[] var56 = var21.toArray();
    boolean var57 = var4.equals((java.lang.Object)var56);
    java.util.Set var58 = var4.getMarks();
    boolean var59 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(4,1)"+ "'", var35.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test423() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.lang.Object[] var28 = var11.toArray(var27);
    lpf.model.kenken.Cage var29 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var11);
    lpf.model.core.Value var30 = new lpf.model.core.Value('a');
    var4.addMark(var30);
    lpf.model.core.Value var32 = var4.getDigit();
    var4.clearMarks();
    java.util.Set var34 = var4.getMarks();
    boolean var35 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test424() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    boolean var14 = var3.retainAll((java.util.Collection)var11);
    boolean var16 = var11.contains((java.lang.Object)'#');
    lpf.model.core.Location var17 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var18 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var43 = var22.retainAll((java.util.Collection)var31);
    java.lang.Object[] var44 = var22.toArray();
    java.util.Iterator var45 = var22.iterator();
    lpf.model.kenken.Cage var46 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var22);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.kenken.Cage var56 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var48);
    lpf.model.core.Location var59 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.Location var60 = new lpf.model.core.Location(0, 'a');
    java.lang.String var61 = var60.toString();
    lpf.model.core.Cell var62 = new lpf.model.core.Cell(var60);
    java.lang.String var63 = var60.toString();
    lpf.model.core.Cell var64 = new lpf.model.core.Cell(var60);
    
    // Checks the contract:  equals-hashcode on var62 and var64
    assertTrue("Contract failed: equals-hashcode on var62 and var64", var62.equals(var64) ? var62.hashCode() == var64.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var64 and var62
    assertTrue("Contract failed: equals-hashcode on var64 and var62", var64.equals(var62) ? var64.hashCode() == var62.hashCode() : true);

  }

  public void test425() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var10.toArray(var39);
    java.lang.Object[] var41 = var1.toArray(var39);
    var1.clear();
    java.lang.Object[] var43 = var1.toArray();
    boolean var44 = var1.isEmpty();
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    lpf.model.core.Cell var49 = new lpf.model.core.Cell(var47);
    var49.clearMarks();
    boolean var52 = var49.equals((java.lang.Object)(short)0);
    java.util.Set var53 = var49.getMarks();
    var49.clearMarks();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var77 = var56.retainAll((java.util.Collection)var65);
    boolean var79 = var56.contains((java.lang.Object)100);
    lpf.model.core.Location var81 = new lpf.model.core.Location(100, 'a');
    lpf.model.core.Value var82 = new lpf.model.core.Value('a');
    var49.removeMark(var82);
    boolean var84 = var49.isOccupied();
    lpf.model.core.Value var85 = var49.getDigit();
    java.util.Set var86 = var49.getMarks();
    var49.clearDigit();
    boolean var88 = var49.isOccupied();
    boolean var89 = var1.add((java.lang.Object)var49);
    var49.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var36.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test426() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var17 = new lpf.model.core.Cell(var16);
    boolean var18 = var17.isOccupied();
    lpf.model.core.Value var19 = var17.getDigit();
    var17.clearDigit();
    java.util.Set var21 = var17.getMarks();
    var17.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test427() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    boolean var50 = var1.removeAll((java.util.Collection)var48);
    int var51 = var48.size();
    boolean var52 = var48.isEmpty();
    java.util.Iterator var53 = var48.iterator();
    boolean var54 = var48.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test428() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.lang.Object[] var39 = var35.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.lang.Object[] var58 = var54.toArray(var57);
    var54.clear();
    boolean var60 = var41.contains((java.lang.Object)var54);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.lang.Object[] var78 = var61.toArray(var77);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    java.lang.Object[] var86 = new java.lang.Object[] { var84};
    java.lang.Object[] var87 = var80.toArray(var86);
    java.lang.Object[] var88 = var61.toArray(var87);
    java.lang.Object[] var89 = var54.toArray(var87);
    java.lang.Object[] var90 = var35.toArray(var89);
    boolean var91 = var10.containsAll((java.util.Collection)var35);
    boolean var92 = var4.equals((java.lang.Object)var10);
    var4.clearMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test429() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    java.lang.Object[] var42 = var20.toArray();
    java.util.Iterator var43 = var20.iterator();
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var20);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var76 = var73.remove((java.lang.Object)(short)100);
    boolean var77 = var69.retainAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var73);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    lpf.model.core.Cell var83 = new lpf.model.core.Cell(var81);
    boolean var84 = var78.contains(var81);
    java.lang.String var85 = var81.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var86 = new lpf.model.kenken.InvalidKenKenPuzzleException(var85);
    java.lang.String var87 = var86.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var87);
    lpf.model.kenken.InvalidKenKenPuzzleException var89 = new lpf.model.kenken.InvalidKenKenPuzzleException(var87);
    java.lang.String var90 = var89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var87.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var90.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));

  }

  public void test430() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    java.util.Iterator var21 = var20.iterator();
    java.util.Iterator var22 = var20.iterator();
    java.util.Iterator var23 = var20.iterator();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    java.lang.String var35 = var34.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var34};
    java.lang.Object[] var37 = var30.toArray(var36);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    boolean var41 = var30.retainAll((java.util.Collection)var38);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var26.toArray(var42);
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var26);
    lpf.model.core.Value var46 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var48 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    boolean var76 = var53.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var77 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var53);
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var48, 100, 0);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    lpf.model.core.Cell var83 = new lpf.model.core.Cell(var81);
    var83.clearMarks();
    java.util.Set var85 = var83.getMarks();
    lpf.model.kenken.Cage var86 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var85);
    lpf.model.core.Location var88 = new lpf.model.core.Location(0, '#');
    boolean var89 = var44.contains(var88);
    boolean var90 = var20.contains(var88);
    lpf.model.core.Cell var91 = new lpf.model.core.Cell(var88);
    lpf.model.core.Cell var92 = new lpf.model.core.Cell(var88);
    
    // Checks the contract:  equals-hashcode on var91 and var92
    assertTrue("Contract failed: equals-hashcode on var91 and var92", var91.equals(var92) ? var91.hashCode() == var92.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var92 and var91
    assertTrue("Contract failed: equals-hashcode on var92 and var91", var92.equals(var91) ? var92.hashCode() == var91.hashCode() : true);

  }

  public void test431() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    java.util.Iterator var21 = var20.iterator();
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    lpf.model.core.Cell var26 = new lpf.model.core.Cell(var24);
    java.lang.String var27 = var24.toString();
    boolean var28 = var20.contains(var24);
    lpf.model.core.Cell[][] var30 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.Location var39 = new lpf.model.core.Location(1, '4');
    java.lang.String var40 = var39.toString();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.Object[] var42 = var35.toArray(var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    boolean var56 = var35.retainAll((java.util.Collection)var44);
    boolean var58 = var35.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var59 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var35);
    lpf.model.core.CellsIterator var60 = new lpf.model.core.CellsIterator(var30, 100, 0);
    lpf.model.core.Cell var61 = var60.next();
    lpf.model.core.Cell var62 = var60.next();
    boolean var63 = var60.hasNext();
    lpf.model.core.Cell var64 = var60.next();
    boolean var65 = var60.hasNext();
    lpf.model.core.Cell var66 = var60.next();
    boolean var67 = var60.hasNext();
    lpf.model.core.Cell var68 = var60.next();
    boolean var69 = var24.equals((java.lang.Object)var60);
    lpf.model.core.Cell var70 = new lpf.model.core.Cell(var24);
    
    // Checks the contract:  equals-hashcode on var26 and var70
    assertTrue("Contract failed: equals-hashcode on var26 and var70", var26.equals(var70) ? var26.hashCode() == var70.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var70 and var26
    assertTrue("Contract failed: equals-hashcode on var70 and var26", var70.equals(var26) ? var70.hashCode() == var26.hashCode() : true);

  }

  public void test432() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    lpf.model.core.Cell[][] var39 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var53.retainAll((java.util.Collection)var61);
    boolean var65 = var44.retainAll((java.util.Collection)var53);
    boolean var67 = var44.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var68 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var44);
    lpf.model.core.CellsIterator var69 = new lpf.model.core.CellsIterator(var39, 100, 0);
    lpf.model.core.Cell var70 = var69.next();
    lpf.model.core.Cell var71 = var69.next();
    boolean var72 = var4.equals((java.lang.Object)var69);
    boolean var73 = var4.isOccupied();
    boolean var74 = var4.isOccupied();
    boolean var75 = var4.isOccupied();
    var4.clearDigit();
    boolean var77 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test433() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    var28.clear();
    java.lang.Object[] var41 = var28.toArray();
    lpf.model.core.Value var43 = new lpf.model.core.Value('a');
    lpf.model.core.Value var44 = new lpf.model.core.Value('a');
    boolean var45 = var28.remove((java.lang.Object)'a');
    boolean var46 = var1.addAll((java.util.Collection)var28);
    java.lang.Object[] var47 = var28.toArray();
    boolean var48 = var28.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test434() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    var4.clearMarks();
    java.util.Set var10 = var4.getMarks();
    java.util.Set var11 = var4.getMarks();
    lpf.model.core.Value var12 = var4.getDigit();
    var4.clearDigit();
    boolean var14 = var4.isOccupied();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test435() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearMarks();
    lpf.model.core.Value var10 = new lpf.model.core.Value('#');
    var4.removeMark(var10);
    boolean var12 = var4.isOccupied();
    var4.clearMarks();
    lpf.model.core.Value var14 = var4.getDigit();
    var4.clearMarks();
    var4.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test436() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var5 = var4.getDigit();
    var4.clearDigit();
    var4.clearDigit();
    boolean var8 = var4.isOccupied();
    boolean var9 = var4.isOccupied();
    lpf.model.core.Value var10 = var4.getDigit();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test437() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    java.util.Iterator var26 = var20.iterator();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var42 = var37.contains((java.lang.Object)'#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var45 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var46 = var45.toString();
    boolean var47 = var43.equals((java.lang.Object)var45);
    boolean var48 = var20.contains(var43);
    java.util.Iterator var49 = var20.iterator();
    java.util.Iterator var50 = var20.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var51 = var20.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var46.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test438() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    int var13 = var9.size();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var15.remove((java.lang.Object)var27);
    boolean var31 = var9.containsAll((java.util.Collection)var15);
    int var32 = var15.size();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    boolean var57 = var34.contains((java.lang.Object)100);
    java.util.Iterator var58 = var34.iterator();
    boolean var59 = var15.containsAll((java.util.Collection)var34);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    lpf.model.core.Cell var64 = new lpf.model.core.Cell(var62);
    var64.clearMarks();
    java.util.Set var66 = var64.getMarks();
    var64.clearMarks();
    var64.clearMarks();
    boolean var69 = var34.add((java.lang.Object)var64);
    var34.clear();
    int var71 = var34.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test439() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearDigit();
    var4.clearMarks();
    java.util.Set var15 = var4.getMarks();
    var4.clearDigit();
    boolean var17 = var4.isOccupied();
    boolean var18 = var4.isOccupied();
    java.util.Set var19 = var4.getMarks();
    var4.clearMarks();
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    lpf.model.core.Cell var25 = new lpf.model.core.Cell(var23);
    boolean var26 = var25.isOccupied();
    lpf.model.core.Cell[][] var28 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    boolean var53 = var42.retainAll((java.util.Collection)var50);
    boolean var54 = var33.retainAll((java.util.Collection)var42);
    boolean var56 = var33.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var57 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var33);
    lpf.model.core.CellsIterator var58 = new lpf.model.core.CellsIterator(var28, 100, 0);
    lpf.model.core.Cell var59 = var58.next();
    lpf.model.core.Cell var60 = var58.next();
    boolean var61 = var58.hasNext();
    lpf.model.core.Cell var62 = var58.next();
    boolean var63 = var25.equals((java.lang.Object)var58);
    boolean var64 = var58.hasNext();
    boolean var65 = var58.hasNext();
    boolean var66 = var58.hasNext();
    boolean var67 = var58.hasNext();
    boolean var68 = var58.hasNext();
    lpf.model.core.Cell var69 = var58.next();
    boolean var70 = var58.hasNext();
    boolean var71 = var4.equals((java.lang.Object)var58);
    
    // Checks the contract:  equals-hashcode on var4 and var25
    assertTrue("Contract failed: equals-hashcode on var4 and var25", var4.equals(var25) ? var4.hashCode() == var25.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var25 and var4
    assertTrue("Contract failed: equals-hashcode on var25 and var4", var25.equals(var4) ? var25.hashCode() == var4.hashCode() : true);

  }

  public void test440() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    boolean var24 = var13.retainAll((java.util.Collection)var21);
    java.util.Iterator var25 = var21.iterator();
    boolean var26 = var21.isEmpty();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    java.util.Iterator var28 = var27.iterator();
    boolean var29 = var21.contains((java.lang.Object)var28);
    boolean var30 = var4.equals((java.lang.Object)var21);
    var21.clear();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    int var45 = var41.size();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var47.remove((java.lang.Object)var59);
    boolean var63 = var41.containsAll((java.util.Collection)var47);
    boolean var64 = var21.retainAll((java.util.Collection)var41);
    java.lang.Object[] var65 = var21.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test441() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    boolean var46 = var24.add((java.lang.Object)var44);
    int var47 = var24.size();
    java.lang.Object[] var48 = var24.toArray();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var65 = var60.contains((java.lang.Object)'#');
    lpf.model.core.Location var66 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var67 = new lpf.model.core.Location((-1), '#');
    boolean var68 = var24.remove((java.lang.Object)var67);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    boolean var76 = var74.retainAll((java.util.Collection)var75);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.Object[] var82 = var75.toArray(var81);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    boolean var86 = var75.retainAll((java.util.Collection)var83);
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.lang.Object[] var88 = var71.toArray(var87);
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var71);
    int var90 = var71.size();
    boolean var91 = var67.equals((java.lang.Object)var90);
    lpf.model.core.Cell var92 = new lpf.model.core.Cell(var67);
    var92.clearDigit();
    java.util.Set var94 = var92.getMarks();
    var92.clearDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test442() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    java.util.Iterator var32 = var20.iterator();
    lpf.model.core.Location var35 = new lpf.model.core.Location((-1), 'a');
    boolean var36 = var20.contains(var35);
    lpf.model.core.Cell var37 = new lpf.model.core.Cell(var35);
    var37.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test443() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.lang.Object[] var34 = var17.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var17.containsAll((java.util.Collection)var35);
    boolean var39 = var1.add((java.lang.Object)var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var1.addAll((java.util.Collection)var49);
    int var54 = var1.size();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.lang.Object[] var74 = var57.toArray(var73);
    lpf.model.kenken.Cage var75 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var57);
    lpf.model.core.Value var76 = new lpf.model.core.Value('a');
    lpf.model.core.Location var77 = new lpf.model.core.Location(var54, 'a');
    lpf.model.core.Cell var78 = new lpf.model.core.Cell(var77);
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '4');
    java.lang.String var82 = var81.toString();
    lpf.model.core.Cell var83 = new lpf.model.core.Cell(var81);
    var83.clearMarks();
    lpf.model.core.Value var85 = var83.getDigit();
    boolean var86 = var83.isOccupied();
    var83.clearDigit();
    boolean var88 = var78.equals((java.lang.Object)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(4,1)"+ "'", var82.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test444() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    boolean var9 = var1.isEmpty();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var27 = var22.contains((java.lang.Object)'#');
    lpf.model.core.Location var28 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var31 = new lpf.model.core.Cell(var30);
    boolean var32 = var1.remove((java.lang.Object)var30);
    java.lang.String var33 = var30.toString();
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    var38.clearMarks();
    lpf.model.core.Value var42 = var38.getDigit();
    boolean var43 = var30.equals((java.lang.Object)var38);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    int var47 = var44.size();
    int var48 = var44.size();
    int var49 = var44.size();
    lpf.model.core.Cell[][] var51 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var54 = new lpf.model.core.CellsIterator(var51, 10, 0);
    java.lang.Object[] var55 = var44.toArray((java.lang.Object[])var51);
    lpf.model.core.Location var58 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    boolean var74 = var63.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.lang.Object[] var76 = var59.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var59.containsAll((java.util.Collection)var77);
    int var81 = var59.size();
    lpf.model.core.CellsIterator var82 = new lpf.model.core.CellsIterator(var51, (-1), var81);
    boolean var83 = var82.hasNext();
    boolean var84 = var82.hasNext();
    boolean var85 = var30.equals((java.lang.Object)var82);
    java.lang.String var86 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(#,1)"+ "'", var33.equals("(#,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(#,1)"+ "'", var86.equals("(#,1)"));

  }

  public void test445() throws Throwable {

    lpf.model.kenken.InvalidKenKenPuzzleException var1 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var5 = new lpf.model.kenken.InvalidKenKenPuzzleException(var4);
    java.lang.String var6 = var5.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var7 = new lpf.model.kenken.InvalidKenKenPuzzleException(var6);
    java.lang.String var8 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var2.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var3.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var4.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var6.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var8.equals("lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: lpf.model.kenken.InvalidKenKenPuzzleException: "));

  }

  public void test446() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    java.util.Iterator var13 = var1.iterator();
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    lpf.model.core.Cell var18 = new lpf.model.core.Cell(var16);
    lpf.model.core.Value var20 = new lpf.model.core.Value('#');
    var18.setDigit(var20);
    var18.clearDigit();
    var18.clearDigit();
    var18.clearDigit();
    var18.clearDigit();
    lpf.model.core.Value var26 = var18.getDigit();
    boolean var27 = var1.contains((java.lang.Object)var18);
    lpf.model.core.Location var30 = new lpf.model.core.Location((-1), 'a');
    java.lang.String var31 = var30.toString();
    lpf.model.core.Cell var32 = new lpf.model.core.Cell(var30);
    boolean var33 = var32.isOccupied();
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    java.util.Set var39 = var38.getMarks();
    lpf.model.core.Value var41 = new lpf.model.core.Value('a');
    lpf.model.core.Value var42 = new lpf.model.core.Value('a');
    lpf.model.core.Value var43 = new lpf.model.core.Value('a');
    var38.addMark(var43);
    var32.addMark(var43);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    java.util.Iterator var59 = var55.iterator();
    boolean var60 = var55.isEmpty();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    java.util.Iterator var62 = var61.iterator();
    boolean var63 = var55.contains((java.lang.Object)var62);
    boolean var64 = var43.equals((java.lang.Object)var63);
    var18.setDigit(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(a,-1)"+ "'", var31.equals("(a,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test447() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    lpf.model.core.Value var8 = var4.getDigit();
    lpf.model.core.Cell[][] var10 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var36 = var15.retainAll((java.util.Collection)var24);
    boolean var38 = var15.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var39 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var15);
    lpf.model.core.CellsIterator var40 = new lpf.model.core.CellsIterator(var10, 100, 0);
    lpf.model.core.Cell var41 = var40.next();
    boolean var42 = var40.hasNext();
    boolean var43 = var4.equals((java.lang.Object)var42);
    boolean var44 = var4.isOccupied();
    java.util.Set var45 = var4.getMarks();
    boolean var46 = var4.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test448() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var36 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Value var38 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var40 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var69 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var45);
    lpf.model.core.CellsIterator var70 = new lpf.model.core.CellsIterator(var40, 100, 0);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    lpf.model.core.Cell var75 = new lpf.model.core.Cell(var73);
    var75.clearMarks();
    java.util.Set var77 = var75.getMarks();
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var77);
    lpf.model.core.Location var80 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Value var81 = new lpf.model.core.Value('#');
    lpf.model.core.Value var82 = new lpf.model.core.Value('#');
    lpf.model.core.Location var83 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Cell var84 = new lpf.model.core.Cell(var83);
    var84.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test449() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    boolean var6 = var4.retainAll((java.util.Collection)var5);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    boolean var19 = var8.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.lang.Object[] var21 = var4.toArray(var20);
    lpf.model.kenken.Cage var22 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var4);
    int var23 = var4.size();
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var27 = new lpf.model.core.CellsIterator(var1, var23, 1);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var30.toArray(var46);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var30);
    int var49 = var30.size();
    lpf.model.core.Location var51 = new lpf.model.core.Location(var49, '#');
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    boolean var76 = var53.contains((java.lang.Object)100);
    int var77 = var53.size();
    lpf.model.core.CellsIterator var78 = new lpf.model.core.CellsIterator(var1, var49, var77);
    lpf.model.core.Cell var79 = var78.next();
    boolean var80 = var78.hasNext();
    boolean var81 = var78.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(4,1)"+ "'", var58.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test450() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    boolean var17 = var15.retainAll((java.util.Collection)var16);
    lpf.model.core.Location var20 = new lpf.model.core.Location(1, '4');
    java.lang.String var21 = var20.toString();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.Object[] var23 = var16.toArray(var22);
    boolean var24 = var9.remove((java.lang.Object)var16);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.lang.Object[] var44 = var27.toArray(var43);
    lpf.model.kenken.Cage var45 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var27);
    int var46 = var27.size();
    boolean var47 = var9.retainAll((java.util.Collection)var27);
    java.util.Iterator var48 = var9.iterator();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var50.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = var58.toArray();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(100, '#');
    lpf.model.kenken.InvalidKenKenPuzzleException var81 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var82 = var81.toString();
    boolean var83 = var79.equals((java.lang.Object)var81);
    lpf.model.core.Cell var84 = new lpf.model.core.Cell(var79);
    java.lang.String var85 = var79.toString();
    boolean var86 = var58.contains((java.lang.Object)var85);
    boolean var87 = var9.retainAll((java.util.Collection)var58);
    int var88 = var9.size();
    var9.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(4,1)"+ "'", var21.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var82.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(#,100)"+ "'", var85.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test451() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    java.util.Set var16 = var4.getMarks();
    var4.clearMarks();
    var4.clearDigit();
    lpf.model.core.Value var19 = var4.getDigit();
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    lpf.model.core.Cell var24 = new lpf.model.core.Cell(var22);
    boolean var25 = var24.isOccupied();
    java.util.Set var26 = var24.getMarks();
    lpf.model.core.Value var27 = var24.getDigit();
    lpf.model.core.Value var28 = var24.getDigit();
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    lpf.model.core.Cell var33 = new lpf.model.core.Cell(var31);
    boolean var35 = var33.equals((java.lang.Object)0.0f);
    lpf.model.core.Value var37 = new lpf.model.core.Value('#');
    var33.addMark(var37);
    var24.setDigit(var37);
    var4.addMark(var37);
    
    // Checks the contract:  equals-hashcode on var4 and var33
    assertTrue("Contract failed: equals-hashcode on var4 and var33", var4.equals(var33) ? var4.hashCode() == var33.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var10 and var24
    assertTrue("Contract failed: equals-hashcode on var10 and var24", var10.equals(var24) ? var10.hashCode() == var24.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var24 and var10
    assertTrue("Contract failed: equals-hashcode on var24 and var10", var24.equals(var10) ? var24.hashCode() == var10.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var33 and var4
    assertTrue("Contract failed: equals-hashcode on var33 and var4", var33.equals(var4) ? var33.hashCode() == var4.hashCode() : true);

  }

  public void test452() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    java.util.Iterator var24 = var1.iterator();
    java.util.Iterator var25 = var1.iterator();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var27.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.lang.Object[] var50 = var46.toArray(var49);
    var46.clear();
    boolean var52 = var33.contains((java.lang.Object)var46);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.lang.Object[] var70 = var53.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    java.lang.Object[] var80 = var53.toArray(var79);
    java.lang.Object[] var81 = var46.toArray(var79);
    java.lang.Object[] var82 = var27.toArray(var81);
    boolean var83 = var1.containsAll((java.util.Collection)var27);
    java.lang.Object[] var84 = var1.toArray();
    java.util.Iterator var85 = var1.iterator();
    int var86 = var1.size();
    java.util.Iterator var87 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test453() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    var1.clear();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.lang.Object[] var36 = var32.toArray(var35);
    var32.clear();
    boolean var38 = var19.contains((java.lang.Object)var32);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    lpf.model.core.Location var46 = new lpf.model.core.Location(1, '4');
    java.lang.String var47 = var46.toString();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.Object[] var49 = var42.toArray(var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    boolean var63 = var42.retainAll((java.util.Collection)var51);
    java.lang.Object[] var64 = var42.toArray();
    java.util.Iterator var65 = var42.iterator();
    lpf.model.kenken.Cage var66 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var42);
    int var67 = var42.size();
    boolean var68 = var19.addAll((java.util.Collection)var42);
    int var69 = var42.size();
    boolean var70 = var1.removeAll((java.util.Collection)var42);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    var72.clear();
    java.util.Iterator var85 = var72.iterator();
    java.util.Iterator var86 = var72.iterator();
    boolean var87 = var42.removeAll((java.util.Collection)var72);
    boolean var88 = var72.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(4,1)"+ "'", var47.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test454() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var5 = var4.isOccupied();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    lpf.model.core.Value var8 = var4.getDigit();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test455() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    java.lang.Object[] var27 = var0.toArray(var26);
    java.util.Iterator var28 = var0.iterator();
    var0.clear();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.Location var35 = new lpf.model.core.Location(1, '4');
    java.lang.String var36 = var35.toString();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.retainAll((java.util.Collection)var39);
    boolean var44 = var39.contains((java.lang.Object)'#');
    boolean var45 = var39.isEmpty();
    boolean var46 = var39.isEmpty();
    boolean var47 = var39.isEmpty();
    java.lang.Object[] var48 = var39.toArray();
    boolean var49 = var0.removeAll((java.util.Collection)var39);
    boolean var50 = var39.isEmpty();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    lpf.model.core.Location var65 = new lpf.model.core.Location(1, '4');
    java.lang.String var66 = var65.toString();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var61.toArray(var67);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    boolean var72 = var61.retainAll((java.util.Collection)var69);
    boolean var73 = var52.retainAll((java.util.Collection)var61);
    java.util.Iterator var74 = var52.iterator();
    boolean var75 = var52.isEmpty();
    boolean var76 = var39.retainAll((java.util.Collection)var52);
    java.util.Iterator var77 = var39.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(4,1)"+ "'", var36.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(4,1)"+ "'", var66.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test456() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Cell var32 = var31.next();
    lpf.model.core.Cell var33 = var31.next();
    boolean var34 = var31.hasNext();
    lpf.model.core.Cell var35 = var31.next();
    lpf.model.core.Cell var36 = var31.next();
    boolean var37 = var31.hasNext();
    boolean var38 = var31.hasNext();
    boolean var39 = var31.hasNext();
    lpf.model.core.Cell var40 = var31.next();
    boolean var41 = var31.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test457() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    lpf.model.core.Location var41 = new lpf.model.core.Location(1, '4');
    java.lang.String var42 = var41.toString();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.Object[] var44 = var37.toArray(var43);
    boolean var45 = var14.addAll((java.util.Collection)var37);
    boolean var46 = var1.addAll((java.util.Collection)var14);
    java.lang.Object[] var47 = var14.toArray();
    java.lang.Object[] var48 = var14.toArray();
    var14.clear();
    int var50 = var14.size();
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var53);
    var55.clearMarks();
    java.util.Set var57 = var55.getMarks();
    lpf.model.core.Value var58 = var55.getDigit();
    boolean var59 = var55.isOccupied();
    lpf.model.core.Value var60 = var55.getDigit();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    boolean var78 = var73.contains((java.lang.Object)'#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var80 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var81 = new lpf.model.core.Location(1, '#');
    boolean var82 = var55.equals((java.lang.Object)'#');
    lpf.model.core.Location var83 = new lpf.model.core.Location(var50, '#');
    lpf.model.core.Cell var84 = new lpf.model.core.Cell(var83);
    java.util.Set var85 = var84.getMarks();
    var84.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(4,1)"+ "'", var42.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test458() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var3 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var32 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var8);
    lpf.model.core.CellsIterator var33 = new lpf.model.core.CellsIterator(var3, 100, 0);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    lpf.model.core.Cell var38 = new lpf.model.core.Cell(var36);
    var38.clearMarks();
    java.util.Set var40 = var38.getMarks();
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var40);
    lpf.model.core.Location var43 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Cell var44 = new lpf.model.core.Cell(var43);
    java.util.Set var45 = var44.getMarks();
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var48);
    lpf.model.core.Value var52 = new lpf.model.core.Value('#');
    var50.setDigit(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var55.remove((java.lang.Object)var67);
    boolean var71 = var52.equals((java.lang.Object)var55);
    var44.removeMark(var52);
    boolean var73 = var44.isOccupied();
    var44.clearDigit();
    lpf.model.core.Value var75 = var44.getDigit();
    var44.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test459() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    var10.clearMarks();
    boolean var13 = var10.equals((java.lang.Object)(short)0);
    boolean var14 = var10.isOccupied();
    var10.clearMarks();
    lpf.model.core.Value var17 = new lpf.model.core.Value(' ');
    var10.addMark(var17);
    boolean var19 = var10.isOccupied();
    boolean var20 = var1.contains((java.lang.Object)var19);
    java.lang.Object[] var21 = var1.toArray();
    var1.clear();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test460() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    boolean var7 = var4.remove((java.lang.Object)(short)100);
    boolean var8 = var2.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var9 = new lpf.model.core.Cell(var2);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var27 = var22.contains((java.lang.Object)'#');
    lpf.model.core.Location var28 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var29 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var31 = new lpf.model.core.Value('#');
    lpf.model.core.Value var32 = new lpf.model.core.Value('#');
    var9.setDigit(var32);
    boolean var34 = var9.isOccupied();
    java.util.Set var35 = var9.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test461() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    java.util.Set var8 = var4.getMarks();
    var4.clearMarks();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    lpf.model.core.Cell var14 = new lpf.model.core.Cell(var12);
    lpf.model.core.Value var16 = new lpf.model.core.Value('#');
    var14.setDigit(var16);
    java.util.Set var18 = var14.getMarks();
    lpf.model.core.Value var19 = var14.getDigit();
    var4.addMark(var19);
    java.util.Set var21 = var4.getMarks();
    var4.clearDigit();
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var25);
    lpf.model.core.Value var29 = new lpf.model.core.Value('#');
    var27.setDigit(var29);
    java.util.Set var31 = var27.getMarks();
    lpf.model.core.Value var32 = var27.getDigit();
    lpf.model.kenken.InvalidKenKenPuzzleException var34 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var35 = var34.toString();
    java.lang.String var36 = var34.toString();
    java.lang.String var37 = var34.toString();
    boolean var38 = var32.equals((java.lang.Object)var37);
    lpf.model.core.Cell[][] var40 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var43 = new lpf.model.core.CellsIterator(var40, 10, 0);
    boolean var44 = var43.hasNext();
    boolean var45 = var43.hasNext();
    lpf.model.core.Cell var46 = var43.next();
    boolean var47 = var43.hasNext();
    boolean var48 = var43.hasNext();
    boolean var49 = var32.equals((java.lang.Object)var48);
    var4.addMark(var32);
    
    // Checks the contract:  equals-hashcode on var14 and var27
    assertTrue("Contract failed: equals-hashcode on var14 and var27", var14.equals(var27) ? var14.hashCode() == var27.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var27 and var14
    assertTrue("Contract failed: equals-hashcode on var27 and var14", var27.equals(var14) ? var27.hashCode() == var14.hashCode() : true);

  }

  public void test462() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    int var41 = var37.size();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var43.remove((java.lang.Object)var55);
    boolean var59 = var37.containsAll((java.util.Collection)var43);
    java.lang.Object[] var60 = var37.toArray();
    int var61 = var37.size();
    boolean var62 = var24.removeAll((java.util.Collection)var37);
    java.util.Iterator var63 = var24.iterator();
    java.lang.Object[] var64 = var24.toArray();
    var24.clear();
    java.util.Iterator var66 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test463() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    lpf.model.core.ArraySet var7 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var8 = new lpf.model.core.ArraySet();
    boolean var9 = var7.retainAll((java.util.Collection)var8);
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    java.lang.String var13 = var12.toString();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.Object[] var15 = var8.toArray(var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    boolean var28 = var17.retainAll((java.util.Collection)var25);
    boolean var29 = var8.retainAll((java.util.Collection)var17);
    boolean var31 = var8.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var47 = var42.contains((java.lang.Object)'#');
    lpf.model.core.Location var48 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    boolean var72 = var51.retainAll((java.util.Collection)var60);
    boolean var74 = var51.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var75 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var76 = new lpf.model.core.ArraySet();
    boolean var77 = var75.retainAll((java.util.Collection)var76);
    lpf.model.core.Location var80 = new lpf.model.core.Location(1, '4');
    java.lang.String var81 = var80.toString();
    java.lang.Object[] var82 = new java.lang.Object[] { var80};
    java.lang.Object[] var83 = var76.toArray(var82);
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var85 = new lpf.model.core.ArraySet();
    boolean var86 = var84.retainAll((java.util.Collection)var85);
    boolean var87 = var76.retainAll((java.util.Collection)var84);
    java.lang.Object[] var88 = var84.toArray();
    lpf.model.kenken.Cage var89 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var84);
    lpf.model.core.Location var90 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.CellsIterator var91 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.Cell var92 = var91.next();
    lpf.model.core.Cell var93 = var91.next();
    boolean var94 = var91.hasNext();
    boolean var95 = var91.hasNext();
    boolean var96 = var91.hasNext();
    lpf.model.core.Cell var97 = var91.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(4,1)"+ "'", var13.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test464() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.lang.Object[] var46 = var29.toArray(var45);
    lpf.model.kenken.Cage var47 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var29);
    boolean var48 = var24.remove((java.lang.Object)var29);
    boolean var49 = var24.isEmpty();
    java.util.Iterator var50 = var24.iterator();
    lpf.model.kenken.InvalidKenKenPuzzleException var51 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var54 = new lpf.model.kenken.InvalidKenKenPuzzleException(var53);
    boolean var55 = var24.contains((java.lang.Object)var54);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    lpf.model.core.Location var62 = new lpf.model.core.Location(1, '4');
    java.lang.String var63 = var62.toString();
    java.lang.Object[] var64 = new java.lang.Object[] { var62};
    java.lang.Object[] var65 = var58.toArray(var64);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var69 = var58.retainAll((java.util.Collection)var66);
    boolean var71 = var66.contains((java.lang.Object)'#');
    lpf.model.core.Location var72 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    lpf.model.core.Cell var77 = new lpf.model.core.Cell(var75);
    lpf.model.core.Value var79 = new lpf.model.core.Value('#');
    var77.setDigit(var79);
    var77.clearMarks();
    lpf.model.core.Value var83 = new lpf.model.core.Value('#');
    var77.removeMark(var83);
    boolean var85 = var77.isOccupied();
    var77.clearDigit();
    boolean var87 = var77.isOccupied();
    boolean var88 = var72.equals((java.lang.Object)var77);
    lpf.model.core.Cell var89 = new lpf.model.core.Cell(var72);
    java.lang.String var90 = var72.toString();
    java.lang.String var91 = var72.toString();
    boolean var92 = var24.remove((java.lang.Object)var72);
    java.lang.String var93 = var72.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var94 = new lpf.model.kenken.InvalidKenKenPuzzleException(var93);
    lpf.model.kenken.InvalidKenKenPuzzleException var95 = new lpf.model.kenken.InvalidKenKenPuzzleException(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var52.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var53.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(4,1)"+ "'", var63.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(#,100)"+ "'", var90.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(#,100)"+ "'", var91.equals("(#,100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "(#,100)"+ "'", var93.equals("(#,100)"));

  }

  public void test465() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var5 = var4.isOccupied();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var36 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var12);
    lpf.model.core.CellsIterator var37 = new lpf.model.core.CellsIterator(var7, 100, 0);
    lpf.model.core.Cell var38 = var37.next();
    lpf.model.core.Cell var39 = var37.next();
    boolean var40 = var37.hasNext();
    lpf.model.core.Cell var41 = var37.next();
    boolean var42 = var4.equals((java.lang.Object)var37);
    lpf.model.core.Value var44 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    boolean var69 = var46.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    java.lang.Object[] var77 = new java.lang.Object[] { var75};
    java.lang.Object[] var78 = var71.toArray(var77);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    boolean var82 = var71.retainAll((java.util.Collection)var79);
    lpf.model.core.ArraySet var83 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var84 = new lpf.model.core.ArraySet();
    boolean var85 = var83.retainAll((java.util.Collection)var84);
    lpf.model.core.ArraySet var86 = new lpf.model.core.ArraySet();
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.lang.Object[] var88 = var84.toArray(var87);
    var84.clear();
    boolean var90 = var71.contains((java.lang.Object)var84);
    lpf.model.kenken.Cage var91 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var84);
    lpf.model.core.Value var92 = new lpf.model.core.Value(' ');
    var4.addMark(var92);
    java.util.Set var94 = var4.getMarks();
    boolean var95 = var4.isOccupied();
    lpf.model.core.Value var96 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test466() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    boolean var33 = var10.contains((java.lang.Object)100);
    lpf.model.kenken.InvalidKenKenPuzzleException var35 = new lpf.model.kenken.InvalidKenKenPuzzleException("");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var38 = new lpf.model.kenken.InvalidKenKenPuzzleException(var37);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var10.toArray(var39);
    java.lang.Object[] var41 = var1.toArray(var39);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var43.toArray(var46);
    var43.clear();
    var43.clear();
    java.lang.Object[] var50 = var43.toArray();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.containsAll((java.util.Collection)var51);
    boolean var55 = var1.retainAll((java.util.Collection)var51);
    var1.clear();
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    lpf.model.core.Cell var61 = new lpf.model.core.Cell(var59);
    lpf.model.core.Value var63 = new lpf.model.core.Value('#');
    var61.setDigit(var63);
    java.util.Set var65 = var61.getMarks();
    lpf.model.core.Value var66 = var61.getDigit();
    boolean var67 = var61.isOccupied();
    lpf.model.core.Value var68 = var61.getDigit();
    lpf.model.core.Value var70 = new lpf.model.core.Value('4');
    var61.removeMark(var70);
    java.util.Set var72 = var61.getMarks();
    boolean var73 = var1.retainAll((java.util.Collection)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var36.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: "+ "'", var37.equals("lpf.model.kenken.InvalidKenKenPuzzleException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test467() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var1.addAll((java.util.Collection)var24);
    int var27 = var24.size();
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var31 = new lpf.model.core.Location(var27, '4');
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var40};
    java.lang.Object[] var43 = var36.toArray(var42);
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    boolean var47 = var36.retainAll((java.util.Collection)var44);
    boolean var49 = var44.contains((java.lang.Object)'#');
    lpf.model.core.Location var50 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var51 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Location var53 = new lpf.model.core.Location(var27, '#');
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var60.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.lang.Object[] var73 = var56.toArray(var72);
    lpf.model.kenken.Cage var74 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var56);
    lpf.model.core.Value var75 = new lpf.model.core.Value('a');
    lpf.model.core.Value var76 = new lpf.model.core.Value('a');
    lpf.model.core.Value var77 = new lpf.model.core.Value('a');
    lpf.model.core.Value var78 = new lpf.model.core.Value('a');
    boolean var79 = var53.equals((java.lang.Object)'a');
    lpf.model.core.Cell var80 = new lpf.model.core.Cell(var53);
    var80.clearMarks();
    java.util.Set var82 = var80.getMarks();
    boolean var83 = var80.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test468() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var4 = new lpf.model.core.ArraySet();
    boolean var5 = var3.retainAll((java.util.Collection)var4);
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    java.lang.Object[] var10 = new java.lang.Object[] { var8};
    java.lang.Object[] var11 = var4.toArray(var10);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    boolean var15 = var4.retainAll((java.util.Collection)var12);
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.lang.Object[] var17 = var0.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var0.containsAll((java.util.Collection)var18);
    int var22 = var0.size();
    int var23 = var0.size();
    int var24 = var0.size();
    var0.clear();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.lang.Object[] var31 = var27.toArray(var30);
    var27.clear();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    boolean var54 = var43.retainAll((java.util.Collection)var51);
    boolean var55 = var34.retainAll((java.util.Collection)var43);
    boolean var57 = var34.contains((java.lang.Object)100);
    java.lang.Object[] var58 = var34.toArray();
    java.lang.Object[] var59 = var34.toArray();
    boolean var60 = var27.retainAll((java.util.Collection)var34);
    java.util.Iterator var61 = var34.iterator();
    var34.clear();
    java.lang.Object[] var63 = var34.toArray();
    boolean var64 = var0.containsAll((java.util.Collection)var34);
    int var65 = var34.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(4,1)"+ "'", var9.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test469() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    lpf.model.core.Location var15 = new lpf.model.core.Location(1, '4');
    java.lang.String var16 = var15.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var15};
    java.lang.Object[] var18 = var11.toArray(var17);
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    boolean var22 = var11.retainAll((java.util.Collection)var19);
    boolean var23 = var2.retainAll((java.util.Collection)var11);
    boolean var25 = var2.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    boolean var41 = var36.contains((java.lang.Object)'#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var43 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    boolean var46 = var44.retainAll((java.util.Collection)var45);
    lpf.model.core.Location var49 = new lpf.model.core.Location(1, '4');
    java.lang.String var50 = var49.toString();
    java.lang.Object[] var51 = new java.lang.Object[] { var49};
    java.lang.Object[] var52 = var45.toArray(var51);
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    boolean var55 = var53.retainAll((java.util.Collection)var54);
    lpf.model.core.Location var58 = new lpf.model.core.Location(1, '4');
    java.lang.String var59 = var58.toString();
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var54.retainAll((java.util.Collection)var62);
    boolean var66 = var45.retainAll((java.util.Collection)var54);
    boolean var68 = var45.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    boolean var71 = var69.retainAll((java.util.Collection)var70);
    lpf.model.core.Location var74 = new lpf.model.core.Location(1, '4');
    java.lang.String var75 = var74.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.Object[] var77 = var70.toArray(var76);
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    boolean var80 = var78.retainAll((java.util.Collection)var79);
    boolean var81 = var70.retainAll((java.util.Collection)var78);
    java.lang.Object[] var82 = var78.toArray();
    lpf.model.kenken.Cage var83 = new lpf.model.kenken.Cage('#', 100, (java.util.Collection)var78);
    lpf.model.core.Location var84 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Cell var85 = new lpf.model.core.Cell(var84);
    boolean var86 = var85.isOccupied();
    var85.clearDigit();
    boolean var88 = var85.isOccupied();
    var85.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(4,1)"+ "'", var16.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(4,1)"+ "'", var50.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(4,1)"+ "'", var59.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(4,1)"+ "'", var75.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test470() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    java.lang.Object[] var25 = var3.toArray();
    java.util.Iterator var26 = var3.iterator();
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var3);
    lpf.model.core.Location var29 = new lpf.model.core.Location(0, '#');
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.lang.Object[] var35 = var31.toArray(var34);
    var31.clear();
    var31.clear();
    java.lang.Object[] var38 = var31.toArray();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    boolean var42 = var31.containsAll((java.util.Collection)var39);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.lang.Object[] var48 = var44.toArray(var47);
    var44.clear();
    var44.clear();
    java.lang.Object[] var51 = var44.toArray();
    boolean var52 = var39.add((java.lang.Object)var44);
    boolean var53 = var44.isEmpty();
    boolean var54 = var29.equals((java.lang.Object)var44);
    lpf.model.core.Cell var55 = new lpf.model.core.Cell(var29);
    java.util.Set var56 = var55.getMarks();
    lpf.model.core.Value var57 = var55.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test471() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    java.lang.Object[] var27 = var23.toArray();
    int var28 = var23.size();
    boolean var29 = var1.add((java.lang.Object)var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    lpf.model.kenken.InvalidKenKenPuzzleException var33 = new lpf.model.kenken.InvalidKenKenPuzzleException();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var36 = new lpf.model.kenken.InvalidKenKenPuzzleException(var35);
    boolean var37 = var30.add((java.lang.Object)var36);
    boolean var38 = var1.retainAll((java.util.Collection)var30);
    int var39 = var30.size();
    lpf.model.core.Value var41 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var43 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    java.lang.String var62 = var61.toString();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.Object[] var64 = var57.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    boolean var68 = var57.retainAll((java.util.Collection)var65);
    boolean var69 = var48.retainAll((java.util.Collection)var57);
    boolean var71 = var48.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var72 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var48);
    lpf.model.core.CellsIterator var73 = new lpf.model.core.CellsIterator(var43, 100, 0);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    lpf.model.core.Cell var78 = new lpf.model.core.Cell(var76);
    var78.clearMarks();
    java.util.Set var80 = var78.getMarks();
    lpf.model.kenken.Cage var81 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var80);
    lpf.model.core.Location var83 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Value var84 = new lpf.model.core.Value('#');
    lpf.model.core.Location var85 = new lpf.model.core.Location(var39, '#');
    lpf.model.core.Cell var86 = new lpf.model.core.Cell(var85);
    java.lang.String var87 = var85.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var34.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException"+ "'", var35.equals("lpf.model.kenken.InvalidKenKenPuzzleException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(4,1)"+ "'", var62.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(#,1)"+ "'", var87.equals("(#,1)"));

  }

  public void test472() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    var1.clear();
    java.lang.Object[] var14 = var1.toArray();
    lpf.model.core.Value var16 = new lpf.model.core.Value('a');
    lpf.model.core.Value var17 = new lpf.model.core.Value('a');
    boolean var18 = var1.remove((java.lang.Object)'a');
    var1.clear();
    boolean var20 = var1.isEmpty();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var22.remove((java.lang.Object)var34);
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    boolean var40 = var38.retainAll((java.util.Collection)var39);
    lpf.model.core.Location var43 = new lpf.model.core.Location(1, '4');
    java.lang.String var44 = var43.toString();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.Object[] var46 = var39.toArray(var45);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.Object[] var55 = var48.toArray(var54);
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    boolean var58 = var56.retainAll((java.util.Collection)var57);
    boolean var59 = var48.retainAll((java.util.Collection)var56);
    boolean var60 = var39.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    boolean var64 = var39.addAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    java.lang.Object[] var74 = var62.toArray(var73);
    boolean var75 = var22.addAll((java.util.Collection)var62);
    boolean var76 = var62.isEmpty();
    java.util.Iterator var77 = var62.iterator();
    boolean var78 = var1.containsAll((java.util.Collection)var62);
    lpf.model.core.ArraySet var79 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    boolean var81 = var79.retainAll((java.util.Collection)var80);
    lpf.model.core.Location var84 = new lpf.model.core.Location(1, '4');
    java.lang.String var85 = var84.toString();
    lpf.model.core.Cell var86 = new lpf.model.core.Cell(var84);
    var86.clearMarks();
    java.util.Set var88 = var86.getMarks();
    var86.clearMarks();
    var86.clearDigit();
    var86.clearMarks();
    boolean var92 = var80.add((java.lang.Object)var86);
    boolean var93 = var86.isOccupied();
    java.util.Set var94 = var86.getMarks();
    var86.clearMarks();
    lpf.model.core.Value var96 = var86.getDigit();
    boolean var97 = var62.contains((java.lang.Object)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(4,1)"+ "'", var44.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(4,1)"+ "'", var85.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test473() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    int var13 = var9.size();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var15.remove((java.lang.Object)var27);
    boolean var31 = var9.containsAll((java.util.Collection)var15);
    java.lang.Object[] var32 = var9.toArray();
    int var33 = var9.size();
    var9.clear();
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    lpf.model.core.Cell var39 = new lpf.model.core.Cell(var37);
    boolean var40 = var39.isOccupied();
    lpf.model.core.Cell[][] var42 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    lpf.model.core.Location var60 = new lpf.model.core.Location(1, '4');
    java.lang.String var61 = var60.toString();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.Object[] var63 = var56.toArray(var62);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    boolean var67 = var56.retainAll((java.util.Collection)var64);
    boolean var68 = var47.retainAll((java.util.Collection)var56);
    boolean var70 = var47.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var71 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var47);
    lpf.model.core.CellsIterator var72 = new lpf.model.core.CellsIterator(var42, 100, 0);
    lpf.model.core.Cell var73 = var72.next();
    lpf.model.core.Cell var74 = var72.next();
    boolean var75 = var72.hasNext();
    lpf.model.core.Cell var76 = var72.next();
    boolean var77 = var39.equals((java.lang.Object)var72);
    boolean var78 = var39.isOccupied();
    java.util.Set var79 = var39.getMarks();
    boolean var80 = var9.remove((java.lang.Object)var39);
    var39.clearDigit();
    java.util.Set var82 = var39.getMarks();
    java.util.Set var83 = var39.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(4,1)"+ "'", var61.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test474() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    java.lang.Object[] var23 = var1.toArray();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    boolean var26 = var24.retainAll((java.util.Collection)var25);
    lpf.model.core.Location var29 = new lpf.model.core.Location(1, '4');
    java.lang.String var30 = var29.toString();
    java.lang.Object[] var31 = new java.lang.Object[] { var29};
    java.lang.Object[] var32 = var25.toArray(var31);
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    boolean var35 = var33.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var38 = new lpf.model.core.Location(1, '4');
    java.lang.String var39 = var38.toString();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.Object[] var41 = var34.toArray(var40);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    boolean var45 = var34.retainAll((java.util.Collection)var42);
    boolean var46 = var25.retainAll((java.util.Collection)var34);
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    boolean var49 = var47.retainAll((java.util.Collection)var48);
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    boolean var52 = var50.retainAll((java.util.Collection)var51);
    lpf.model.core.Location var55 = new lpf.model.core.Location(1, '4');
    java.lang.String var56 = var55.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.Object[] var58 = var51.toArray(var57);
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    boolean var62 = var51.retainAll((java.util.Collection)var59);
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.lang.Object[] var64 = var47.toArray(var63);
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    boolean var67 = var65.retainAll((java.util.Collection)var66);
    lpf.model.core.Location var70 = new lpf.model.core.Location(1, '4');
    java.lang.String var71 = var70.toString();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.Object[] var73 = var66.toArray(var72);
    java.lang.Object[] var74 = var47.toArray(var73);
    java.lang.Object[] var75 = var34.toArray(var73);
    boolean var76 = var1.retainAll((java.util.Collection)var34);
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.String var81 = var79.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var82 = new lpf.model.kenken.InvalidKenKenPuzzleException(var81);
    lpf.model.kenken.InvalidKenKenPuzzleException var83 = new lpf.model.kenken.InvalidKenKenPuzzleException(var81);
    java.lang.String var84 = var83.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var85 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    boolean var86 = var1.contains((java.lang.Object)var85);
    var1.clear();
    java.util.Iterator var88 = var1.iterator();
    java.lang.Object[] var89 = var1.toArray();
    int var90 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(4,1)"+ "'", var30.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(4,1)"+ "'", var39.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(4,1)"+ "'", var56.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(4,1)"+ "'", var71.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(4,1)"+ "'", var81.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"+ "'", var84.equals("lpf.model.kenken.InvalidKenKenPuzzleException: (4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test475() throws Throwable {

    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    boolean var3 = var1.retainAll((java.util.Collection)var2);
    lpf.model.core.Location var6 = new lpf.model.core.Location(1, '4');
    java.lang.String var7 = var6.toString();
    java.lang.Object[] var8 = new java.lang.Object[] { var6};
    java.lang.Object[] var9 = var2.toArray(var8);
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    boolean var12 = var10.retainAll((java.util.Collection)var11);
    boolean var13 = var2.retainAll((java.util.Collection)var10);
    boolean var15 = var10.contains((java.lang.Object)'#');
    lpf.model.core.Location var16 = new lpf.model.core.Location(100, '#');
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    boolean var21 = var19.retainAll((java.util.Collection)var20);
    lpf.model.core.Location var24 = new lpf.model.core.Location(1, '4');
    java.lang.String var25 = var24.toString();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.Object[] var27 = var20.toArray(var26);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.Location var33 = new lpf.model.core.Location(1, '4');
    java.lang.String var34 = var33.toString();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.Object[] var36 = var29.toArray(var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    boolean var40 = var29.retainAll((java.util.Collection)var37);
    boolean var41 = var20.retainAll((java.util.Collection)var29);
    java.lang.Object[] var42 = var20.toArray();
    java.util.Iterator var43 = var20.iterator();
    lpf.model.kenken.Cage var44 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var20);
    lpf.model.core.ArraySet var45 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    boolean var47 = var45.retainAll((java.util.Collection)var46);
    lpf.model.core.Location var50 = new lpf.model.core.Location(1, '4');
    java.lang.String var51 = var50.toString();
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var46.toArray(var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    boolean var67 = var46.retainAll((java.util.Collection)var55);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    boolean var71 = var46.addAll((java.util.Collection)var69);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var76 = var73.remove((java.lang.Object)(short)100);
    boolean var77 = var69.retainAll((java.util.Collection)var73);
    lpf.model.kenken.Cage var78 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var73);
    java.util.Iterator var79 = var78.iterator();
    java.util.Iterator var80 = var78.iterator();
    java.util.Iterator var81 = var78.iterator();
    java.util.Iterator var82 = var78.iterator();
    java.util.Iterator var83 = var78.iterator();
    java.util.Iterator var84 = var78.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(4,1)"+ "'", var7.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(4,1)"+ "'", var25.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(4,1)"+ "'", var34.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(4,1)"+ "'", var51.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test476() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.lang.Object[] var40 = var23.toArray(var39);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var23);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    boolean var46 = var41.contains(var44);
    boolean var47 = var20.contains(var44);
    java.lang.String var48 = var44.toString();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    lpf.model.core.Location var63 = new lpf.model.core.Location(1, '4');
    java.lang.String var64 = var63.toString();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var59.toArray(var65);
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    boolean var69 = var67.retainAll((java.util.Collection)var68);
    boolean var70 = var59.retainAll((java.util.Collection)var67);
    boolean var71 = var50.retainAll((java.util.Collection)var59);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    lpf.model.core.Location var77 = new lpf.model.core.Location(1, '4');
    java.lang.String var78 = var77.toString();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var73.toArray(var79);
    boolean var81 = var50.addAll((java.util.Collection)var73);
    boolean var82 = var73.isEmpty();
    boolean var83 = var44.equals((java.lang.Object)var82);
    java.lang.String var84 = var44.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var85 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    lpf.model.kenken.InvalidKenKenPuzzleException var86 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    lpf.model.kenken.InvalidKenKenPuzzleException var87 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    lpf.model.kenken.InvalidKenKenPuzzleException var88 = new lpf.model.kenken.InvalidKenKenPuzzleException(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(4,1)"+ "'", var64.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(4,1)"+ "'", var78.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(4,1)"+ "'", var84.equals("(4,1)"));

  }

  public void test477() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    lpf.model.core.Location var8 = new lpf.model.core.Location(1, '4');
    java.lang.String var9 = var8.toString();
    lpf.model.core.Cell var10 = new lpf.model.core.Cell(var8);
    lpf.model.core.Value var12 = new lpf.model.core.Value('#');
    var10.setDigit(var12);
    var4.addMark(var12);
    lpf.model.core.Value var15 = var4.getDigit();
    var4.clearDigit();
    java.util.Set var17 = var4.getMarks();
    lpf.model.core.Value var18 = var4.getDigit();
    boolean var19 = var4.isOccupied();
    var4.clearMarks();
    var4.clearDigit();
    boolean var22 = var4.isOccupied();
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    lpf.model.core.Cell var27 = new lpf.model.core.Cell(var25);
    lpf.model.core.Value var29 = new lpf.model.core.Value('#');
    var27.setDigit(var29);
    var27.clearDigit();
    var27.clearDigit();
    var27.clearDigit();
    var27.clearMarks();
    var27.clearMarks();
    var27.clearDigit();
    var27.clearMarks();
    java.util.Set var38 = var27.getMarks();
    var27.clearDigit();
    java.util.Set var40 = var27.getMarks();
    boolean var41 = var27.isOccupied();
    boolean var42 = var4.equals((java.lang.Object)var41);
    
    // Checks the contract:  equals-hashcode on var4 and var27
    assertTrue("Contract failed: equals-hashcode on var4 and var27", var4.equals(var27) ? var4.hashCode() == var27.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var27 and var4
    assertTrue("Contract failed: equals-hashcode on var27 and var4", var27.equals(var4) ? var27.hashCode() == var4.hashCode() : true);

  }

  public void test478() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var49);
    boolean var51 = var50.isOccupied();
    lpf.model.core.Value var52 = var50.getDigit();
    java.util.Set var53 = var50.getMarks();
    lpf.model.core.Value var54 = var50.getDigit();
    var50.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test479() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    boolean var29 = var6.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var30 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var6);
    lpf.model.core.CellsIterator var31 = new lpf.model.core.CellsIterator(var1, 100, 0);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var36 = new lpf.model.core.CellsIterator(var1, 1, (-1));
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    int var40 = var37.size();
    int var41 = var37.size();
    lpf.model.core.Cell[][] var43 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    lpf.model.core.Location var54 = new lpf.model.core.Location(1, '4');
    java.lang.String var55 = var54.toString();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.Object[] var57 = var50.toArray(var56);
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    boolean var60 = var58.retainAll((java.util.Collection)var59);
    boolean var61 = var50.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.lang.Object[] var63 = var46.toArray(var62);
    lpf.model.kenken.Cage var64 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var46);
    int var65 = var46.size();
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    lpf.model.core.CellsIterator var69 = new lpf.model.core.CellsIterator(var43, var65, 1);
    lpf.model.core.CellsIterator var70 = new lpf.model.core.CellsIterator(var1, var41, var65);
    lpf.model.core.Location var72 = new lpf.model.core.Location(var41, ' ');
    lpf.model.core.Cell var73 = new lpf.model.core.Cell(var72);
    lpf.model.core.Value var74 = var73.getDigit();
    java.util.Set var75 = var73.getMarks();
    java.util.Set var76 = var73.getMarks();
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    lpf.model.core.Cell var81 = new lpf.model.core.Cell(var79);
    lpf.model.core.Value var83 = new lpf.model.core.Value('#');
    var81.setDigit(var83);
    var81.clearMarks();
    lpf.model.core.Value var87 = new lpf.model.core.Value('#');
    var81.removeMark(var87);
    boolean var89 = var81.isOccupied();
    var81.clearDigit();
    boolean var91 = var81.isOccupied();
    var81.clearMarks();
    var81.clearDigit();
    lpf.model.core.Value var94 = var81.getDigit();
    boolean var95 = var73.equals((java.lang.Object)var81);
    boolean var96 = var73.isOccupied();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(4,1)"+ "'", var55.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(4,1)"+ "'", var80.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test480() throws Throwable {

    lpf.model.core.Value var1 = new lpf.model.core.Value(' ');
    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    lpf.model.core.Location var32 = new lpf.model.core.Location(1, '4');
    java.lang.String var33 = var32.toString();
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var28.retainAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var41.toArray(var44);
    var41.clear();
    boolean var47 = var28.contains((java.lang.Object)var41);
    lpf.model.kenken.Cage var48 = new lpf.model.kenken.Cage(' ', 100, (java.util.Collection)var41);
    java.util.Iterator var49 = var48.iterator();
    lpf.model.core.Location var52 = new lpf.model.core.Location(1, '4');
    java.lang.String var53 = var52.toString();
    lpf.model.core.Cell var54 = new lpf.model.core.Cell(var52);
    boolean var55 = var48.contains(var52);
    java.util.Iterator var56 = var48.iterator();
    lpf.model.core.Cell[][] var58 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.Cell[][] var60 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var63 = new lpf.model.core.CellsIterator(var60, 10, 0);
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var65 = new lpf.model.core.ArraySet();
    boolean var66 = var64.retainAll((java.util.Collection)var65);
    lpf.model.core.Location var69 = new lpf.model.core.Location(1, '4');
    java.lang.String var70 = var69.toString();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.Object[] var72 = var65.toArray(var71);
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var74 = new lpf.model.core.ArraySet();
    boolean var75 = var73.retainAll((java.util.Collection)var74);
    boolean var76 = var65.retainAll((java.util.Collection)var73);
    java.lang.Object[] var77 = var73.toArray();
    int var78 = var73.size();
    lpf.model.core.CellsIterator var79 = new lpf.model.core.CellsIterator(var58, 10, var78);
    lpf.model.core.Location var81 = new lpf.model.core.Location(10, '#');
    java.lang.String var82 = var81.toString();
    boolean var83 = var48.contains(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var84 = var48.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(4,1)"+ "'", var33.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(4,1)"+ "'", var53.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,1)"+ "'", var70.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(#,10)"+ "'", var82.equals("(#,10)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test481() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    boolean var14 = var9.contains((java.lang.Object)'#');
    boolean var15 = var9.isEmpty();
    boolean var16 = var9.isEmpty();
    java.lang.Object[] var17 = var9.toArray();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.lang.Object[] var35 = var18.toArray(var34);
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    boolean var38 = var36.retainAll((java.util.Collection)var37);
    boolean var39 = var18.containsAll((java.util.Collection)var36);
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    boolean var44 = var42.retainAll((java.util.Collection)var43);
    lpf.model.core.Location var47 = new lpf.model.core.Location(1, '4');
    java.lang.String var48 = var47.toString();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var43.toArray(var49);
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.Location var56 = new lpf.model.core.Location(1, '4');
    java.lang.String var57 = var56.toString();
    java.lang.Object[] var58 = new java.lang.Object[] { var56};
    java.lang.Object[] var59 = var52.toArray(var58);
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    boolean var62 = var60.retainAll((java.util.Collection)var61);
    boolean var63 = var52.retainAll((java.util.Collection)var60);
    boolean var64 = var43.retainAll((java.util.Collection)var52);
    boolean var66 = var43.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var67 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var43);
    boolean var68 = var36.containsAll((java.util.Collection)var43);
    boolean var69 = var9.addAll((java.util.Collection)var36);
    int var70 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(4,1)"+ "'", var48.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(4,1)"+ "'", var57.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test482() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    java.util.Set var6 = var4.getMarks();
    lpf.model.core.Value var7 = var4.getDigit();
    var4.clearDigit();
    lpf.model.core.Value var10 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var12 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    boolean var18 = var16.retainAll((java.util.Collection)var17);
    lpf.model.core.Location var21 = new lpf.model.core.Location(1, '4');
    java.lang.String var22 = var21.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.Object[] var24 = var17.toArray(var23);
    lpf.model.core.ArraySet var25 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    boolean var27 = var25.retainAll((java.util.Collection)var26);
    lpf.model.core.Location var30 = new lpf.model.core.Location(1, '4');
    java.lang.String var31 = var30.toString();
    java.lang.Object[] var32 = new java.lang.Object[] { var30};
    java.lang.Object[] var33 = var26.toArray(var32);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    boolean var37 = var26.retainAll((java.util.Collection)var34);
    boolean var38 = var17.retainAll((java.util.Collection)var26);
    boolean var40 = var17.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var41 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var17);
    lpf.model.core.CellsIterator var42 = new lpf.model.core.CellsIterator(var12, 100, 0);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    lpf.model.core.Cell var47 = new lpf.model.core.Cell(var45);
    var47.clearMarks();
    java.util.Set var49 = var47.getMarks();
    lpf.model.kenken.Cage var50 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var49);
    lpf.model.core.Value var51 = new lpf.model.core.Value('#');
    var4.setDigit(var51);
    java.util.Set var53 = var4.getMarks();
    java.util.Set var54 = var4.getMarks();
    java.util.Set var55 = var4.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(4,1)"+ "'", var22.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(4,1)"+ "'", var31.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test483() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    int var3 = var0.size();
    int var4 = var0.size();
    int var5 = var0.size();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var10 = new lpf.model.core.CellsIterator(var7, 10, 0);
    java.lang.Object[] var11 = var0.toArray((java.lang.Object[])var7);
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    boolean var14 = var12.retainAll((java.util.Collection)var13);
    lpf.model.core.Location var17 = new lpf.model.core.Location(1, '4');
    java.lang.String var18 = var17.toString();
    java.lang.Object[] var19 = new java.lang.Object[] { var17};
    java.lang.Object[] var20 = var13.toArray(var19);
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    boolean var23 = var21.retainAll((java.util.Collection)var22);
    lpf.model.core.Location var26 = new lpf.model.core.Location(1, '4');
    java.lang.String var27 = var26.toString();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.Object[] var29 = var22.toArray(var28);
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    boolean var32 = var30.retainAll((java.util.Collection)var31);
    boolean var33 = var22.retainAll((java.util.Collection)var30);
    boolean var34 = var13.retainAll((java.util.Collection)var22);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var13.addAll((java.util.Collection)var36);
    int var39 = var36.size();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var43 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var44 = new lpf.model.core.ArraySet();
    boolean var45 = var43.retainAll((java.util.Collection)var44);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.Object[] var51 = var44.toArray(var50);
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    boolean var55 = var44.retainAll((java.util.Collection)var52);
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.lang.Object[] var57 = var40.toArray(var56);
    boolean var58 = var36.add((java.lang.Object)var56);
    int var59 = var36.size();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    lpf.model.core.Location var67 = new lpf.model.core.Location(1, '4');
    java.lang.String var68 = var67.toString();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.Object[] var70 = var63.toArray(var69);
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    boolean var73 = var71.retainAll((java.util.Collection)var72);
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.Object[] var79 = var72.toArray(var78);
    lpf.model.core.ArraySet var80 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var81 = new lpf.model.core.ArraySet();
    boolean var82 = var80.retainAll((java.util.Collection)var81);
    boolean var83 = var72.retainAll((java.util.Collection)var80);
    boolean var84 = var63.retainAll((java.util.Collection)var72);
    boolean var86 = var63.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var87 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var63);
    java.lang.Object[] var88 = var63.toArray();
    int var89 = var63.size();
    lpf.model.core.Location var91 = new lpf.model.core.Location(var89, ' ');
    lpf.model.core.CellsIterator var92 = new lpf.model.core.CellsIterator(var7, var59, var89);
    boolean var93 = var92.hasNext();
    boolean var94 = var92.hasNext();
    lpf.model.core.Cell var95 = var92.next();
    lpf.model.core.Cell var96 = var92.next();
    boolean var97 = var92.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var92.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(4,1)"+ "'", var18.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(4,1)"+ "'", var27.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(4,1)"+ "'", var68.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test484() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    boolean var4 = var1.remove((java.lang.Object)(short)100);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    lpf.model.core.Location var19 = new lpf.model.core.Location(1, '4');
    java.lang.String var20 = var19.toString();
    java.lang.Object[] var21 = new java.lang.Object[] { var19};
    java.lang.Object[] var22 = var15.toArray(var21);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    boolean var26 = var15.retainAll((java.util.Collection)var23);
    boolean var27 = var6.retainAll((java.util.Collection)var15);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    boolean var31 = var6.addAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var34 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    boolean var36 = var34.retainAll((java.util.Collection)var35);
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var38.retainAll((java.util.Collection)var46);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.lang.Object[] var51 = var34.toArray(var50);
    lpf.model.kenken.Cage var52 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var34);
    boolean var53 = var29.remove((java.lang.Object)var34);
    boolean var54 = var1.containsAll((java.util.Collection)var29);
    int var55 = var1.size();
    boolean var56 = var1.isEmpty();
    var1.clear();
    java.lang.Object[] var58 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(4,1)"+ "'", var20.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test485() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var16 = var1.remove((java.lang.Object)var13);
    lpf.model.core.ArraySet var17 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    boolean var19 = var17.retainAll((java.util.Collection)var18);
    lpf.model.core.Location var22 = new lpf.model.core.Location(1, '4');
    java.lang.String var23 = var22.toString();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var18.toArray(var24);
    java.util.Iterator var26 = var18.iterator();
    java.util.Iterator var27 = var18.iterator();
    boolean var28 = var13.containsAll((java.util.Collection)var18);
    boolean var29 = var13.isEmpty();
    int var30 = var13.size();
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    lpf.model.core.Location var45 = new lpf.model.core.Location(1, '4');
    java.lang.String var46 = var45.toString();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.Object[] var48 = var41.toArray(var47);
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var50 = new lpf.model.core.ArraySet();
    boolean var51 = var49.retainAll((java.util.Collection)var50);
    boolean var52 = var41.retainAll((java.util.Collection)var49);
    boolean var53 = var32.retainAll((java.util.Collection)var41);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    boolean var57 = var32.addAll((java.util.Collection)var55);
    int var58 = var55.size();
    lpf.model.core.Location var61 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Location var62 = new lpf.model.core.Location(var58, '4');
    lpf.model.core.Value var63 = new lpf.model.core.Value('4');
    lpf.model.core.Value var64 = new lpf.model.core.Value('4');
    lpf.model.core.Value var65 = new lpf.model.core.Value('4');
    lpf.model.core.Value var66 = new lpf.model.core.Value('4');
    lpf.model.core.Value var67 = new lpf.model.core.Value('4');
    lpf.model.core.Location var68 = new lpf.model.core.Location(var30, '4');
    java.lang.String var69 = var68.toString();
    java.lang.String var70 = var68.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(4,1)"+ "'", var23.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(4,1)"+ "'", var37.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(4,1)"+ "'", var46.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,0)"+ "'", var69.equals("(4,0)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(4,0)"+ "'", var70.equals("(4,0)"));

  }

  public void test486() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.ArraySet var5 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var6 = new lpf.model.core.ArraySet();
    boolean var7 = var5.retainAll((java.util.Collection)var6);
    lpf.model.core.Location var10 = new lpf.model.core.Location(1, '4');
    java.lang.String var11 = var10.toString();
    java.lang.Object[] var12 = new java.lang.Object[] { var10};
    java.lang.Object[] var13 = var6.toArray(var12);
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var15 = new lpf.model.core.ArraySet();
    boolean var16 = var14.retainAll((java.util.Collection)var15);
    boolean var17 = var6.retainAll((java.util.Collection)var14);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.lang.Object[] var19 = var2.toArray(var18);
    lpf.model.kenken.Cage var20 = new lpf.model.kenken.Cage('a', (-1), (java.util.Collection)var2);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    boolean var25 = var20.contains(var23);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    lpf.model.core.Cell var30 = new lpf.model.core.Cell(var28);
    boolean var31 = var20.contains(var28);
    lpf.model.core.Location var34 = new lpf.model.core.Location(1, '4');
    boolean var35 = var20.contains(var34);
    java.util.Iterator var36 = var20.iterator();
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    boolean var59 = var38.retainAll((java.util.Collection)var47);
    boolean var61 = var38.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    lpf.model.core.Location var68 = new lpf.model.core.Location(1, '4');
    java.lang.String var69 = var68.toString();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.Object[] var71 = var64.toArray(var70);
    lpf.model.core.ArraySet var72 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var73 = new lpf.model.core.ArraySet();
    boolean var74 = var72.retainAll((java.util.Collection)var73);
    boolean var75 = var64.retainAll((java.util.Collection)var72);
    boolean var77 = var72.contains((java.lang.Object)'#');
    lpf.model.core.Location var78 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var79 = new lpf.model.core.Location(100, '#');
    boolean var81 = var79.equals((java.lang.Object)0L);
    boolean var82 = var20.contains(var79);
    java.util.Iterator var83 = var20.iterator();
    java.util.Iterator var84 = var20.iterator();
    java.util.Iterator var85 = var20.iterator();
    java.util.Iterator var86 = var20.iterator();
    java.util.Iterator var87 = var20.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var88 = var20.isAdjacent();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(4,1)"+ "'", var11.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(4,1)"+ "'", var69.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test487() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    boolean var21 = var10.retainAll((java.util.Collection)var18);
    boolean var22 = var1.retainAll((java.util.Collection)var10);
    boolean var24 = var1.contains((java.lang.Object)100);
    lpf.model.core.ArraySet var26 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    boolean var28 = var26.retainAll((java.util.Collection)var27);
    lpf.model.core.Location var31 = new lpf.model.core.Location(1, '4');
    java.lang.String var32 = var31.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    lpf.model.core.ArraySet var35 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var36 = new lpf.model.core.ArraySet();
    boolean var37 = var35.retainAll((java.util.Collection)var36);
    boolean var38 = var27.retainAll((java.util.Collection)var35);
    boolean var40 = var35.contains((java.lang.Object)'#');
    lpf.model.core.Location var41 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var42 = new lpf.model.core.Location(100, '#');
    boolean var44 = var42.equals((java.lang.Object)0L);
    lpf.model.core.Cell var45 = new lpf.model.core.Cell(var42);
    lpf.model.core.Location var48 = new lpf.model.core.Location(1, '4');
    java.lang.String var49 = var48.toString();
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var48);
    boolean var52 = var50.equals((java.lang.Object)0.0f);
    boolean var53 = var42.equals((java.lang.Object)var50);
    lpf.model.core.Value var54 = var50.getDigit();
    java.util.Set var55 = var50.getMarks();
    java.util.Set var56 = var50.getMarks();
    lpf.model.core.ArraySet var59 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var60 = new lpf.model.core.ArraySet();
    boolean var61 = var59.retainAll((java.util.Collection)var60);
    lpf.model.core.Location var64 = new lpf.model.core.Location(1, '4');
    java.lang.String var65 = var64.toString();
    java.lang.Object[] var66 = new java.lang.Object[] { var64};
    java.lang.Object[] var67 = var60.toArray(var66);
    lpf.model.core.ArraySet var68 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var69 = new lpf.model.core.ArraySet();
    boolean var70 = var68.retainAll((java.util.Collection)var69);
    lpf.model.core.Location var73 = new lpf.model.core.Location(1, '4');
    java.lang.String var74 = var73.toString();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.Object[] var76 = var69.toArray(var75);
    lpf.model.core.ArraySet var77 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var78 = new lpf.model.core.ArraySet();
    boolean var79 = var77.retainAll((java.util.Collection)var78);
    boolean var80 = var69.retainAll((java.util.Collection)var77);
    boolean var81 = var60.retainAll((java.util.Collection)var69);
    java.lang.Object[] var82 = var60.toArray();
    java.util.Iterator var83 = var60.iterator();
    lpf.model.kenken.Cage var84 = new lpf.model.kenken.Cage('a', 0, (java.util.Collection)var60);
    lpf.model.core.Location var86 = new lpf.model.core.Location(0, '#');
    boolean var87 = var50.equals((java.lang.Object)var86);
    lpf.model.core.Cell var88 = new lpf.model.core.Cell(var86);
    java.lang.String var89 = var86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(4,1)"+ "'", var32.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(4,1)"+ "'", var49.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(4,1)"+ "'", var65.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(4,1)"+ "'", var74.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(#,0)"+ "'", var89.equals("(#,0)"));

  }

  public void test488() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearDigit();
    lpf.model.core.Value var6 = var4.getDigit();
    var4.clearDigit();
    var4.clearDigit();
    java.util.Set var9 = var4.getMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test489() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    lpf.model.core.Value var6 = new lpf.model.core.Value('#');
    var4.setDigit(var6);
    var4.clearDigit();
    var4.clearDigit();
    var4.clearDigit();
    var4.clearMarks();
    var4.clearMarks();
    var4.clearDigit();
    var4.clearMarks();
    java.util.Set var15 = var4.getMarks();
    var4.clearDigit();
    var4.clearMarks();
    var4.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test490() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    int var7 = var1.size();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.Location var12 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    boolean var25 = var14.retainAll((java.util.Collection)var22);
    boolean var27 = var22.contains((java.lang.Object)'#');
    boolean var28 = var22.isEmpty();
    boolean var29 = var22.isEmpty();
    boolean var30 = var22.isEmpty();
    java.lang.Object[] var31 = var22.toArray();
    int var32 = var22.size();
    java.lang.Object[] var33 = var22.toArray();
    lpf.model.kenken.Cage var34 = new lpf.model.kenken.Cage('4', 1, (java.util.Collection)var22);
    boolean var35 = var22.isEmpty();
    boolean var36 = var22.isEmpty();
    int var37 = var22.size();
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '4');
    java.lang.String var41 = var40.toString();
    lpf.model.core.Cell var42 = new lpf.model.core.Cell(var40);
    lpf.model.core.Value var44 = new lpf.model.core.Value('#');
    var42.setDigit(var44);
    var42.clearMarks();
    lpf.model.core.Value var48 = new lpf.model.core.Value('#');
    var42.removeMark(var48);
    boolean var50 = var42.isOccupied();
    var42.clearMarks();
    var42.clearDigit();
    boolean var53 = var22.remove((java.lang.Object)var42);
    java.util.Iterator var54 = var22.iterator();
    boolean var55 = var1.containsAll((java.util.Collection)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(4,1)"+ "'", var41.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test491() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    lpf.model.core.Cell var3 = new lpf.model.core.Cell(var2);
    boolean var4 = var3.isOccupied();
    var3.clearMarks();
    boolean var6 = var3.isOccupied();
    lpf.model.core.Value var7 = var3.getDigit();
    boolean var8 = var3.isOccupied();
    boolean var9 = var3.isOccupied();
    lpf.model.core.Location var12 = new lpf.model.core.Location((-1), 'a');
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    boolean var17 = var14.remove((java.lang.Object)(short)100);
    boolean var18 = var12.equals((java.lang.Object)(short)100);
    lpf.model.core.Cell var19 = new lpf.model.core.Cell(var12);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var24.retainAll((java.util.Collection)var32);
    boolean var37 = var32.contains((java.lang.Object)'#');
    lpf.model.core.Location var38 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var39 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var40 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var41 = new lpf.model.core.Value('#');
    lpf.model.core.Value var42 = new lpf.model.core.Value('#');
    var19.setDigit(var42);
    lpf.model.core.Value var44 = var19.getDigit();
    var3.removeMark(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test492() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    boolean var5 = var4.isOccupied();
    lpf.model.core.Cell[][] var7 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    lpf.model.core.Location var25 = new lpf.model.core.Location(1, '4');
    java.lang.String var26 = var25.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.Object[] var28 = var21.toArray(var27);
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var30 = new lpf.model.core.ArraySet();
    boolean var31 = var29.retainAll((java.util.Collection)var30);
    boolean var32 = var21.retainAll((java.util.Collection)var29);
    boolean var33 = var12.retainAll((java.util.Collection)var21);
    boolean var35 = var12.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var36 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var12);
    lpf.model.core.CellsIterator var37 = new lpf.model.core.CellsIterator(var7, 100, 0);
    lpf.model.core.Cell var38 = var37.next();
    lpf.model.core.Cell var39 = var37.next();
    boolean var40 = var37.hasNext();
    lpf.model.core.Cell var41 = var37.next();
    boolean var42 = var4.equals((java.lang.Object)var37);
    boolean var43 = var37.hasNext();
    lpf.model.core.Cell var44 = var37.next();
    lpf.model.core.Cell var45 = var37.next();
    lpf.model.core.Cell var46 = var37.next();
    boolean var47 = var37.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(4,1)"+ "'", var26.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test493() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.Location var5 = new lpf.model.core.Location(1, '4');
    java.lang.String var6 = var5.toString();
    java.lang.Object[] var7 = new java.lang.Object[] { var5};
    java.lang.Object[] var8 = var1.toArray(var7);
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.retainAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.Location var18 = new lpf.model.core.Location(1, '4');
    java.lang.String var19 = var18.toString();
    java.lang.Object[] var20 = new java.lang.Object[] { var18};
    java.lang.Object[] var21 = var14.toArray(var20);
    lpf.model.core.ArraySet var22 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    boolean var24 = var22.retainAll((java.util.Collection)var23);
    lpf.model.core.Location var27 = new lpf.model.core.Location(1, '4');
    java.lang.String var28 = var27.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var27};
    java.lang.Object[] var30 = var23.toArray(var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    boolean var34 = var23.retainAll((java.util.Collection)var31);
    boolean var35 = var14.retainAll((java.util.Collection)var23);
    boolean var37 = var14.contains((java.lang.Object)100);
    java.lang.Object[] var38 = var14.toArray();
    java.lang.Object[] var39 = var14.toArray();
    boolean var40 = var14.isEmpty();
    boolean var41 = var1.removeAll((java.util.Collection)var14);
    java.util.Iterator var42 = var1.iterator();
    boolean var43 = var1.isEmpty();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(4,1)"+ "'", var6.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(4,1)"+ "'", var19.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(4,1)"+ "'", var28.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test494() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.Value var31 = new lpf.model.core.Value('#');
    lpf.model.core.Cell[][] var33 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.ArraySet var37 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var38 = new lpf.model.core.ArraySet();
    boolean var39 = var37.retainAll((java.util.Collection)var38);
    lpf.model.core.Location var42 = new lpf.model.core.Location(1, '4');
    java.lang.String var43 = var42.toString();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    lpf.model.core.Location var51 = new lpf.model.core.Location(1, '4');
    java.lang.String var52 = var51.toString();
    java.lang.Object[] var53 = new java.lang.Object[] { var51};
    java.lang.Object[] var54 = var47.toArray(var53);
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var56 = new lpf.model.core.ArraySet();
    boolean var57 = var55.retainAll((java.util.Collection)var56);
    boolean var58 = var47.retainAll((java.util.Collection)var55);
    boolean var59 = var38.retainAll((java.util.Collection)var47);
    boolean var61 = var38.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var62 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var38);
    lpf.model.core.CellsIterator var63 = new lpf.model.core.CellsIterator(var33, 100, 0);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    lpf.model.core.Cell var68 = new lpf.model.core.Cell(var66);
    var68.clearMarks();
    java.util.Set var70 = var68.getMarks();
    lpf.model.kenken.Cage var71 = new lpf.model.kenken.Cage('#', 0, (java.util.Collection)var70);
    lpf.model.core.Location var73 = new lpf.model.core.Location(0, '#');
    lpf.model.core.Value var74 = new lpf.model.core.Value('#');
    lpf.model.core.Location var75 = new lpf.model.core.Location(var29, '#');
    java.lang.String var76 = var75.toString();
    lpf.model.kenken.InvalidKenKenPuzzleException var77 = new lpf.model.kenken.InvalidKenKenPuzzleException(var76);
    lpf.model.kenken.InvalidKenKenPuzzleException var78 = new lpf.model.kenken.InvalidKenKenPuzzleException(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(4,1)"+ "'", var43.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(4,1)"+ "'", var52.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(#,0)"+ "'", var76.equals("(#,0)"));

  }

  public void test495() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var29 = new lpf.model.core.ArraySet();
    boolean var30 = var28.retainAll((java.util.Collection)var29);
    lpf.model.core.ArraySet var31 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    boolean var33 = var31.retainAll((java.util.Collection)var32);
    lpf.model.core.Location var36 = new lpf.model.core.Location(1, '4');
    java.lang.String var37 = var36.toString();
    java.lang.Object[] var38 = new java.lang.Object[] { var36};
    java.lang.Object[] var39 = var32.toArray(var38);
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    boolean var42 = var40.retainAll((java.util.Collection)var41);
    boolean var43 = var32.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.lang.Object[] var45 = var28.toArray(var44);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var28.containsAll((java.util.Collection)var46);
    java.lang.Object[] var50 = var28.toArray();
    var28.clear();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var53 = new lpf.model.core.ArraySet();
    boolean var54 = var52.retainAll((java.util.Collection)var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    java.lang.String var58 = var57.toString();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.Object[] var60 = var53.toArray(var59);
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var74 = var53.retainAll((java.util.Collection)var62);
    java.lang.Object[] var75 = var53.toArray();
    var53.clear();
    lpf.model.core.Location var79 = new lpf.model.core.Location(1, '4');
    java.lang.String var80 = var79.toString();
    java.lang.String var81 = var79.toString();
    lpf.model.core.Cell var82 = new lpf.model.core.Cell(var79);
    boolean var83 = var53.remove((java.lang.Object)var82);
    boolean var84 = var28.containsAll((java.util.Collection)var53);
    int var85 = var28.size();
    var28.clear();
    int var87 = var28.size();
    lpf.model.core.Location var90 = new lpf.model.core.Location(1, '4');
    java.lang.String var91 = var90.toString();
    lpf.model.core.Cell var92 = new lpf.model.core.Cell(var90);
    var92.clearMarks();
    boolean var94 = var92.isOccupied();
    java.util.Set var95 = var92.getMarks();
    lpf.model.kenken.Cage var96 = new lpf.model.kenken.Cage(' ', var87, (java.util.Collection)var95);
    
    // Checks the contract:  equals-hashcode on var82 and var92
    assertTrue("Contract failed: equals-hashcode on var82 and var92", var82.equals(var92) ? var82.hashCode() == var92.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var92 and var82
    assertTrue("Contract failed: equals-hashcode on var92 and var82", var92.equals(var82) ? var92.hashCode() == var82.hashCode() : true);

  }

  public void test496() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    boolean var29 = var3.isEmpty();
    boolean var30 = var3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test497() throws Throwable {

    lpf.model.core.Location var2 = new lpf.model.core.Location(1, '4');
    java.lang.String var3 = var2.toString();
    lpf.model.core.Cell var4 = new lpf.model.core.Cell(var2);
    var4.clearMarks();
    boolean var7 = var4.equals((java.lang.Object)(short)0);
    boolean var8 = var4.isOccupied();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    lpf.model.core.Location var14 = new lpf.model.core.Location(1, '4');
    java.lang.String var15 = var14.toString();
    java.lang.Object[] var16 = new java.lang.Object[] { var14};
    java.lang.Object[] var17 = var10.toArray(var16);
    lpf.model.core.ArraySet var18 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var19 = new lpf.model.core.ArraySet();
    boolean var20 = var18.retainAll((java.util.Collection)var19);
    lpf.model.core.Location var23 = new lpf.model.core.Location(1, '4');
    java.lang.String var24 = var23.toString();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.Object[] var26 = var19.toArray(var25);
    lpf.model.core.ArraySet var27 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var28 = new lpf.model.core.ArraySet();
    boolean var29 = var27.retainAll((java.util.Collection)var28);
    boolean var30 = var19.retainAll((java.util.Collection)var27);
    boolean var31 = var10.retainAll((java.util.Collection)var19);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    boolean var35 = var10.addAll((java.util.Collection)var33);
    int var36 = var33.size();
    boolean var37 = var4.equals((java.lang.Object)var33);
    boolean var38 = var4.isOccupied();
    lpf.model.core.ArraySet var39 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var40 = new lpf.model.core.ArraySet();
    boolean var41 = var39.retainAll((java.util.Collection)var40);
    lpf.model.core.Location var44 = new lpf.model.core.Location(1, '4');
    java.lang.String var45 = var44.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var44};
    java.lang.Object[] var47 = var40.toArray(var46);
    lpf.model.core.ArraySet var48 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var49 = new lpf.model.core.ArraySet();
    boolean var50 = var48.retainAll((java.util.Collection)var49);
    lpf.model.core.Location var53 = new lpf.model.core.Location(1, '4');
    java.lang.String var54 = var53.toString();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.Object[] var56 = var49.toArray(var55);
    lpf.model.core.ArraySet var57 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var58 = new lpf.model.core.ArraySet();
    boolean var59 = var57.retainAll((java.util.Collection)var58);
    boolean var60 = var49.retainAll((java.util.Collection)var57);
    boolean var61 = var40.retainAll((java.util.Collection)var49);
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    boolean var64 = var62.retainAll((java.util.Collection)var63);
    boolean var65 = var40.addAll((java.util.Collection)var63);
    lpf.model.core.ArraySet var66 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var67 = new lpf.model.core.ArraySet();
    boolean var68 = var66.retainAll((java.util.Collection)var67);
    boolean var70 = var67.remove((java.lang.Object)(short)100);
    boolean var71 = var63.retainAll((java.util.Collection)var67);
    boolean var72 = var4.equals((java.lang.Object)var63);
    java.util.Set var73 = var4.getMarks();
    lpf.model.core.Location var76 = new lpf.model.core.Location(1, '4');
    java.lang.String var77 = var76.toString();
    lpf.model.core.Cell var78 = new lpf.model.core.Cell(var76);
    lpf.model.core.Value var80 = new lpf.model.core.Value('#');
    var78.setDigit(var80);
    var78.clearMarks();
    lpf.model.core.Value var84 = new lpf.model.core.Value('#');
    var78.removeMark(var84);
    boolean var86 = var78.isOccupied();
    java.util.Set var87 = var78.getMarks();
    lpf.model.core.Value var88 = var78.getDigit();
    var4.removeMark(var88);
    var4.clearMarks();
    boolean var91 = var4.isOccupied();
    var4.clearDigit();
    lpf.model.core.Value var93 = var4.getDigit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(4,1)"+ "'", var3.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(4,1)"+ "'", var15.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(4,1)"+ "'", var24.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(4,1)"+ "'", var45.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(4,1)"+ "'", var54.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(4,1)"+ "'", var77.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test498() throws Throwable {

    lpf.model.core.Cell[][] var1 = new lpf.model.core.Cell[][] { null};
    lpf.model.core.CellsIterator var4 = new lpf.model.core.CellsIterator(var1, 10, 0);
    boolean var5 = var4.hasNext();
    boolean var6 = var4.hasNext();
    lpf.model.core.Cell var7 = var4.next();
    boolean var8 = var4.hasNext();
    boolean var9 = var4.hasNext();
    lpf.model.core.Cell var10 = var4.next();
    boolean var11 = var4.hasNext();
    boolean var12 = var4.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.remove();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test499() throws Throwable {

    lpf.model.core.ArraySet var0 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var1 = new lpf.model.core.ArraySet();
    boolean var2 = var0.retainAll((java.util.Collection)var1);
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.lang.Object[] var5 = var1.toArray(var4);
    var1.clear();
    var1.clear();
    java.lang.Object[] var8 = var1.toArray();
    lpf.model.core.ArraySet var9 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var10 = new lpf.model.core.ArraySet();
    boolean var11 = var9.retainAll((java.util.Collection)var10);
    boolean var12 = var1.containsAll((java.util.Collection)var9);
    lpf.model.core.ArraySet var13 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var14 = new lpf.model.core.ArraySet();
    boolean var15 = var13.retainAll((java.util.Collection)var14);
    lpf.model.core.ArraySet var16 = new lpf.model.core.ArraySet();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.lang.Object[] var18 = var14.toArray(var17);
    var14.clear();
    var14.clear();
    java.lang.Object[] var21 = var14.toArray();
    boolean var22 = var9.add((java.lang.Object)var14);
    lpf.model.core.ArraySet var23 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var24 = new lpf.model.core.ArraySet();
    boolean var25 = var23.retainAll((java.util.Collection)var24);
    lpf.model.core.Location var28 = new lpf.model.core.Location(1, '4');
    java.lang.String var29 = var28.toString();
    java.lang.Object[] var30 = new java.lang.Object[] { var28};
    java.lang.Object[] var31 = var24.toArray(var30);
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var45 = var24.retainAll((java.util.Collection)var33);
    lpf.model.core.ArraySet var46 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var47 = new lpf.model.core.ArraySet();
    boolean var48 = var46.retainAll((java.util.Collection)var47);
    boolean var49 = var24.addAll((java.util.Collection)var47);
    int var50 = var47.size();
    lpf.model.core.ArraySet var51 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var52 = new lpf.model.core.ArraySet();
    boolean var53 = var51.retainAll((java.util.Collection)var52);
    lpf.model.core.ArraySet var54 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var55 = new lpf.model.core.ArraySet();
    boolean var56 = var54.retainAll((java.util.Collection)var55);
    lpf.model.core.Location var59 = new lpf.model.core.Location(1, '4');
    java.lang.String var60 = var59.toString();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    lpf.model.core.ArraySet var63 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var64 = new lpf.model.core.ArraySet();
    boolean var65 = var63.retainAll((java.util.Collection)var64);
    boolean var66 = var55.retainAll((java.util.Collection)var63);
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.lang.Object[] var68 = var51.toArray(var67);
    boolean var69 = var47.add((java.lang.Object)var67);
    boolean var70 = var9.retainAll((java.util.Collection)var47);
    java.util.Iterator var71 = var47.iterator();
    java.lang.Object[] var72 = var47.toArray();
    lpf.model.core.Location var75 = new lpf.model.core.Location(1, '4');
    java.lang.String var76 = var75.toString();
    lpf.model.core.Cell var77 = new lpf.model.core.Cell(var75);
    var77.clearMarks();
    boolean var80 = var77.equals((java.lang.Object)(short)0);
    boolean var81 = var77.isOccupied();
    boolean var82 = var77.isOccupied();
    boolean var83 = var77.isOccupied();
    boolean var84 = var47.remove((java.lang.Object)var77);
    java.util.Set var85 = var77.getMarks();
    lpf.model.core.Value var86 = var77.getDigit();
    lpf.model.core.Value var87 = var77.getDigit();
    java.util.Set var88 = var77.getMarks();
    java.util.Set var89 = var77.getMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(4,1)"+ "'", var29.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(4,1)"+ "'", var60.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(4,1)"+ "'", var76.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test500() throws Throwable {

    lpf.model.core.ArraySet var2 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var3 = new lpf.model.core.ArraySet();
    boolean var4 = var2.retainAll((java.util.Collection)var3);
    lpf.model.core.Location var7 = new lpf.model.core.Location(1, '4');
    java.lang.String var8 = var7.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var7};
    java.lang.Object[] var10 = var3.toArray(var9);
    lpf.model.core.ArraySet var11 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var12 = new lpf.model.core.ArraySet();
    boolean var13 = var11.retainAll((java.util.Collection)var12);
    lpf.model.core.Location var16 = new lpf.model.core.Location(1, '4');
    java.lang.String var17 = var16.toString();
    java.lang.Object[] var18 = new java.lang.Object[] { var16};
    java.lang.Object[] var19 = var12.toArray(var18);
    lpf.model.core.ArraySet var20 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var21 = new lpf.model.core.ArraySet();
    boolean var22 = var20.retainAll((java.util.Collection)var21);
    boolean var23 = var12.retainAll((java.util.Collection)var20);
    boolean var24 = var3.retainAll((java.util.Collection)var12);
    boolean var26 = var3.contains((java.lang.Object)100);
    lpf.model.kenken.Cage var27 = new lpf.model.kenken.Cage(' ', 0, (java.util.Collection)var3);
    java.lang.Object[] var28 = var3.toArray();
    int var29 = var3.size();
    lpf.model.core.ArraySet var32 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var33 = new lpf.model.core.ArraySet();
    boolean var34 = var32.retainAll((java.util.Collection)var33);
    lpf.model.core.Location var37 = new lpf.model.core.Location(1, '4');
    java.lang.String var38 = var37.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.Object[] var40 = var33.toArray(var39);
    lpf.model.core.ArraySet var41 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var42 = new lpf.model.core.ArraySet();
    boolean var43 = var41.retainAll((java.util.Collection)var42);
    boolean var44 = var33.retainAll((java.util.Collection)var41);
    boolean var46 = var41.contains((java.lang.Object)'#');
    lpf.model.core.Location var47 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var48 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var49 = new lpf.model.core.Location(var29, '#');
    lpf.model.core.Cell var50 = new lpf.model.core.Cell(var49);
    lpf.model.core.Value var51 = var50.getDigit();
    lpf.model.core.Value var53 = new lpf.model.core.Value(' ');
    var50.removeMark(var53);
    lpf.model.core.Location var57 = new lpf.model.core.Location(1, '4');
    lpf.model.core.ArraySet var61 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var62 = new lpf.model.core.ArraySet();
    boolean var63 = var61.retainAll((java.util.Collection)var62);
    lpf.model.core.Location var66 = new lpf.model.core.Location(1, '4');
    java.lang.String var67 = var66.toString();
    java.lang.Object[] var68 = new java.lang.Object[] { var66};
    java.lang.Object[] var69 = var62.toArray(var68);
    lpf.model.core.ArraySet var70 = new lpf.model.core.ArraySet();
    lpf.model.core.ArraySet var71 = new lpf.model.core.ArraySet();
    boolean var72 = var70.retainAll((java.util.Collection)var71);
    boolean var73 = var62.retainAll((java.util.Collection)var70);
    boolean var75 = var70.contains((java.lang.Object)'#');
    lpf.model.core.Location var76 = new lpf.model.core.Location(100, '#');
    lpf.model.core.Location var77 = new lpf.model.core.Location((-1), '#');
    lpf.model.core.Location var78 = new lpf.model.core.Location(1, '#');
    lpf.model.core.Value var79 = new lpf.model.core.Value('#');
    boolean var80 = var57.equals((java.lang.Object)var79);
    var50.addMark(var79);
    java.util.Set var82 = var50.getMarks();
    var50.clearMarks();
    java.util.Set var84 = var50.getMarks();
    boolean var85 = var50.isOccupied();
    boolean var86 = var50.isOccupied();
    var50.clearMarks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(4,1)"+ "'", var8.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(4,1)"+ "'", var17.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(4,1)"+ "'", var38.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(4,1)"+ "'", var67.equals("(4,1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

}
